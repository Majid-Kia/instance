{"version":3,"file":"js/app.44c00427.js","mappings":"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","sources":["webpack://cloudzy-v2/./src/store/plans/mutations.ts","webpack://cloudzy-v2/./src/App.vue?9cd3","webpack://cloudzy-v2/./src/api/base.ts","webpack://cloudzy-v2/./src/api/api.ts","webpack://cloudzy-v2/./src/api/configuration.ts","webpack://cloudzy-v2/./src/plugins/api.ts","webpack://cloudzy-v2/./src/store/plans/actions.ts","webpack://cloudzy-v2/./src/store/plans/index.ts","webpack://cloudzy-v2/./src/store/toast/mutations.ts","webpack://cloudzy-v2/./src/store/toast/actions.ts","webpack://cloudzy-v2/./src/store/toast/index.ts","webpack://cloudzy-v2/./src/store/app/mutations.ts","webpack://cloudzy-v2/./src/store/app/index.ts","webpack://cloudzy-v2/./src/store/index.ts","webpack://cloudzy-v2/./node_modules/@vue/vue-loader-v15/lib/index.js","webpack://cloudzy-v2/./src/App.vue?a37c","webpack://cloudzy-v2/./src/App.vue","webpack://cloudzy-v2/./src/layouts/Dashboard.vue?9279","webpack://cloudzy-v2/src/layouts/Dashboard.vue","webpack://cloudzy-v2/./src/layouts/Dashboard.vue?294f","webpack://cloudzy-v2/./src/layouts/Dashboard.vue","webpack://cloudzy-v2/./src/views/InstancesNew.vue?37d9","webpack://cloudzy-v2/./src/views/components/SelectRegion.vue?4990","webpack://cloudzy-v2/./src/views/components/SelectRegion.vue?00f3","webpack://cloudzy-v2/./src/views/components/SelectRegion.vue","webpack://cloudzy-v2/./src/views/components/SelectPlan.vue?0e65","webpack://cloudzy-v2/./src/views/components/SelectPlan.vue?2a2e","webpack://cloudzy-v2/./src/views/components/SelectPlan.vue","webpack://cloudzy-v2/./src/views/components/HostNameInput.vue?a724","webpack://cloudzy-v2/./src/views/components/HostNameInput.vue?bbd6","webpack://cloudzy-v2/./src/views/components/HostNameInput.vue","webpack://cloudzy-v2/./src/views/components/EnableIPv4.vue?50e6","webpack://cloudzy-v2/./src/views/components/EnableIPv4.vue?bb6e","webpack://cloudzy-v2/./src/views/components/EnableIPv4.vue","webpack://cloudzy-v2/./src/views/components/InstanceQuantityCounter.vue?ab5e","webpack://cloudzy-v2/./src/views/components/InstanceQuantityCounter.vue?3722","webpack://cloudzy-v2/./src/views/components/InstanceQuantityCounter.vue","webpack://cloudzy-v2/./src/views/components/OperatingSystems.vue?4d36","webpack://cloudzy-v2/./src/views/components/OperatingSystems.vue?2eec","webpack://cloudzy-v2/./src/views/components/OperatingSystems.vue","webpack://cloudzy-v2/./src/views/components/SSHKeysList.vue?4655","webpack://cloudzy-v2/./src/views/components/SSHKeysList.vue?a7c0","webpack://cloudzy-v2/./src/views/components/SSHKeysList.vue","webpack://cloudzy-v2/./src/views/InstancesNew.vue?0e86","webpack://cloudzy-v2/./src/views/InstancesNew.vue","webpack://cloudzy-v2/./src/router/index.ts","webpack://cloudzy-v2/./src/plugins/vuetify.ts","webpack://cloudzy-v2/./src/plugins/axios.ts","webpack://cloudzy-v2/./src/main.ts","webpack://cloudzy-v2/webpack/bootstrap","webpack://cloudzy-v2/webpack/runtime/amd options","webpack://cloudzy-v2/webpack/runtime/chunk loaded","webpack://cloudzy-v2/webpack/runtime/compat get default export","webpack://cloudzy-v2/webpack/runtime/define property getters","webpack://cloudzy-v2/webpack/runtime/global","webpack://cloudzy-v2/webpack/runtime/harmony module decorator","webpack://cloudzy-v2/webpack/runtime/hasOwnProperty shorthand","webpack://cloudzy-v2/webpack/runtime/make namespace object","webpack://cloudzy-v2/webpack/runtime/node module decorator","webpack://cloudzy-v2/webpack/runtime/publicPath","webpack://cloudzy-v2/webpack/runtime/jsonp chunk loading","webpack://cloudzy-v2/webpack/startup"],"sourcesContent":["import { MutationTree } from \"vuex\";\nimport { PlansState } from \"./types\";\n\nexport enum PlansMutations {\n  SET_PLANS = \"setPlans\",\n  SET_PLANS_LOADING = \"setPlansLoading\",\n}\n\nexport const mutations: MutationTree<PlansState> = {\n  [PlansMutations.SET_PLANS](state, payload) {\n    state.all = payload;\n  },\n  [PlansMutations.SET_PLANS_LOADING](state, payload) {\n    state.loading = payload;\n  },\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-snackbar',{staticClass:\"snackbar\",class:'snackbar-' + _vm.toast.color,attrs:{\"transition\":\"scroll-y-reverse-transition\",\"text\":\"\",\"timeout\":_vm.toast.timeout,\"top\":\"\",\"centered\":\"\"},model:{value:(_vm.toast.show),callback:function ($$v) {_vm.$set(_vm.toast, \"show\", $$v)},expression:\"toast.show\"}},[(_vm.toast.color == 'warning')?_c('svg',{attrs:{\"width\":\"20\",\"height\":\"18\",\"viewBox\":\"0 0 20 18\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('path',{attrs:{\"d\":\"M2.47012 18.0001H17.5301C19.0701 18.0001 20.0301 16.3301 19.2601 15.0001L11.7301 1.99005C10.9601 0.660054 9.04012 0.660054 8.27012 1.99005L0.740121 15.0001C-0.0298788 16.3301 0.930121 18.0001 2.47012 18.0001ZM10.0001 11.0001C9.45012 11.0001 9.00012 10.5501 9.00012 10.0001V8.00005C9.00012 7.45005 9.45012 7.00005 10.0001 7.00005C10.5501 7.00005 11.0001 7.45005 11.0001 8.00005V10.0001C11.0001 10.5501 10.5501 11.0001 10.0001 11.0001ZM11.0001 15.0001H9.00012V13.0001H11.0001V15.0001Z\",\"fill\":\"#FAC802\"}})]):_vm._e(),(_vm.toast.color == 'error')?_c('svg',{attrs:{\"width\":\"20\",\"height\":\"20\",\"viewBox\":\"0 0 20 20\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('path',{attrs:{\"d\":\"M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM14.3 14.3C13.91 14.69 13.28 14.69 12.89 14.3L10 11.41L7.11 14.3C6.72 14.69 6.09 14.69 5.7 14.3C5.31 13.91 5.31 13.28 5.7 12.89L8.59 10L5.7 7.11C5.31 6.72 5.31 6.09 5.7 5.7C6.09 5.31 6.72 5.31 7.11 5.7L10 8.59L12.89 5.7C13.28 5.31 13.91 5.31 14.3 5.7C14.69 6.09 14.69 6.72 14.3 7.11L11.41 10L14.3 12.89C14.68 13.27 14.68 13.91 14.3 14.3Z\",\"fill\":\"#FF4465\"}})]):_vm._e(),_c('span',[_vm._v(_vm._s(_vm.toast.text))])]),_c('router-view')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// tslint:disable\n/**\n * AbrNOC Gateway\n * API gateway for AbrNOC panels.\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * AbrNOC Gateway\n * API gateway for AbrNOC panels.\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport * as globalImportUrl from \"url\";\nimport { Configuration } from \"./configuration\";\nimport globalAxios, { AxiosPromise, AxiosInstance } from \"axios\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  BASE_PATH,\n  COLLECTION_FORMATS,\n  RequestArgs,\n  BaseAPI,\n  RequiredError,\n} from \"./base\";\n\n/**\n *\n * @export\n * @interface AddItemReturnSchema\n */\nexport interface AddItemReturnSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof AddItemReturnSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {string}\n   * @memberof AddItemReturnSchema\n   */\n  message?: string;\n}\n/**\n *\n * @export\n * @interface BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n */\nexport interface BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n   */\n  customerId: string;\n}\n/**\n *\n * @export\n * @interface BodyAddNoteForCustomerCustomersCustomerIdNotePost\n */\nexport interface BodyAddNoteForCustomerCustomersCustomerIdNotePost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAddNoteForCustomerCustomersCustomerIdNotePost\n   */\n  note: string;\n}\n/**\n *\n * @export\n * @interface BodyAddOnetimeInvoiceInvoicesOneTimePost\n */\nexport interface BodyAddOnetimeInvoiceInvoicesOneTimePost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAddOnetimeInvoiceInvoicesOneTimePost\n   */\n  customerId: string;\n  /**\n   *\n   * @type {number}\n   * @memberof BodyAddOnetimeInvoiceInvoicesOneTimePost\n   */\n  price: number;\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAddOnetimeInvoiceInvoicesOneTimePost\n   */\n  description: string;\n}\n/**\n *\n * @export\n * @interface BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n */\nexport interface BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost {\n  /**\n   *\n   * @type {number}\n   * @memberof BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n   */\n  credit: number;\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n   */\n  description: string;\n}\n/**\n *\n * @export\n * @interface BodyAdminLoginAuthAdminLoginPost\n */\nexport interface BodyAdminLoginAuthAdminLoginPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAdminLoginAuthAdminLoginPost\n   */\n  email: string;\n  /**\n   *\n   * @type {string}\n   * @memberof BodyAdminLoginAuthAdminLoginPost\n   */\n  password: string;\n}\n/**\n *\n * @export\n * @interface BodyChangeEmailAuthChangeEmailPut\n */\nexport interface BodyChangeEmailAuthChangeEmailPut {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyChangeEmailAuthChangeEmailPut\n   */\n  email: string;\n}\n/**\n *\n * @export\n * @interface BodyChangeEmailCustomersCustomerIdChangeEmailPost\n */\nexport interface BodyChangeEmailCustomersCustomerIdChangeEmailPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyChangeEmailCustomersCustomerIdChangeEmailPost\n   */\n  email: string;\n}\n/**\n *\n * @export\n * @interface BodyChangePasswordAuthChangePasswordPost\n */\nexport interface BodyChangePasswordAuthChangePasswordPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyChangePasswordAuthChangePasswordPost\n   */\n  newPassword: string;\n  /**\n   *\n   * @type {string}\n   * @memberof BodyChangePasswordAuthChangePasswordPost\n   */\n  oldPassword: string;\n}\n/**\n *\n * @export\n * @interface BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n */\nexport interface BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n   */\n  planId: string;\n}\n/**\n *\n * @export\n * @interface BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n */\nexport interface BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n   */\n  planId: string;\n}\n/**\n *\n * @export\n * @interface BodyConfirmResetPasswordAuthConfirmResetPasswordPost\n */\nexport interface BodyConfirmResetPasswordAuthConfirmResetPasswordPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyConfirmResetPasswordAuthConfirmResetPasswordPost\n   */\n  newPassword: string;\n}\n/**\n *\n * @export\n * @interface BodyCustomerLoginAuthCustomerLoginPost\n */\nexport interface BodyCustomerLoginAuthCustomerLoginPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyCustomerLoginAuthCustomerLoginPost\n   */\n  email: string;\n  /**\n   *\n   * @type {string}\n   * @memberof BodyCustomerLoginAuthCustomerLoginPost\n   */\n  password: string;\n}\n/**\n *\n * @export\n * @interface BodyForgotPasswordAuthForgotPasswordPost\n */\nexport interface BodyForgotPasswordAuthForgotPasswordPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyForgotPasswordAuthForgotPasswordPost\n   */\n  email: string;\n}\n/**\n *\n * @export\n * @interface BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n */\nexport interface BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n   */\n  customerId: string;\n}\n/**\n *\n * @export\n * @interface BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n */\nexport interface BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n   */\n  email: string;\n}\n/**\n *\n * @export\n * @interface BodyShareInvoiceInvoicesInvoiceIdSharePost\n */\nexport interface BodyShareInvoiceInvoicesInvoiceIdSharePost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyShareInvoiceInvoicesInvoiceIdSharePost\n   */\n  email?: string;\n}\n/**\n *\n * @export\n * @interface BodySuspendCustomerCustomersCustomerIdSuspendPost\n */\nexport interface BodySuspendCustomerCustomersCustomerIdSuspendPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodySuspendCustomerCustomersCustomerIdSuspendPost\n   */\n  note: string;\n}\n/**\n *\n * @export\n * @interface BodyUploadFileTicketingAttachmentsUploadPost\n */\nexport interface BodyUploadFileTicketingAttachmentsUploadPost {\n  /**\n   *\n   * @type {any}\n   * @memberof BodyUploadFileTicketingAttachmentsUploadPost\n   */\n  file: any;\n}\n/**\n *\n * @export\n * @interface BodyUseCouponPaymentsCouponPost\n */\nexport interface BodyUseCouponPaymentsCouponPost {\n  /**\n   *\n   * @type {string}\n   * @memberof BodyUseCouponPaymentsCouponPost\n   */\n  code: string;\n}\n/**\n *\n * @export\n * @interface CouponAmountSchema\n */\nexport interface CouponAmountSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof CouponAmountSchema\n   */\n  couponAmount: number;\n}\n/**\n *\n * @export\n * @interface CouponPaginatedListSchema\n */\nexport interface CouponPaginatedListSchema {\n  /**\n   *\n   * @type {Array<CouponSchema>}\n   * @memberof CouponPaginatedListSchema\n   */\n  coupons: Array<CouponSchema>;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponPaginatedListSchema\n   */\n  totalPages: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponPaginatedListSchema\n   */\n  totalCount: number;\n}\n/**\n *\n * @export\n * @interface CouponSchema\n */\nexport interface CouponSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CouponSchema\n   */\n  code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CouponSchema\n   */\n  description?: string;\n  /**\n   *\n   * @type {CouponTypeEnum}\n   * @memberof CouponSchema\n   */\n  type: CouponTypeEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  expiresAtTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  value: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CouponSchema\n   */\n  createdBy?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  createdAtTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  beginsAtTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CouponSchema\n   */\n  quantity?: number;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CouponSchema\n   */\n  isActive?: boolean;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum CouponTypeEnum {\n  OneTimeForAll = \"OneTimeForAll\",\n  OneTimeForListOfUsers = \"OneTimeForListOfUsers\",\n  OneTimeForNewUsers = \"OneTimeForNewUsers\",\n}\n\n/**\n *\n * @export\n * @interface CouponTypesEndpointOutput\n */\nexport interface CouponTypesEndpointOutput {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CouponTypesEndpointOutput\n   */\n  listOfCouponTypes: Array<string>;\n}\n/**\n *\n * @export\n * @interface CreateCouponInputSchema\n */\nexport interface CreateCouponInputSchema {\n  /**\n   *\n   * @type {CouponTypeEnum}\n   * @memberof CreateCouponInputSchema\n   */\n  type: CouponTypeEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof CreateCouponInputSchema\n   */\n  value: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CreateCouponInputSchema\n   */\n  code?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CreateCouponInputSchema\n   */\n  codeLength?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CreateCouponInputSchema\n   */\n  quantity?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CreateCouponInputSchema\n   */\n  description?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CreateCouponInputSchema\n   */\n  expiresAtTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CreateCouponInputSchema\n   */\n  beginsAtTimestamp?: number;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CreateCouponInputSchema\n   */\n  isActive?: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CreateCouponInputSchema\n   */\n  userIds?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CreatePaymentInputSchema\n */\nexport interface CreatePaymentInputSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof CreatePaymentInputSchema\n   */\n  credit: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CreatePaymentInputSchema\n   */\n  gateway: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CreatePaymentInputSchema\n   */\n  description?: string;\n}\n/**\n *\n * @export\n * @interface CreatePaymentResponseSchema\n */\nexport interface CreatePaymentResponseSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CreatePaymentResponseSchema\n   */\n  url: string;\n  /**\n   *\n   * @type {object}\n   * @memberof CreatePaymentResponseSchema\n   */\n  postData?: object;\n}\n/**\n *\n * @export\n * @interface CurrentUserInfoSchema\n */\nexport interface CurrentUserInfoSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  fullname: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  email: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CurrentUserInfoSchema\n   */\n  registeredAt: Date;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CurrentUserInfoSchema\n   */\n  isEmailVerified: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  unverifiedEmail?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  phoneNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  region?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  city?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CurrentUserInfoSchema\n   */\n  country?: string;\n}\n/**\n *\n * @export\n * @interface CustomerBillingDetailSchema\n */\nexport interface CustomerBillingDetailSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerBillingDetailSchema\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerBillingDetailSchema\n   */\n  balance: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerBillingDetailSchema\n   */\n  email: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerBillingDetailSchema\n   */\n  threshold?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerBillingDetailSchema\n   */\n  credit: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerBillingDetailSchema\n   */\n  suspendTimestamp?: number;\n  /**\n   *\n   * @type {CustomerStatusEnum}\n   * @memberof CustomerBillingDetailSchema\n   */\n  status?: CustomerStatusEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerBillingDetailSchema\n   */\n  invoicesCount?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerBillingDetailSchema\n   */\n  finalizedPaymentsCount?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerBillingDetailSchema\n   */\n  negativeBalanceSuccessiveDays?: number;\n}\n/**\n *\n * @export\n * @interface CustomerDetailOutputSchema\n */\nexport interface CustomerDetailOutputSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  fullname: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  email: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  registeredAt: Date;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerDetailOutputSchema\n   */\n  registeredAtTimestamp: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  phoneNumber?: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CustomerDetailOutputSchema\n   */\n  roles?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  group?: string;\n  /**\n   *\n   * @type {UserStatusEnum}\n   * @memberof CustomerDetailOutputSchema\n   */\n  status: UserStatusEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  region?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  city?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  country?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CustomerDetailOutputSchema\n   */\n  isSuspended?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CustomerDetailOutputSchema\n   */\n  isBillingSuspended?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CustomerDetailOutputSchema\n   */\n  isAdminSuspended?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CustomerDetailOutputSchema\n   */\n  isActive?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CustomerDetailOutputSchema\n   */\n  isEmailVerified?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  adminSuspensionNote?: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  lastAdminSuspendedAt?: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  lastAdminSuspendedBy?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  adminNote?: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  emailChangedAt?: Date;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  passwordChangedAt?: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  unverifiedEmail?: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  lastLoginAt?: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerDetailOutputSchema\n   */\n  lastLoginFrom?: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerDetailOutputSchema\n   */\n  lastModifiedAt?: Date;\n}\n/**\n *\n * @export\n * @interface CustomerListOutputSchema\n */\nexport interface CustomerListOutputSchema {\n  /**\n   *\n   * @type {Array<CustomerOutputSchema>}\n   * @memberof CustomerListOutputSchema\n   */\n  customers?: Array<CustomerOutputSchema>;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerListOutputSchema\n   */\n  totalCount: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerListOutputSchema\n   */\n  totalPages?: number;\n}\n/**\n *\n * @export\n * @interface CustomerOutputSchema\n */\nexport interface CustomerOutputSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerOutputSchema\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerOutputSchema\n   */\n  fullname: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerOutputSchema\n   */\n  email: string;\n  /**\n   *\n   * @type {Date}\n   * @memberof CustomerOutputSchema\n   */\n  registeredAt: Date;\n  /**\n   *\n   * @type {number}\n   * @memberof CustomerOutputSchema\n   */\n  registeredAtTimestamp: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerOutputSchema\n   */\n  phoneNumber?: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CustomerOutputSchema\n   */\n  roles?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerOutputSchema\n   */\n  group?: string;\n  /**\n   *\n   * @type {UserStatusEnum}\n   * @memberof CustomerOutputSchema\n   */\n  status: UserStatusEnum;\n}\n/**\n *\n * @export\n * @interface CustomerProfileUpdateInputSchema\n */\nexport interface CustomerProfileUpdateInputSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerProfileUpdateInputSchema\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerProfileUpdateInputSchema\n   */\n  phoneNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerProfileUpdateInputSchema\n   */\n  region?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerProfileUpdateInputSchema\n   */\n  city?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomerProfileUpdateInputSchema\n   */\n  country?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum CustomerStatusEnum {\n  Active = \"active\",\n  Suspended = \"suspended\",\n  Stopped = \"stopped\",\n  Terminated = \"terminated\",\n}\n\n/**\n *\n * @export\n * @interface FollowUpCreateSchema\n */\nexport interface FollowUpCreateSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof FollowUpCreateSchema\n   */\n  content: string;\n  /**\n   *\n   * @type {number}\n   * @memberof FollowUpCreateSchema\n   */\n  itemsId: number;\n  /**\n   *\n   * @type {Array<number>}\n   * @memberof FollowUpCreateSchema\n   */\n  attachmentIds?: Array<number>;\n}\n/**\n *\n * @export\n * @interface HTTPValidationError\n */\nexport interface HTTPValidationError {\n  /**\n   *\n   * @type {Array<ValidationError>}\n   * @memberof HTTPValidationError\n   */\n  detail?: Array<ValidationError>;\n}\n/**\n *\n * @export\n * @interface IaasSpecificationSchema\n */\nexport interface IaasSpecificationSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof IaasSpecificationSchema\n   */\n  cpu: number;\n  /**\n   *\n   * @type {number}\n   * @memberof IaasSpecificationSchema\n   */\n  ram: number;\n  /**\n   *\n   * @type {number}\n   * @memberof IaasSpecificationSchema\n   */\n  ramInMB: number;\n  /**\n   *\n   * @type {number}\n   * @memberof IaasSpecificationSchema\n   */\n  storage: number;\n  /**\n   *\n   * @type {number}\n   * @memberof IaasSpecificationSchema\n   */\n  bandwidthInTB: number;\n}\n/**\n *\n * @export\n * @interface InitSessionOutputSchema\n */\nexport interface InitSessionOutputSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof InitSessionOutputSchema\n   */\n  gtoken: string;\n}\n/**\n *\n * @export\n * @interface InstanceCreateSchema\n */\nexport interface InstanceCreateSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  planId: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  customerId?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  hostname: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  label?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  osId: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  region: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceCreateSchema\n   */\n  tag?: string;\n  /**\n   *\n   * @type {Array<number>}\n   * @memberof InstanceCreateSchema\n   */\n  sshKeyIds?: Array<number>;\n}\n/**\n *\n * @export\n * @interface InstanceDetailSchema\n */\nexport interface InstanceDetailSchema {\n  /**\n   * The size of the disk in GB.\n   * @type {number}\n   * @memberof InstanceDetailSchema\n   */\n  disk: number;\n  /**\n   * Host Name\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  hostname: string;\n  /**\n   * A unique ID for the VPS Instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  id: string;\n  /**\n   * Creation timestamp\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  insertedAt?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  osId: string;\n  /**\n   *\n   * @type {OsSchema}\n   * @memberof InstanceDetailSchema\n   */\n  os?: OsSchema;\n  /**\n   * The amount of RAM in MB.\n   * @type {number}\n   * @memberof InstanceDetailSchema\n   */\n  ram: number;\n  /**\n   * The region where the Instance is located.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  region: string;\n  /**\n   * Update timestamp\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  updatedAt?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  userId: string;\n  /**\n   * Number of vCPUs.\n   * @type {number}\n   * @memberof InstanceDetailSchema\n   */\n  vcpuCount: number;\n  /**\n   * The current status.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  status?: string;\n  /**\n   * The main IPv4 address.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  mainIp?: string;\n  /**\n   * A unique ID for the VPS Plan\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  planId?: string;\n  /**\n   * The time when cloud-init initialization finished.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  initializedAt?: string;\n  /**\n   * The admin note on this instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  adminNote?: string;\n  /**\n   * The admin suspend note.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  adminSuspendNote?: string;\n  /**\n   * HTTPS link to the Zyrrus noVNC Web Console.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  vnc?: string;\n  /**\n   * The user-supplied tag for this instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  tag?: string;\n  /**\n   * Monthly bandwidth quota in GB.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  allowedBandwidth?: string;\n  /**\n   * The main MAC address.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  mainMac?: string;\n  /**\n   * The IPv4 netmask in dot-decimal notation.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  netmaskV4?: string;\n  /**\n   * The user-supplied label for this instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  label?: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof InstanceDetailSchema\n   */\n  sshKeys?: Array<string>;\n  /**\n   * The time when billing suspended the instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  suspendByBillingAt?: string;\n  /**\n   * The billing suspend note.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  billingSuspendNote?: string;\n  /**\n   * The time when admin suspended the instance.\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  suspendByAdminAt?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  networkStatus?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  powerStatus?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  hostNode?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  vncStatus?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  defaultPassword?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceDetailSchema\n   */\n  gatewayV4?: string;\n}\n/**\n *\n * @export\n * @interface InstanceListSchema\n */\nexport interface InstanceListSchema {\n  /**\n   *\n   * @type {Array<InstanceSchema>}\n   * @memberof InstanceListSchema\n   */\n  instances: Array<InstanceSchema>;\n}\n/**\n *\n * @export\n * @interface InstanceSchema\n */\nexport interface InstanceSchema {\n  /**\n   * The size of the disk in GB.\n   * @type {number}\n   * @memberof InstanceSchema\n   */\n  disk: number;\n  /**\n   * Host Name\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  hostname: string;\n  /**\n   * A unique ID for the VPS Instance.\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  id: string;\n  /**\n   * Creation timestamp\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  insertedAt?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  osId: string;\n  /**\n   *\n   * @type {OsSchema}\n   * @memberof InstanceSchema\n   */\n  os?: OsSchema;\n  /**\n   * The amount of RAM in MB.\n   * @type {number}\n   * @memberof InstanceSchema\n   */\n  ram: number;\n  /**\n   * The region where the Instance is located.\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  region: string;\n  /**\n   * Update timestamp\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  updatedAt?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  userId: string;\n  /**\n   * Number of vCPUs.\n   * @type {number}\n   * @memberof InstanceSchema\n   */\n  vcpuCount: number;\n  /**\n   * The current status.\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  status?: string;\n  /**\n   * The main IPv4 address.\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  mainIp?: string;\n  /**\n   * A unique ID for the VPS Plan\n   * @type {string}\n   * @memberof InstanceSchema\n   */\n  planId?: string;\n}\n/**\n *\n * @export\n * @interface InstanceSuspendInputSchema\n */\nexport interface InstanceSuspendInputSchema {\n  /**\n   * Suspend instance or active instance.\n   * @type {ToggleInstanceSuspensionEnum}\n   * @memberof InstanceSuspendInputSchema\n   */\n  instance?: ToggleInstanceSuspensionEnum;\n  /**\n   * Suspend network or active network.\n   * @type {ToggleInstanceSuspensionEnum}\n   * @memberof InstanceSuspendInputSchema\n   */\n  network?: ToggleInstanceSuspensionEnum;\n  /**\n   * The note for suspension.\n   * @type {string}\n   * @memberof InstanceSuspendInputSchema\n   */\n  note?: string;\n}\n/**\n *\n * @export\n * @interface InstanceSuspendOutputSchema\n */\nexport interface InstanceSuspendOutputSchema {\n  /**\n   * \\\"suspended\\\" or \\\"active\\\".\n   * @type {string}\n   * @memberof InstanceSuspendOutputSchema\n   */\n  instanceStatus?: string;\n  /**\n   * \\\"suspended\\\" or \\\"active\\\".\n   * @type {string}\n   * @memberof InstanceSuspendOutputSchema\n   */\n  networkStatus?: string;\n}\n/**\n *\n * @export\n * @interface InstanceUpdateSchema\n */\nexport interface InstanceUpdateSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  customerId?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  planId?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  hostname?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  label?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  osId?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  region?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof InstanceUpdateSchema\n   */\n  reinstallOs?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof InstanceUpdateSchema\n   */\n  tag?: string;\n}\n/**\n *\n * @export\n * @interface InstructionsHasBeenSent\n */\nexport interface InstructionsHasBeenSent {\n  /**\n   *\n   * @type {string}\n   * @memberof InstructionsHasBeenSent\n   */\n  detail?: string;\n}\n/**\n *\n * @export\n * @interface InvoiceDetailSchema\n */\nexport interface InvoiceDetailSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceDetailSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceDetailSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceDetailSchema\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceDetailSchema\n   */\n  startTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceDetailSchema\n   */\n  endTimestamp?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceDetailSchema\n   */\n  email?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceDetailSchema\n   */\n  amount?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceDetailSchema\n   */\n  roundedAmount?: number;\n  /**\n   *\n   * @type {InvoiceStatusEnum}\n   * @memberof InvoiceDetailSchema\n   */\n  status?: InvoiceStatusEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceDetailSchema\n   */\n  interval?: string;\n  /**\n   *\n   * @type {Array<InvoiceItemSchema>}\n   * @memberof InvoiceDetailSchema\n   */\n  invoiceItems?: Array<InvoiceItemSchema>;\n}\n/**\n *\n * @export\n * @interface InvoiceItemSchema\n */\nexport interface InvoiceItemSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  id?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  invoiceId?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  resourceId?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  startTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  usage?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  costPerUnit?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  subtotal?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceItemSchema\n   */\n  roundedSubtotal?: number;\n  /**\n   *\n   * @type {boolean}\n   * @memberof InvoiceItemSchema\n   */\n  closed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceItemSchema\n   */\n  description?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceItemSchema\n   */\n  subDescription?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceItemSchema\n   */\n  type?: string;\n  /**\n   *\n   * @type {ResourceSchema}\n   * @memberof InvoiceItemSchema\n   */\n  resource?: ResourceSchema;\n}\n/**\n *\n * @export\n * @interface InvoiceListResponseSchema\n */\nexport interface InvoiceListResponseSchema {\n  /**\n   *\n   * @type {Array<InvoiceSchema>}\n   * @memberof InvoiceListResponseSchema\n   */\n  invoices?: Array<InvoiceSchema>;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceListResponseSchema\n   */\n  totalPages?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceListResponseSchema\n   */\n  totalCount?: number;\n}\n/**\n *\n * @export\n * @interface InvoiceSchema\n */\nexport interface InvoiceSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceSchema\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceSchema\n   */\n  startTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceSchema\n   */\n  endTimestamp?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceSchema\n   */\n  email?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceSchema\n   */\n  amount?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof InvoiceSchema\n   */\n  roundedAmount?: number;\n  /**\n   *\n   * @type {InvoiceStatusEnum}\n   * @memberof InvoiceSchema\n   */\n  status?: InvoiceStatusEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof InvoiceSchema\n   */\n  interval?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum InvoiceStatusEnum {\n  Open = \"open\",\n  Closed = \"closed\",\n}\n\n/**\n *\n * @export\n * @interface LoginOutputSchema\n */\nexport interface LoginOutputSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof LoginOutputSchema\n   */\n  accessToken: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LoginOutputSchema\n   */\n  refreshToken: string;\n}\n/**\n *\n * @export\n * @interface OsListSchema\n */\nexport interface OsListSchema {\n  /**\n   *\n   * @type {Array<OsSchema>}\n   * @memberof OsListSchema\n   */\n  os?: Array<OsSchema>;\n}\n/**\n *\n * @export\n * @interface OsSchema\n */\nexport interface OsSchema {\n  /**\n   * The Operating System id.\n   * @type {string}\n   * @memberof OsSchema\n   */\n  id?: string;\n  /**\n   * The Operating System architecture.\n   * @type {string}\n   * @memberof OsSchema\n   */\n  arch?: string;\n  /**\n   * The Operating System family.\n   * @type {string}\n   * @memberof OsSchema\n   */\n  family?: string;\n  /**\n   * The Operating System description.\n   * @type {string}\n   * @memberof OsSchema\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface PaymentDetailSchema\n */\nexport interface PaymentDetailSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentDetailSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentDetailSchema\n   */\n  timestamp: number;\n  /**\n   *\n   * @type {Date}\n   * @memberof PaymentDetailSchema\n   */\n  date: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentDetailSchema\n   */\n  price: number;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  paymentGateway: string;\n  /**\n   *\n   * @type {PaymentStatusEnum}\n   * @memberof PaymentDetailSchema\n   */\n  status: PaymentStatusEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  description?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentDetailSchema\n   */\n  additionalData?: string;\n}\n/**\n *\n * @export\n * @interface PaymentListResponseSchema\n */\nexport interface PaymentListResponseSchema {\n  /**\n   *\n   * @type {Array<PaymentSchema>}\n   * @memberof PaymentListResponseSchema\n   */\n  payments: Array<PaymentSchema>;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentListResponseSchema\n   */\n  totalPages: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentListResponseSchema\n   */\n  totalCount: number;\n}\n/**\n *\n * @export\n * @interface PaymentSchema\n */\nexport interface PaymentSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentSchema\n   */\n  timestamp: number;\n  /**\n   *\n   * @type {Date}\n   * @memberof PaymentSchema\n   */\n  date: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentSchema\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentSchema\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PaymentSchema\n   */\n  price: number;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentSchema\n   */\n  paymentGateway: string;\n  /**\n   *\n   * @type {PaymentStatusEnum}\n   * @memberof PaymentSchema\n   */\n  status: PaymentStatusEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof PaymentSchema\n   */\n  description?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum PaymentStatusEnum {\n  New = \"new\",\n  Pending = \"pending\",\n  Accepted = \"accepted\",\n  Rejected = \"rejected\",\n}\n\n/**\n *\n * @export\n * @interface PlanListSchema\n */\nexport interface PlanListSchema {\n  /**\n   *\n   * @type {Array<PlanSchema>}\n   * @memberof PlanListSchema\n   */\n  plans?: Array<PlanSchema>;\n}\n/**\n *\n * @export\n * @interface PlanSchema\n */\nexport interface PlanSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanSchema\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanSchema\n   */\n  title: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanSchema\n   */\n  regionId?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanSchema\n   */\n  type?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanSchema\n   */\n  hourlyPrice: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanSchema\n   */\n  monthlyPrice: number;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanSchema\n   */\n  logoURL: string;\n  /**\n   *\n   * @type {IaasSpecificationSchema}\n   * @memberof PlanSchema\n   */\n  specification: IaasSpecificationSchema;\n}\n/**\n *\n * @export\n * @interface ResourceSchema\n */\nexport interface ResourceSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceSchema\n   */\n  id?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  tag?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  group?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  title?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceSchema\n   */\n  startTimestamp?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceSchema\n   */\n  endTimestamp?: number;\n  /**\n   *\n   * @type {Date}\n   * @memberof ResourceSchema\n   */\n  startDate?: Date;\n  /**\n   *\n   * @type {Date}\n   * @memberof ResourceSchema\n   */\n  endDate?: Date;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  customerId?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceSchema\n   */\n  costPerUnit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  externalId?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceSchema\n   */\n  autoTermination?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceSchema\n   */\n  stopReason?: string;\n}\n/**\n *\n * @export\n * @interface SSHKeyReadSchema\n */\nexport interface SSHKeyReadSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyReadSchema\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyReadSchema\n   */\n  publicKey: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyReadSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SSHKeyReadSchema\n   */\n  id: number;\n}\n/**\n *\n * @export\n * @interface SSHKeyWriteSchema\n */\nexport interface SSHKeyWriteSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyWriteSchema\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyWriteSchema\n   */\n  publicKey: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SSHKeyWriteSchema\n   */\n  customerId?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum SortTypeEnum {\n  DESC = \"DESC\",\n  ASC = \"ASC\",\n}\n\n/**\n *\n * @export\n * @interface TicketCreateSchema\n */\nexport interface TicketCreateSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof TicketCreateSchema\n   */\n  name: string;\n  /**\n   *\n   * @type {number}\n   * @memberof TicketCreateSchema\n   */\n  itilcategoriesId: number;\n  /**\n   * 1: very low <br>2: low <br>3: medium <br>4: high <br>5: very high <br>\n   * @type {TicketUrgencyEnum}\n   * @memberof TicketCreateSchema\n   */\n  urgency?: TicketUrgencyEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TicketCreateSchema\n   */\n  content: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TicketCreateSchema\n   */\n  vmId?: string;\n  /**\n   *\n   * @type {Array<number>}\n   * @memberof TicketCreateSchema\n   */\n  attachmentIds?: Array<number>;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum TicketUrgencyEnum {\n  NUMBER_1 = 1,\n  NUMBER_2 = 2,\n  NUMBER_3 = 3,\n  NUMBER_4 = 4,\n  NUMBER_5 = 5,\n}\n\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum ToggleInstanceSuspensionEnum {\n  Active = \"active\",\n  Suspend = \"suspend\",\n}\n\n/**\n *\n * @export\n * @interface TransactionListResponseSchema\n */\nexport interface TransactionListResponseSchema {\n  /**\n   *\n   * @type {Array<TransactionSchema>}\n   * @memberof TransactionListResponseSchema\n   */\n  transactions?: Array<TransactionSchema>;\n  /**\n   *\n   * @type {number}\n   * @memberof TransactionListResponseSchema\n   */\n  totalPages: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TransactionListResponseSchema\n   */\n  totalCount: number;\n}\n/**\n *\n * @export\n * @interface TransactionSchema\n */\nexport interface TransactionSchema {\n  /**\n   *\n   * @type {number}\n   * @memberof TransactionSchema\n   */\n  id: number;\n  /**\n   *\n   * @type {TransactionTypeEnum}\n   * @memberof TransactionSchema\n   */\n  type: TransactionTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TransactionSchema\n   */\n  customerId: string;\n  /**\n   *\n   * @type {number}\n   * @memberof TransactionSchema\n   */\n  timestamp: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TransactionSchema\n   */\n  value: number;\n  /**\n   *\n   * @type {string}\n   * @memberof TransactionSchema\n   */\n  description?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum TransactionTypeEnum {\n  Invoice = \"invoice\",\n  Payment = \"payment\",\n}\n\n/**\n *\n * @export\n * @interface UpdateCurrentUserProfile\n */\nexport interface UpdateCurrentUserProfile {\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCurrentUserProfile\n   */\n  fullname?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCurrentUserProfile\n   */\n  phoneNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCurrentUserProfile\n   */\n  region?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCurrentUserProfile\n   */\n  city?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCurrentUserProfile\n   */\n  country?: string;\n}\n/**\n *\n * @export\n * @interface UseCouponAsPaymentResponseSchema\n */\nexport interface UseCouponAsPaymentResponseSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof UseCouponAsPaymentResponseSchema\n   */\n  detail: string;\n  /**\n   *\n   * @type {CouponAmountSchema}\n   * @memberof UseCouponAsPaymentResponseSchema\n   */\n  data: CouponAmountSchema;\n}\n/**\n *\n * @export\n * @interface UserRegistrationSchema\n */\nexport interface UserRegistrationSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof UserRegistrationSchema\n   */\n  fullname: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRegistrationSchema\n   */\n  password: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRegistrationSchema\n   */\n  email: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRegistrationSchema\n   */\n  phoneNumber?: string;\n}\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport enum UserStatusEnum {\n  Verified = \"verified\",\n  Unverified = \"unverified\",\n  Suspended = \"suspended\",\n}\n\n/**\n *\n * @export\n * @interface ValidationError\n */\nexport interface ValidationError {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ValidationError\n   */\n  loc: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ValidationError\n   */\n  msg: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ValidationError\n   */\n  type: string;\n}\n\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Admin Login\n     * @param {BodyAdminLoginAuthAdminLoginPost} bodyAdminLoginAuthAdminLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adminLoginAuthAdminLoginPost(\n      bodyAdminLoginAuthAdminLoginPost: BodyAdminLoginAuthAdminLoginPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'bodyAdminLoginAuthAdminLoginPost' is not null or undefined\n      if (\n        bodyAdminLoginAuthAdminLoginPost === null ||\n        bodyAdminLoginAuthAdminLoginPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyAdminLoginAuthAdminLoginPost\",\n          \"Required parameter bodyAdminLoginAuthAdminLoginPost was null or undefined when calling adminLoginAuthAdminLoginPost.\"\n        );\n      }\n      const localVarPath = `/auth/admin-login`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyAdminLoginAuthAdminLoginPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyAdminLoginAuthAdminLoginPost !== undefined\n              ? bodyAdminLoginAuthAdminLoginPost\n              : {}\n          )\n        : bodyAdminLoginAuthAdminLoginPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Change Email\n     * @param {string} xToken\n     * @param {BodyChangeEmailAuthChangeEmailPut} bodyChangeEmailAuthChangeEmailPut\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailAuthChangeEmailPut(\n      xToken: string,\n      bodyChangeEmailAuthChangeEmailPut: BodyChangeEmailAuthChangeEmailPut,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling changeEmailAuthChangeEmailPut.\"\n        );\n      }\n      // verify required parameter 'bodyChangeEmailAuthChangeEmailPut' is not null or undefined\n      if (\n        bodyChangeEmailAuthChangeEmailPut === null ||\n        bodyChangeEmailAuthChangeEmailPut === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyChangeEmailAuthChangeEmailPut\",\n          \"Required parameter bodyChangeEmailAuthChangeEmailPut was null or undefined when calling changeEmailAuthChangeEmailPut.\"\n        );\n      }\n      const localVarPath = `/auth/change-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"PUT\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyChangeEmailAuthChangeEmailPut !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyChangeEmailAuthChangeEmailPut !== undefined\n              ? bodyChangeEmailAuthChangeEmailPut\n              : {}\n          )\n        : bodyChangeEmailAuthChangeEmailPut || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    User changes her/his own password by providing credentials or tokens.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Password\n     * @param {string} xToken\n     * @param {BodyChangePasswordAuthChangePasswordPost} bodyChangePasswordAuthChangePasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordAuthChangePasswordPost(\n      xToken: string,\n      bodyChangePasswordAuthChangePasswordPost: BodyChangePasswordAuthChangePasswordPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling changePasswordAuthChangePasswordPost.\"\n        );\n      }\n      // verify required parameter 'bodyChangePasswordAuthChangePasswordPost' is not null or undefined\n      if (\n        bodyChangePasswordAuthChangePasswordPost === null ||\n        bodyChangePasswordAuthChangePasswordPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyChangePasswordAuthChangePasswordPost\",\n          \"Required parameter bodyChangePasswordAuthChangePasswordPost was null or undefined when calling changePasswordAuthChangePasswordPost.\"\n        );\n      }\n      const localVarPath = `/auth/change-password`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyChangePasswordAuthChangePasswordPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyChangePasswordAuthChangePasswordPost !== undefined\n              ? bodyChangePasswordAuthChangePasswordPost\n              : {}\n          )\n        : bodyChangePasswordAuthChangePasswordPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint will get called when user clicks on reset password token. From here user will be redirected to frontend.  Frontend should serve ``{base_front_url}/resetpassword`` route for this purpose. Based on validation result redirection URL will contain following query parameters: - Valid token: **token={token}&status=Valid** - Invalid token: **token={token}&status=Invalid** - Expired token: **token={token}&status=Expired&email={urlencoded-email}**  **URL encoded email example**: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Check Reset Password Token\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkResetPasswordTokenAuthCheckResetPasswordTokenGet(\n      token: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'token' is not null or undefined\n      if (token === null || token === undefined) {\n        throw new RequiredError(\n          \"token\",\n          \"Required parameter token was null or undefined when calling checkResetPasswordTokenAuthCheckResetPasswordTokenGet.\"\n        );\n      }\n      const localVarPath = `/auth/check-reset-password-token`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter[\"token\"] = token;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a token and sets email verification flag as True  Note: The token can be used only once, if the procedure failed then user should request for a new token.  At the end redirects to frontend.  At the front side two path should handle the redirection. - For success: **{base_front_url}/verificationsuccess** - For failure: **{base_front_url}/verificationfailure**  ``Note:`` In failure case if token was expired, user email will be passed in the querystrings. **{base_front_url}/verificationfailure?email=urlencoded_email**.  ``URL encoded email example``: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Confirm Email\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmEmailAuthConfirmEmailGet(\n      token: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'token' is not null or undefined\n      if (token === null || token === undefined) {\n        throw new RequiredError(\n          \"token\",\n          \"Required parameter token was null or undefined when calling confirmEmailAuthConfirmEmailGet.\"\n        );\n      }\n      const localVarPath = `/auth/confirm-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter[\"token\"] = token;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Provide the token sent to the user\\'s email and a new password, if the token is valid one password will be changed.\n     * @summary Confirm Reset Password\n     * @param {string} token\n     * @param {BodyConfirmResetPasswordAuthConfirmResetPasswordPost} bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmResetPasswordAuthConfirmResetPasswordPost(\n      token: string,\n      bodyConfirmResetPasswordAuthConfirmResetPasswordPost: BodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'token' is not null or undefined\n      if (token === null || token === undefined) {\n        throw new RequiredError(\n          \"token\",\n          \"Required parameter token was null or undefined when calling confirmResetPasswordAuthConfirmResetPasswordPost.\"\n        );\n      }\n      // verify required parameter 'bodyConfirmResetPasswordAuthConfirmResetPasswordPost' is not null or undefined\n      if (\n        bodyConfirmResetPasswordAuthConfirmResetPasswordPost === null ||\n        bodyConfirmResetPasswordAuthConfirmResetPasswordPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyConfirmResetPasswordAuthConfirmResetPasswordPost\",\n          \"Required parameter bodyConfirmResetPasswordAuthConfirmResetPasswordPost was null or undefined when calling confirmResetPasswordAuthConfirmResetPasswordPost.\"\n        );\n      }\n      const localVarPath = `/auth/confirm-reset-password`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter[\"token\"] = token;\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyConfirmResetPasswordAuthConfirmResetPasswordPost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyConfirmResetPasswordAuthConfirmResetPasswordPost !== undefined\n              ? bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n              : {}\n          )\n        : bodyConfirmResetPasswordAuthConfirmResetPasswordPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Customer Login\n     * @param {BodyCustomerLoginAuthCustomerLoginPost} bodyCustomerLoginAuthCustomerLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerLoginAuthCustomerLoginPost(\n      bodyCustomerLoginAuthCustomerLoginPost: BodyCustomerLoginAuthCustomerLoginPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'bodyCustomerLoginAuthCustomerLoginPost' is not null or undefined\n      if (\n        bodyCustomerLoginAuthCustomerLoginPost === null ||\n        bodyCustomerLoginAuthCustomerLoginPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyCustomerLoginAuthCustomerLoginPost\",\n          \"Required parameter bodyCustomerLoginAuthCustomerLoginPost was null or undefined when calling customerLoginAuthCustomerLoginPost.\"\n        );\n      }\n      const localVarPath = `/auth/customer-login`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyCustomerLoginAuthCustomerLoginPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyCustomerLoginAuthCustomerLoginPost !== undefined\n              ? bodyCustomerLoginAuthCustomerLoginPost\n              : {}\n          )\n        : bodyCustomerLoginAuthCustomerLoginPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Forgot Password\n     * @param {BodyForgotPasswordAuthForgotPasswordPost} bodyForgotPasswordAuthForgotPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordAuthForgotPasswordPost(\n      bodyForgotPasswordAuthForgotPasswordPost: BodyForgotPasswordAuthForgotPasswordPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'bodyForgotPasswordAuthForgotPasswordPost' is not null or undefined\n      if (\n        bodyForgotPasswordAuthForgotPasswordPost === null ||\n        bodyForgotPasswordAuthForgotPasswordPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyForgotPasswordAuthForgotPasswordPost\",\n          \"Required parameter bodyForgotPasswordAuthForgotPasswordPost was null or undefined when calling forgotPasswordAuthForgotPasswordPost.\"\n        );\n      }\n      const localVarPath = `/auth/forgot-password`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyForgotPasswordAuthForgotPasswordPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyForgotPasswordAuthForgotPasswordPost !== undefined\n              ? bodyForgotPasswordAuthForgotPasswordPost\n              : {}\n          )\n        : bodyForgotPasswordAuthForgotPasswordPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Use profile/user-info instead.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoAuthUserInfoGet(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getCurrentUserInfoAuthUserInfoGet.\"\n        );\n      }\n      const localVarPath = `/auth/user-info`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Provide your refresh token at header to gain a new pair of access and refresh tokens.   This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Refresh Token\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    refreshTokenAuthRefreshTokenPost(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling refreshTokenAuthRefreshTokenPost.\"\n        );\n      }\n      const localVarPath = `/auth/refresh-token`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Register User\n     * @param {UserRegistrationSchema} userRegistrationSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    registerUserAuthPost(\n      userRegistrationSchema: UserRegistrationSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'userRegistrationSchema' is not null or undefined\n      if (\n        userRegistrationSchema === null ||\n        userRegistrationSchema === undefined\n      ) {\n        throw new RequiredError(\n          \"userRegistrationSchema\",\n          \"Required parameter userRegistrationSchema was null or undefined when calling registerUserAuthPost.\"\n        );\n      }\n      const localVarPath = `/auth`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof userRegistrationSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            userRegistrationSchema !== undefined ? userRegistrationSchema : {}\n          )\n        : userRegistrationSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Remove Unverified Email\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailAuthUnverifiedEmailDelete(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling removeUnverifiedEmailAuthUnverifiedEmailDelete.\"\n        );\n      }\n      const localVarPath = `/auth/unverified-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Resend Email Verification Token\n     * @param {BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost} bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n      bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost: BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost' is not null or undefined\n      if (\n        bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost ===\n          null ||\n        bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost ===\n          undefined\n      ) {\n        throw new RequiredError(\n          \"bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\",\n          \"Required parameter bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost was null or undefined when calling resendEmailVerificationTokenAuthResendEmailVerificationTokenPost.\"\n        );\n      }\n      const localVarPath = `/auth/resend-email-verification-token`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost !==\n              undefined\n              ? bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n              : {}\n          )\n        : bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost ||\n          \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Profile\n     * @param {string} xToken\n     * @param {UpdateCurrentUserProfile} [updateCurrentUserProfile]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProfileAuthUpdateProfilePut(\n      xToken: string,\n      updateCurrentUserProfile?: UpdateCurrentUserProfile,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling updateProfileAuthUpdateProfilePut.\"\n        );\n      }\n      const localVarPath = `/auth/update-profile`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"PUT\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof updateCurrentUserProfile !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            updateCurrentUserProfile !== undefined\n              ? updateCurrentUserProfile\n              : {}\n          )\n        : updateCurrentUserProfile || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Admin Login\n     * @param {BodyAdminLoginAuthAdminLoginPost} bodyAdminLoginAuthAdminLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adminLoginAuthAdminLoginPost(\n      bodyAdminLoginAuthAdminLoginPost: BodyAdminLoginAuthAdminLoginPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<LoginOutputSchema> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).adminLoginAuthAdminLoginPost(bodyAdminLoginAuthAdminLoginPost, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Change Email\n     * @param {string} xToken\n     * @param {BodyChangeEmailAuthChangeEmailPut} bodyChangeEmailAuthChangeEmailPut\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailAuthChangeEmailPut(\n      xToken: string,\n      bodyChangeEmailAuthChangeEmailPut: BodyChangeEmailAuthChangeEmailPut,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).changeEmailAuthChangeEmailPut(\n        xToken,\n        bodyChangeEmailAuthChangeEmailPut,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    User changes her/his own password by providing credentials or tokens.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Password\n     * @param {string} xToken\n     * @param {BodyChangePasswordAuthChangePasswordPost} bodyChangePasswordAuthChangePasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordAuthChangePasswordPost(\n      xToken: string,\n      bodyChangePasswordAuthChangePasswordPost: BodyChangePasswordAuthChangePasswordPost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).changePasswordAuthChangePasswordPost(\n        xToken,\n        bodyChangePasswordAuthChangePasswordPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint will get called when user clicks on reset password token. From here user will be redirected to frontend.  Frontend should serve ``{base_front_url}/resetpassword`` route for this purpose. Based on validation result redirection URL will contain following query parameters: - Valid token: **token={token}&status=Valid** - Invalid token: **token={token}&status=Invalid** - Expired token: **token={token}&status=Expired&email={urlencoded-email}**  **URL encoded email example**: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Check Reset Password Token\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkResetPasswordTokenAuthCheckResetPasswordTokenGet(\n      token: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).checkResetPasswordTokenAuthCheckResetPasswordTokenGet(token, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Gets a token and sets email verification flag as True  Note: The token can be used only once, if the procedure failed then user should request for a new token.  At the end redirects to frontend.  At the front side two path should handle the redirection. - For success: **{base_front_url}/verificationsuccess** - For failure: **{base_front_url}/verificationfailure**  ``Note:`` In failure case if token was expired, user email will be passed in the querystrings. **{base_front_url}/verificationfailure?email=urlencoded_email**.  ``URL encoded email example``: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Confirm Email\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmEmailAuthConfirmEmailGet(\n      token: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).confirmEmailAuthConfirmEmailGet(token, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Provide the token sent to the user\\'s email and a new password, if the token is valid one password will be changed.\n     * @summary Confirm Reset Password\n     * @param {string} token\n     * @param {BodyConfirmResetPasswordAuthConfirmResetPasswordPost} bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmResetPasswordAuthConfirmResetPasswordPost(\n      token: string,\n      bodyConfirmResetPasswordAuthConfirmResetPasswordPost: BodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).confirmResetPasswordAuthConfirmResetPasswordPost(\n        token,\n        bodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Customer Login\n     * @param {BodyCustomerLoginAuthCustomerLoginPost} bodyCustomerLoginAuthCustomerLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerLoginAuthCustomerLoginPost(\n      bodyCustomerLoginAuthCustomerLoginPost: BodyCustomerLoginAuthCustomerLoginPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<LoginOutputSchema> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).customerLoginAuthCustomerLoginPost(\n        bodyCustomerLoginAuthCustomerLoginPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Forgot Password\n     * @param {BodyForgotPasswordAuthForgotPasswordPost} bodyForgotPasswordAuthForgotPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordAuthForgotPasswordPost(\n      bodyForgotPasswordAuthForgotPasswordPost: BodyForgotPasswordAuthForgotPasswordPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstructionsHasBeenSent> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).forgotPasswordAuthForgotPasswordPost(\n        bodyForgotPasswordAuthForgotPasswordPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Use profile/user-info instead.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoAuthUserInfoGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CurrentUserInfoSchema> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).getCurrentUserInfoAuthUserInfoGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Provide your refresh token at header to gain a new pair of access and refresh tokens.   This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Refresh Token\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    refreshTokenAuthRefreshTokenPost(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<LoginOutputSchema> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).refreshTokenAuthRefreshTokenPost(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Register User\n     * @param {UserRegistrationSchema} userRegistrationSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    registerUserAuthPost(\n      userRegistrationSchema: UserRegistrationSchema,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).registerUserAuthPost(userRegistrationSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Remove Unverified Email\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailAuthUnverifiedEmailDelete(\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).removeUnverifiedEmailAuthUnverifiedEmailDelete(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Resend Email Verification Token\n     * @param {BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost} bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n      bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost: BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstructionsHasBeenSent> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n        bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Profile\n     * @param {string} xToken\n     * @param {UpdateCurrentUserProfile} [updateCurrentUserProfile]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProfileAuthUpdateProfilePut(\n      xToken: string,\n      updateCurrentUserProfile?: UpdateCurrentUserProfile,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = AuthApiAxiosParamCreator(\n        configuration\n      ).updateProfileAuthUpdateProfilePut(\n        xToken,\n        updateCurrentUserProfile,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Admin Login\n     * @param {BodyAdminLoginAuthAdminLoginPost} bodyAdminLoginAuthAdminLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adminLoginAuthAdminLoginPost(\n      bodyAdminLoginAuthAdminLoginPost: BodyAdminLoginAuthAdminLoginPost,\n      options?: any\n    ): AxiosPromise<LoginOutputSchema> {\n      return AuthApiFp(configuration).adminLoginAuthAdminLoginPost(\n        bodyAdminLoginAuthAdminLoginPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *\n     * @summary Change Email\n     * @param {string} xToken\n     * @param {BodyChangeEmailAuthChangeEmailPut} bodyChangeEmailAuthChangeEmailPut\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailAuthChangeEmailPut(\n      xToken: string,\n      bodyChangeEmailAuthChangeEmailPut: BodyChangeEmailAuthChangeEmailPut,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(configuration).changeEmailAuthChangeEmailPut(\n        xToken,\n        bodyChangeEmailAuthChangeEmailPut,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    User changes her/his own password by providing credentials or tokens.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Password\n     * @param {string} xToken\n     * @param {BodyChangePasswordAuthChangePasswordPost} bodyChangePasswordAuthChangePasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordAuthChangePasswordPost(\n      xToken: string,\n      bodyChangePasswordAuthChangePasswordPost: BodyChangePasswordAuthChangePasswordPost,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(configuration).changePasswordAuthChangePasswordPost(\n        xToken,\n        bodyChangePasswordAuthChangePasswordPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint will get called when user clicks on reset password token. From here user will be redirected to frontend.  Frontend should serve ``{base_front_url}/resetpassword`` route for this purpose. Based on validation result redirection URL will contain following query parameters: - Valid token: **token={token}&status=Valid** - Invalid token: **token={token}&status=Invalid** - Expired token: **token={token}&status=Expired&email={urlencoded-email}**  **URL encoded email example**: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Check Reset Password Token\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkResetPasswordTokenAuthCheckResetPasswordTokenGet(\n      token: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(\n        configuration\n      ).checkResetPasswordTokenAuthCheckResetPasswordTokenGet(token, options)(\n        axios,\n        basePath\n      );\n    },\n    /**\n     * Gets a token and sets email verification flag as True  Note: The token can be used only once, if the procedure failed then user should request for a new token.  At the end redirects to frontend.  At the front side two path should handle the redirection. - For success: **{base_front_url}/verificationsuccess** - For failure: **{base_front_url}/verificationfailure**  ``Note:`` In failure case if token was expired, user email will be passed in the querystrings. **{base_front_url}/verificationfailure?email=urlencoded_email**.  ``URL encoded email example``: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n     * @summary Confirm Email\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmEmailAuthConfirmEmailGet(\n      token: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return AuthApiFp(configuration).confirmEmailAuthConfirmEmailGet(\n        token,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * Provide the token sent to the user\\'s email and a new password, if the token is valid one password will be changed.\n     * @summary Confirm Reset Password\n     * @param {string} token\n     * @param {BodyConfirmResetPasswordAuthConfirmResetPasswordPost} bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    confirmResetPasswordAuthConfirmResetPasswordPost(\n      token: string,\n      bodyConfirmResetPasswordAuthConfirmResetPasswordPost: BodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(\n        configuration\n      ).confirmResetPasswordAuthConfirmResetPasswordPost(\n        token,\n        bodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *\n     * @summary Customer Login\n     * @param {BodyCustomerLoginAuthCustomerLoginPost} bodyCustomerLoginAuthCustomerLoginPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerLoginAuthCustomerLoginPost(\n      bodyCustomerLoginAuthCustomerLoginPost: BodyCustomerLoginAuthCustomerLoginPost,\n      options?: any\n    ): AxiosPromise<LoginOutputSchema> {\n      return AuthApiFp(configuration).customerLoginAuthCustomerLoginPost(\n        bodyCustomerLoginAuthCustomerLoginPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *\n     * @summary Forgot Password\n     * @param {BodyForgotPasswordAuthForgotPasswordPost} bodyForgotPasswordAuthForgotPasswordPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordAuthForgotPasswordPost(\n      bodyForgotPasswordAuthForgotPasswordPost: BodyForgotPasswordAuthForgotPasswordPost,\n      options?: any\n    ): AxiosPromise<InstructionsHasBeenSent> {\n      return AuthApiFp(configuration).forgotPasswordAuthForgotPasswordPost(\n        bodyForgotPasswordAuthForgotPasswordPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * Use profile/user-info instead.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoAuthUserInfoGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CurrentUserInfoSchema> {\n      return AuthApiFp(configuration).getCurrentUserInfoAuthUserInfoGet(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * Provide your refresh token at header to gain a new pair of access and refresh tokens.   This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Refresh Token\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    refreshTokenAuthRefreshTokenPost(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<LoginOutputSchema> {\n      return AuthApiFp(configuration).refreshTokenAuthRefreshTokenPost(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *\n     * @summary Register User\n     * @param {UserRegistrationSchema} userRegistrationSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    registerUserAuthPost(\n      userRegistrationSchema: UserRegistrationSchema,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(configuration).registerUserAuthPost(\n        userRegistrationSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *\n     * @summary Remove Unverified Email\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailAuthUnverifiedEmailDelete(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(\n        configuration\n      ).removeUnverifiedEmailAuthUnverifiedEmailDelete(xToken, options)(\n        axios,\n        basePath\n      );\n    },\n    /**\n     *\n     * @summary Resend Email Verification Token\n     * @param {BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost} bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n      bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost: BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n      options?: any\n    ): AxiosPromise<InstructionsHasBeenSent> {\n      return AuthApiFp(\n        configuration\n      ).resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n        bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Profile\n     * @param {string} xToken\n     * @param {UpdateCurrentUserProfile} [updateCurrentUserProfile]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProfileAuthUpdateProfilePut(\n      xToken: string,\n      updateCurrentUserProfile?: UpdateCurrentUserProfile,\n      options?: any\n    ): AxiosPromise<object> {\n      return AuthApiFp(configuration).updateProfileAuthUpdateProfilePut(\n        xToken,\n        updateCurrentUserProfile,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * AuthApi - interface\n * @export\n * @interface AuthApi\n */\nexport interface AuthApiInterface {\n  /**\n   *\n   * @summary Admin Login\n   * @param {BodyAdminLoginAuthAdminLoginPost} bodyAdminLoginAuthAdminLoginPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  adminLoginAuthAdminLoginPost(\n    bodyAdminLoginAuthAdminLoginPost: BodyAdminLoginAuthAdminLoginPost,\n    options?: any\n  ): AxiosPromise<LoginOutputSchema>;\n\n  /**\n   *\n   * @summary Change Email\n   * @param {string} xToken\n   * @param {BodyChangeEmailAuthChangeEmailPut} bodyChangeEmailAuthChangeEmailPut\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  changeEmailAuthChangeEmailPut(\n    xToken: string,\n    bodyChangeEmailAuthChangeEmailPut: BodyChangeEmailAuthChangeEmailPut,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    User changes her/his own password by providing credentials or tokens.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Change Password\n   * @param {string} xToken\n   * @param {BodyChangePasswordAuthChangePasswordPost} bodyChangePasswordAuthChangePasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  changePasswordAuthChangePasswordPost(\n    xToken: string,\n    bodyChangePasswordAuthChangePasswordPost: BodyChangePasswordAuthChangePasswordPost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint will get called when user clicks on reset password token. From here user will be redirected to frontend.  Frontend should serve ``{base_front_url}/resetpassword`` route for this purpose. Based on validation result redirection URL will contain following query parameters: - Valid token: **token={token}&status=Valid** - Invalid token: **token={token}&status=Invalid** - Expired token: **token={token}&status=Expired&email={urlencoded-email}**  **URL encoded email example**: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n   * @summary Check Reset Password Token\n   * @param {string} token\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  checkResetPasswordTokenAuthCheckResetPasswordTokenGet(\n    token: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * Gets a token and sets email verification flag as True  Note: The token can be used only once, if the procedure failed then user should request for a new token.  At the end redirects to frontend.  At the front side two path should handle the redirection. - For success: **{base_front_url}/verificationsuccess** - For failure: **{base_front_url}/verificationfailure**  ``Note:`` In failure case if token was expired, user email will be passed in the querystrings. **{base_front_url}/verificationfailure?email=urlencoded_email**.  ``URL encoded email example``: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n   * @summary Confirm Email\n   * @param {string} token\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  confirmEmailAuthConfirmEmailGet(\n    token: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   * Provide the token sent to the user\\'s email and a new password, if the token is valid one password will be changed.\n   * @summary Confirm Reset Password\n   * @param {string} token\n   * @param {BodyConfirmResetPasswordAuthConfirmResetPasswordPost} bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  confirmResetPasswordAuthConfirmResetPasswordPost(\n    token: string,\n    bodyConfirmResetPasswordAuthConfirmResetPasswordPost: BodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *\n   * @summary Customer Login\n   * @param {BodyCustomerLoginAuthCustomerLoginPost} bodyCustomerLoginAuthCustomerLoginPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  customerLoginAuthCustomerLoginPost(\n    bodyCustomerLoginAuthCustomerLoginPost: BodyCustomerLoginAuthCustomerLoginPost,\n    options?: any\n  ): AxiosPromise<LoginOutputSchema>;\n\n  /**\n   *\n   * @summary Forgot Password\n   * @param {BodyForgotPasswordAuthForgotPasswordPost} bodyForgotPasswordAuthForgotPasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  forgotPasswordAuthForgotPasswordPost(\n    bodyForgotPasswordAuthForgotPasswordPost: BodyForgotPasswordAuthForgotPasswordPost,\n    options?: any\n  ): AxiosPromise<InstructionsHasBeenSent>;\n\n  /**\n   * Use profile/user-info instead.\n   * @summary Get Current User Info\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  getCurrentUserInfoAuthUserInfoGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CurrentUserInfoSchema>;\n\n  /**\n   * Provide your refresh token at header to gain a new pair of access and refresh tokens.   This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Refresh Token\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  refreshTokenAuthRefreshTokenPost(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<LoginOutputSchema>;\n\n  /**\n   *\n   * @summary Register User\n   * @param {UserRegistrationSchema} userRegistrationSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  registerUserAuthPost(\n    userRegistrationSchema: UserRegistrationSchema,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *\n   * @summary Remove Unverified Email\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  removeUnverifiedEmailAuthUnverifiedEmailDelete(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *\n   * @summary Resend Email Verification Token\n   * @param {BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost} bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n    bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost: BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n    options?: any\n  ): AxiosPromise<InstructionsHasBeenSent>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Update Profile\n   * @param {string} xToken\n   * @param {UpdateCurrentUserProfile} [updateCurrentUserProfile]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApiInterface\n   */\n  updateProfileAuthUpdateProfilePut(\n    xToken: string,\n    updateCurrentUserProfile?: UpdateCurrentUserProfile,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI implements AuthApiInterface {\n  /**\n   *\n   * @summary Admin Login\n   * @param {BodyAdminLoginAuthAdminLoginPost} bodyAdminLoginAuthAdminLoginPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public adminLoginAuthAdminLoginPost(\n    bodyAdminLoginAuthAdminLoginPost: BodyAdminLoginAuthAdminLoginPost,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).adminLoginAuthAdminLoginPost(\n      bodyAdminLoginAuthAdminLoginPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Change Email\n   * @param {string} xToken\n   * @param {BodyChangeEmailAuthChangeEmailPut} bodyChangeEmailAuthChangeEmailPut\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public changeEmailAuthChangeEmailPut(\n    xToken: string,\n    bodyChangeEmailAuthChangeEmailPut: BodyChangeEmailAuthChangeEmailPut,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).changeEmailAuthChangeEmailPut(\n      xToken,\n      bodyChangeEmailAuthChangeEmailPut,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    User changes her/his own password by providing credentials or tokens.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Change Password\n   * @param {string} xToken\n   * @param {BodyChangePasswordAuthChangePasswordPost} bodyChangePasswordAuthChangePasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public changePasswordAuthChangePasswordPost(\n    xToken: string,\n    bodyChangePasswordAuthChangePasswordPost: BodyChangePasswordAuthChangePasswordPost,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).changePasswordAuthChangePasswordPost(\n      xToken,\n      bodyChangePasswordAuthChangePasswordPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint will get called when user clicks on reset password token. From here user will be redirected to frontend.  Frontend should serve ``{base_front_url}/resetpassword`` route for this purpose. Based on validation result redirection URL will contain following query parameters: - Valid token: **token={token}&status=Valid** - Invalid token: **token={token}&status=Invalid** - Expired token: **token={token}&status=Expired&email={urlencoded-email}**  **URL encoded email example**: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n   * @summary Check Reset Password Token\n   * @param {string} token\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public checkResetPasswordTokenAuthCheckResetPasswordTokenGet(\n    token: string,\n    options?: any\n  ) {\n    return AuthApiFp(\n      this.configuration\n    ).checkResetPasswordTokenAuthCheckResetPasswordTokenGet(token, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n\n  /**\n   * Gets a token and sets email verification flag as True  Note: The token can be used only once, if the procedure failed then user should request for a new token.  At the end redirects to frontend.  At the front side two path should handle the redirection. - For success: **{base_front_url}/verificationsuccess** - For failure: **{base_front_url}/verificationfailure**  ``Note:`` In failure case if token was expired, user email will be passed in the querystrings. **{base_front_url}/verificationfailure?email=urlencoded_email**.  ``URL encoded email example``: \\\"john_doe+customer@gmail.com\\\" will be converted to \\\"john_doe%2Bcustomer%40gmail.com\\\".\n   * @summary Confirm Email\n   * @param {string} token\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public confirmEmailAuthConfirmEmailGet(token: string, options?: any) {\n    return AuthApiFp(this.configuration).confirmEmailAuthConfirmEmailGet(\n      token,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * Provide the token sent to the user\\'s email and a new password, if the token is valid one password will be changed.\n   * @summary Confirm Reset Password\n   * @param {string} token\n   * @param {BodyConfirmResetPasswordAuthConfirmResetPasswordPost} bodyConfirmResetPasswordAuthConfirmResetPasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public confirmResetPasswordAuthConfirmResetPasswordPost(\n    token: string,\n    bodyConfirmResetPasswordAuthConfirmResetPasswordPost: BodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n    options?: any\n  ) {\n    return AuthApiFp(\n      this.configuration\n    ).confirmResetPasswordAuthConfirmResetPasswordPost(\n      token,\n      bodyConfirmResetPasswordAuthConfirmResetPasswordPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Customer Login\n   * @param {BodyCustomerLoginAuthCustomerLoginPost} bodyCustomerLoginAuthCustomerLoginPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public customerLoginAuthCustomerLoginPost(\n    bodyCustomerLoginAuthCustomerLoginPost: BodyCustomerLoginAuthCustomerLoginPost,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).customerLoginAuthCustomerLoginPost(\n      bodyCustomerLoginAuthCustomerLoginPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Forgot Password\n   * @param {BodyForgotPasswordAuthForgotPasswordPost} bodyForgotPasswordAuthForgotPasswordPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public forgotPasswordAuthForgotPasswordPost(\n    bodyForgotPasswordAuthForgotPasswordPost: BodyForgotPasswordAuthForgotPasswordPost,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).forgotPasswordAuthForgotPasswordPost(\n      bodyForgotPasswordAuthForgotPasswordPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * Use profile/user-info instead.\n   * @summary Get Current User Info\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public getCurrentUserInfoAuthUserInfoGet(xToken: string, options?: any) {\n    return AuthApiFp(this.configuration).getCurrentUserInfoAuthUserInfoGet(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * Provide your refresh token at header to gain a new pair of access and refresh tokens.   This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Refresh Token\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public refreshTokenAuthRefreshTokenPost(xToken: string, options?: any) {\n    return AuthApiFp(this.configuration).refreshTokenAuthRefreshTokenPost(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Register User\n   * @param {UserRegistrationSchema} userRegistrationSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public registerUserAuthPost(\n    userRegistrationSchema: UserRegistrationSchema,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).registerUserAuthPost(\n      userRegistrationSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Remove Unverified Email\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public removeUnverifiedEmailAuthUnverifiedEmailDelete(\n    xToken: string,\n    options?: any\n  ) {\n    return AuthApiFp(\n      this.configuration\n    ).removeUnverifiedEmailAuthUnverifiedEmailDelete(xToken, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n\n  /**\n   *\n   * @summary Resend Email Verification Token\n   * @param {BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost} bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n    bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost: BodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n    options?: any\n  ) {\n    return AuthApiFp(\n      this.configuration\n    ).resendEmailVerificationTokenAuthResendEmailVerificationTokenPost(\n      bodyResendEmailVerificationTokenAuthResendEmailVerificationTokenPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Update Profile\n   * @param {string} xToken\n   * @param {UpdateCurrentUserProfile} [updateCurrentUserProfile]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n  public updateProfileAuthUpdateProfilePut(\n    xToken: string,\n    updateCurrentUserProfile?: UpdateCurrentUserProfile,\n    options?: any\n  ) {\n    return AuthApiFp(this.configuration).updateProfileAuthUpdateProfilePut(\n      xToken,\n      updateCurrentUserProfile,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * CouponsApi - axios parameter creator\n * @export\n */\nexport const CouponsApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCouponCouponsCouponIdActivatePost(\n      couponId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'couponId' is not null or undefined\n      if (couponId === null || couponId === undefined) {\n        throw new RequiredError(\n          \"couponId\",\n          \"Required parameter couponId was null or undefined when calling activateCouponCouponsCouponIdActivatePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling activateCouponCouponsCouponIdActivatePost.\"\n        );\n      }\n      const localVarPath = `/coupons/{couponId}/activate`.replace(\n        `{${\"couponId\"}}`,\n        encodeURIComponent(String(couponId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Coupon\n     * @param {string} xToken\n     * @param {CreateCouponInputSchema} createCouponInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCouponCouponsPost(\n      xToken: string,\n      createCouponInputSchema: CreateCouponInputSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling addCouponCouponsPost.\"\n        );\n      }\n      // verify required parameter 'createCouponInputSchema' is not null or undefined\n      if (\n        createCouponInputSchema === null ||\n        createCouponInputSchema === undefined\n      ) {\n        throw new RequiredError(\n          \"createCouponInputSchema\",\n          \"Required parameter createCouponInputSchema was null or undefined when calling addCouponCouponsPost.\"\n        );\n      }\n      const localVarPath = `/coupons`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof createCouponInputSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            createCouponInputSchema !== undefined ? createCouponInputSchema : {}\n          )\n        : createCouponInputSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Customer To Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost} bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCustomerToCouponCouponsCouponIdAddCustomerPost(\n      couponId: number,\n      xToken: string,\n      bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost: BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'couponId' is not null or undefined\n      if (couponId === null || couponId === undefined) {\n        throw new RequiredError(\n          \"couponId\",\n          \"Required parameter couponId was null or undefined when calling addCustomerToCouponCouponsCouponIdAddCustomerPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling addCustomerToCouponCouponsCouponIdAddCustomerPost.\"\n        );\n      }\n      // verify required parameter 'bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost' is not null or undefined\n      if (\n        bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost === null ||\n        bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\",\n          \"Required parameter bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost was null or undefined when calling addCustomerToCouponCouponsCouponIdAddCustomerPost.\"\n        );\n      }\n      const localVarPath = `/coupons/{couponId}/add-customer`.replace(\n        `{${\"couponId\"}}`,\n        encodeURIComponent(String(couponId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost !== undefined\n              ? bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n              : {}\n          )\n        : bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCouponCouponsCouponIdDeactivatePost(\n      couponId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'couponId' is not null or undefined\n      if (couponId === null || couponId === undefined) {\n        throw new RequiredError(\n          \"couponId\",\n          \"Required parameter couponId was null or undefined when calling deactivateCouponCouponsCouponIdDeactivatePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling deactivateCouponCouponsCouponIdDeactivatePost.\"\n        );\n      }\n      const localVarPath = `/coupons/{couponId}/deactivate`.replace(\n        `{${\"couponId\"}}`,\n        encodeURIComponent(String(couponId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Get Coupon Types\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCouponTypesCouponsTypesGet(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getCouponTypesCouponsTypesGet.\"\n        );\n      }\n      const localVarPath = `/coupons/types`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Coupons\n     * @param {string} xToken\n     * @param {string} [code]\n     * @param {number} [page]\n     * @param {boolean} [availablesOnly]\n     * @param {CouponTypeEnum} [type]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCouponsCouponsGet(\n      xToken: string,\n      code?: string,\n      page?: number,\n      availablesOnly?: boolean,\n      type?: CouponTypeEnum,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listCouponsCouponsGet.\"\n        );\n      }\n      const localVarPath = `/coupons`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (code !== undefined) {\n        localVarQueryParameter[\"code\"] = code;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (availablesOnly !== undefined) {\n        localVarQueryParameter[\"AvailablesOnly\"] = availablesOnly;\n      }\n\n      if (type !== undefined) {\n        localVarQueryParameter[\"type\"] = type;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Customer From Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete} bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n      couponId: number,\n      xToken: string,\n      bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete: BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'couponId' is not null or undefined\n      if (couponId === null || couponId === undefined) {\n        throw new RequiredError(\n          \"couponId\",\n          \"Required parameter couponId was null or undefined when calling removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete.\"\n        );\n      }\n      // verify required parameter 'bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete' is not null or undefined\n      if (\n        bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete ===\n          null ||\n        bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete ===\n          undefined\n      ) {\n        throw new RequiredError(\n          \"bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\",\n          \"Required parameter bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete was null or undefined when calling removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete.\"\n        );\n      }\n      const localVarPath = `/coupons/{couponId}/remove-customer`.replace(\n        `{${\"couponId\"}}`,\n        encodeURIComponent(String(couponId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete !==\n              undefined\n              ? bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n              : {}\n          )\n        : bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * CouponsApi - functional programming interface\n * @export\n */\nexport const CouponsApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCouponCouponsCouponIdActivatePost(\n      couponId: number,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).activateCouponCouponsCouponIdActivatePost(couponId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Coupon\n     * @param {string} xToken\n     * @param {CreateCouponInputSchema} createCouponInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCouponCouponsPost(\n      xToken: string,\n      createCouponInputSchema: CreateCouponInputSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CouponSchema> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).addCouponCouponsPost(xToken, createCouponInputSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Customer To Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost} bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCustomerToCouponCouponsCouponIdAddCustomerPost(\n      couponId: number,\n      xToken: string,\n      bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost: BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).addCustomerToCouponCouponsCouponIdAddCustomerPost(\n        couponId,\n        xToken,\n        bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCouponCouponsCouponIdDeactivatePost(\n      couponId: number,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).deactivateCouponCouponsCouponIdDeactivatePost(\n        couponId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Get Coupon Types\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCouponTypesCouponsTypesGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CouponTypesEndpointOutput> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).getCouponTypesCouponsTypesGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Coupons\n     * @param {string} xToken\n     * @param {string} [code]\n     * @param {number} [page]\n     * @param {boolean} [availablesOnly]\n     * @param {CouponTypeEnum} [type]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCouponsCouponsGet(\n      xToken: string,\n      code?: string,\n      page?: number,\n      availablesOnly?: boolean,\n      type?: CouponTypeEnum,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CouponPaginatedListSchema> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).listCouponsCouponsGet(\n        xToken,\n        code,\n        page,\n        availablesOnly,\n        type,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Customer From Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete} bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n      couponId: number,\n      xToken: string,\n      bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete: BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CouponsApiAxiosParamCreator(\n        configuration\n      ).removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n        couponId,\n        xToken,\n        bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * CouponsApi - factory interface\n * @export\n */\nexport const CouponsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCouponCouponsCouponIdActivatePost(\n      couponId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CouponsApiFp(\n        configuration\n      ).activateCouponCouponsCouponIdActivatePost(\n        couponId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Coupon\n     * @param {string} xToken\n     * @param {CreateCouponInputSchema} createCouponInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCouponCouponsPost(\n      xToken: string,\n      createCouponInputSchema: CreateCouponInputSchema,\n      options?: any\n    ): AxiosPromise<CouponSchema> {\n      return CouponsApiFp(configuration).addCouponCouponsPost(\n        xToken,\n        createCouponInputSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Customer To Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost} bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addCustomerToCouponCouponsCouponIdAddCustomerPost(\n      couponId: number,\n      xToken: string,\n      bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost: BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CouponsApiFp(\n        configuration\n      ).addCustomerToCouponCouponsCouponIdAddCustomerPost(\n        couponId,\n        xToken,\n        bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCouponCouponsCouponIdDeactivatePost(\n      couponId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CouponsApiFp(\n        configuration\n      ).deactivateCouponCouponsCouponIdDeactivatePost(\n        couponId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Get Coupon Types\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCouponTypesCouponsTypesGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CouponTypesEndpointOutput> {\n      return CouponsApiFp(configuration).getCouponTypesCouponsTypesGet(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Coupons\n     * @param {string} xToken\n     * @param {string} [code]\n     * @param {number} [page]\n     * @param {boolean} [availablesOnly]\n     * @param {CouponTypeEnum} [type]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCouponsCouponsGet(\n      xToken: string,\n      code?: string,\n      page?: number,\n      availablesOnly?: boolean,\n      type?: CouponTypeEnum,\n      options?: any\n    ): AxiosPromise<CouponPaginatedListSchema> {\n      return CouponsApiFp(configuration).listCouponsCouponsGet(\n        xToken,\n        code,\n        page,\n        availablesOnly,\n        type,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Customer From Coupon\n     * @param {number} couponId\n     * @param {string} xToken\n     * @param {BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete} bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n      couponId: number,\n      xToken: string,\n      bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete: BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n      options?: any\n    ): AxiosPromise<object> {\n      return CouponsApiFp(\n        configuration\n      ).removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n        couponId,\n        xToken,\n        bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * CouponsApi - interface\n * @export\n * @interface CouponsApi\n */\nexport interface CouponsApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Activate Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  activateCouponCouponsCouponIdActivatePost(\n    couponId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Coupon\n   * @param {string} xToken\n   * @param {CreateCouponInputSchema} createCouponInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  addCouponCouponsPost(\n    xToken: string,\n    createCouponInputSchema: CreateCouponInputSchema,\n    options?: any\n  ): AxiosPromise<CouponSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Customer To Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost} bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  addCustomerToCouponCouponsCouponIdAddCustomerPost(\n    couponId: number,\n    xToken: string,\n    bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost: BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Deactivate Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  deactivateCouponCouponsCouponIdDeactivatePost(\n    couponId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Get Coupon Types\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  getCouponTypesCouponsTypesGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CouponTypesEndpointOutput>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary List Coupons\n   * @param {string} xToken\n   * @param {string} [code]\n   * @param {number} [page]\n   * @param {boolean} [availablesOnly]\n   * @param {CouponTypeEnum} [type]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  listCouponsCouponsGet(\n    xToken: string,\n    code?: string,\n    page?: number,\n    availablesOnly?: boolean,\n    type?: CouponTypeEnum,\n    options?: any\n  ): AxiosPromise<CouponPaginatedListSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Remove Customer From Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete} bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApiInterface\n   */\n  removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n    couponId: number,\n    xToken: string,\n    bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete: BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * CouponsApi - object-oriented interface\n * @export\n * @class CouponsApi\n * @extends {BaseAPI}\n */\nexport class CouponsApi extends BaseAPI implements CouponsApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Activate Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public activateCouponCouponsCouponIdActivatePost(\n    couponId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return CouponsApiFp(\n      this.configuration\n    ).activateCouponCouponsCouponIdActivatePost(\n      couponId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Coupon\n   * @param {string} xToken\n   * @param {CreateCouponInputSchema} createCouponInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public addCouponCouponsPost(\n    xToken: string,\n    createCouponInputSchema: CreateCouponInputSchema,\n    options?: any\n  ) {\n    return CouponsApiFp(this.configuration).addCouponCouponsPost(\n      xToken,\n      createCouponInputSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Customer To Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost} bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public addCustomerToCouponCouponsCouponIdAddCustomerPost(\n    couponId: number,\n    xToken: string,\n    bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost: BodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n    options?: any\n  ) {\n    return CouponsApiFp(\n      this.configuration\n    ).addCustomerToCouponCouponsCouponIdAddCustomerPost(\n      couponId,\n      xToken,\n      bodyAddCustomerToCouponCouponsCouponIdAddCustomerPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Deactivate Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public deactivateCouponCouponsCouponIdDeactivatePost(\n    couponId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return CouponsApiFp(\n      this.configuration\n    ).deactivateCouponCouponsCouponIdDeactivatePost(\n      couponId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Get Coupon Types\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public getCouponTypesCouponsTypesGet(xToken: string, options?: any) {\n    return CouponsApiFp(this.configuration).getCouponTypesCouponsTypesGet(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary List Coupons\n   * @param {string} xToken\n   * @param {string} [code]\n   * @param {number} [page]\n   * @param {boolean} [availablesOnly]\n   * @param {CouponTypeEnum} [type]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public listCouponsCouponsGet(\n    xToken: string,\n    code?: string,\n    page?: number,\n    availablesOnly?: boolean,\n    type?: CouponTypeEnum,\n    options?: any\n  ) {\n    return CouponsApiFp(this.configuration).listCouponsCouponsGet(\n      xToken,\n      code,\n      page,\n      availablesOnly,\n      type,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Remove Customer From Coupon\n   * @param {number} couponId\n   * @param {string} xToken\n   * @param {BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete} bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CouponsApi\n   */\n  public removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n    couponId: number,\n    xToken: string,\n    bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete: BodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n    options?: any\n  ) {\n    return CouponsApiFp(\n      this.configuration\n    ).removeCustomerFromCouponCouponsCouponIdRemoveCustomerDelete(\n      couponId,\n      xToken,\n      bodyRemoveCustomerFromCouponCouponsCouponIdRemoveCustomerDelete,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * CustomersApi - axios parameter creator\n * @export\n */\nexport const CustomersApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCustomerCustomersCustomerIdActivatePost(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling activateCustomerCustomersCustomerIdActivatePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling activateCustomerCustomersCustomerIdActivatePost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/activate`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Note For Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAddNoteForCustomerCustomersCustomerIdNotePost} bodyAddNoteForCustomerCustomersCustomerIdNotePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addNoteForCustomerCustomersCustomerIdNotePost(\n      customerId: string,\n      xToken: string,\n      bodyAddNoteForCustomerCustomersCustomerIdNotePost: BodyAddNoteForCustomerCustomersCustomerIdNotePost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling addNoteForCustomerCustomersCustomerIdNotePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling addNoteForCustomerCustomersCustomerIdNotePost.\"\n        );\n      }\n      // verify required parameter 'bodyAddNoteForCustomerCustomersCustomerIdNotePost' is not null or undefined\n      if (\n        bodyAddNoteForCustomerCustomersCustomerIdNotePost === null ||\n        bodyAddNoteForCustomerCustomersCustomerIdNotePost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyAddNoteForCustomerCustomersCustomerIdNotePost\",\n          \"Required parameter bodyAddNoteForCustomerCustomersCustomerIdNotePost was null or undefined when calling addNoteForCustomerCustomersCustomerIdNotePost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/note`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyAddNoteForCustomerCustomersCustomerIdNotePost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyAddNoteForCustomerCustomersCustomerIdNotePost !== undefined\n              ? bodyAddNoteForCustomerCustomersCustomerIdNotePost\n              : {}\n          )\n        : bodyAddNoteForCustomerCustomersCustomerIdNotePost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Adjust Customer Credit\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost} bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n      customerId: string,\n      xToken: string,\n      bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost: BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling adjustCustomerCreditCustomersCustomerIdAdjustCreditPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling adjustCustomerCreditCustomersCustomerIdAdjustCreditPost.\"\n        );\n      }\n      // verify required parameter 'bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost' is not null or undefined\n      if (\n        bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost === null ||\n        bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost ===\n          undefined\n      ) {\n        throw new RequiredError(\n          \"bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\",\n          \"Required parameter bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost was null or undefined when calling adjustCustomerCreditCustomersCustomerIdAdjustCreditPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/adjust-credit`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost !==\n              undefined\n              ? bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n              : {}\n          )\n        : bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Adds an unverified email for the customer, then sends a token to the email.    Whenever customer clicks on that token, the unverified email will be set as main email.     The endpoint also can be used as endpoint for resending verification tokens to customers unverified email.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Change Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyChangeEmailCustomersCustomerIdChangeEmailPost} bodyChangeEmailCustomersCustomerIdChangeEmailPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailCustomersCustomerIdChangeEmailPost(\n      customerId: string,\n      xToken: string,\n      bodyChangeEmailCustomersCustomerIdChangeEmailPost: BodyChangeEmailCustomersCustomerIdChangeEmailPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling changeEmailCustomersCustomerIdChangeEmailPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling changeEmailCustomersCustomerIdChangeEmailPost.\"\n        );\n      }\n      // verify required parameter 'bodyChangeEmailCustomersCustomerIdChangeEmailPost' is not null or undefined\n      if (\n        bodyChangeEmailCustomersCustomerIdChangeEmailPost === null ||\n        bodyChangeEmailCustomersCustomerIdChangeEmailPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyChangeEmailCustomersCustomerIdChangeEmailPost\",\n          \"Required parameter bodyChangeEmailCustomersCustomerIdChangeEmailPost was null or undefined when calling changeEmailCustomersCustomerIdChangeEmailPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/change-email`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyChangeEmailCustomersCustomerIdChangeEmailPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyChangeEmailCustomersCustomerIdChangeEmailPost !== undefined\n              ? bodyChangeEmailCustomersCustomerIdChangeEmailPost\n              : {}\n          )\n        : bodyChangeEmailCustomersCustomerIdChangeEmailPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Check Current Customer Balance\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n      customerId: string,\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost.\"\n        );\n      }\n      // verify required parameter 'bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost' is not null or undefined\n      if (\n        bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost ===\n          null ||\n        bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost ===\n          undefined\n      ) {\n        throw new RequiredError(\n          \"bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\",\n          \"Required parameter bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost was null or undefined when calling checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/check-balance`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customer_id\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost !==\n              undefined\n              ? bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n              : {}\n          )\n        : bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost ||\n          \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Check Current Customer Balance\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling checkCurrentCustomerBalanceCustomersMeCheckBalancePost.\"\n        );\n      }\n      // verify required parameter 'bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost' is not null or undefined\n      if (\n        bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost === null ||\n        bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\",\n          \"Required parameter bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost was null or undefined when calling checkCurrentCustomerBalanceCustomersMeCheckBalancePost.\"\n        );\n      }\n      const localVarPath = `/customers/me/check-balance`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost !==\n          \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost !==\n              undefined\n              ? bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n              : {}\n          )\n        : bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Billing Info\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerBillingInfoCustomersCustomerIdBillingDataGet(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling customerBillingInfoCustomersCustomerIdBillingDataGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling customerBillingInfoCustomersCustomerIdBillingDataGet.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/billing-data`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Details\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerDetailsCustomersCustomerIdGet(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling customerDetailsCustomersCustomerIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling customerDetailsCustomersCustomerIdGet.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCustomerCustomersCustomerIdDeactivatePost(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling deactivateCustomerCustomersCustomerIdDeactivatePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling deactivateCustomerCustomersCustomerIdDeactivatePost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/deactivate`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Delete Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCustomerCustomersCustomerIdDelete(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling deleteCustomerCustomersCustomerIdDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling deleteCustomerCustomersCustomerIdDelete.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Disables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Disable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/override-suspension`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customer_id\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Enables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Enable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/override-suspension`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customer_id\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Of Customers\n     * @param {string} xToken\n     * @param {string} [fullname]\n     * @param {string} [email]\n     * @param {string} [customerId]\n     * @param {number} [start] Filter from timestamp\n     * @param {number} [end] Filter to timestamp\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfCustomersCustomersGet(\n      xToken: string,\n      fullname?: string,\n      email?: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listOfCustomersCustomersGet.\"\n        );\n      }\n      const localVarPath = `/customers`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (fullname !== undefined) {\n        localVarQueryParameter[\"fullname\"] = fullname;\n      }\n\n      if (email !== undefined) {\n        localVarQueryParameter[\"email\"] = email;\n      }\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (start !== undefined) {\n        localVarQueryParameter[\"start\"] = start;\n      }\n\n      if (end !== undefined) {\n        localVarQueryParameter[\"end\"] = end;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Remove unverified email for the customer.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Unverified Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/unverified-email`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Send Reset Password Token\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling sendResetPasswordTokenCustomersCustomerIdResetPasswordPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling sendResetPasswordTokenCustomersCustomerIdResetPasswordPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/reset-password`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodySuspendCustomerCustomersCustomerIdSuspendPost} bodySuspendCustomerCustomersCustomerIdSuspendPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendCustomerCustomersCustomerIdSuspendPost(\n      customerId: string,\n      xToken: string,\n      bodySuspendCustomerCustomersCustomerIdSuspendPost: BodySuspendCustomerCustomersCustomerIdSuspendPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling suspendCustomerCustomersCustomerIdSuspendPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling suspendCustomerCustomersCustomerIdSuspendPost.\"\n        );\n      }\n      // verify required parameter 'bodySuspendCustomerCustomersCustomerIdSuspendPost' is not null or undefined\n      if (\n        bodySuspendCustomerCustomersCustomerIdSuspendPost === null ||\n        bodySuspendCustomerCustomersCustomerIdSuspendPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodySuspendCustomerCustomersCustomerIdSuspendPost\",\n          \"Required parameter bodySuspendCustomerCustomersCustomerIdSuspendPost was null or undefined when calling suspendCustomerCustomersCustomerIdSuspendPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/suspend`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodySuspendCustomerCustomersCustomerIdSuspendPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodySuspendCustomerCustomersCustomerIdSuspendPost !== undefined\n              ? bodySuspendCustomerCustomersCustomerIdSuspendPost\n              : {}\n          )\n        : bodySuspendCustomerCustomersCustomerIdSuspendPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Unsuspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n      customerId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling unsuspendCustomerCustomersCustomerIdUnsuspendPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling unsuspendCustomerCustomersCustomerIdUnsuspendPost.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/unsuspend`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Update Customer Profile\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {CustomerProfileUpdateInputSchema} [customerProfileUpdateInputSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n      customerId: string,\n      xToken: string,\n      customerProfileUpdateInputSchema?: CustomerProfileUpdateInputSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'customerId' is not null or undefined\n      if (customerId === null || customerId === undefined) {\n        throw new RequiredError(\n          \"customerId\",\n          \"Required parameter customerId was null or undefined when calling updateCustomerProfileCustomersCustomerIdUpdateProfilePut.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling updateCustomerProfileCustomersCustomerIdUpdateProfilePut.\"\n        );\n      }\n      const localVarPath = `/customers/{customerId}/update-profile`.replace(\n        `{${\"customerId\"}}`,\n        encodeURIComponent(String(customerId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"PUT\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof customerProfileUpdateInputSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            customerProfileUpdateInputSchema !== undefined\n              ? customerProfileUpdateInputSchema\n              : {}\n          )\n        : customerProfileUpdateInputSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * CustomersApi - functional programming interface\n * @export\n */\nexport const CustomersApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCustomerCustomersCustomerIdActivatePost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).activateCustomerCustomersCustomerIdActivatePost(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Note For Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAddNoteForCustomerCustomersCustomerIdNotePost} bodyAddNoteForCustomerCustomersCustomerIdNotePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addNoteForCustomerCustomersCustomerIdNotePost(\n      customerId: string,\n      xToken: string,\n      bodyAddNoteForCustomerCustomersCustomerIdNotePost: BodyAddNoteForCustomerCustomersCustomerIdNotePost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).addNoteForCustomerCustomersCustomerIdNotePost(\n        customerId,\n        xToken,\n        bodyAddNoteForCustomerCustomersCustomerIdNotePost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Adjust Customer Credit\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost} bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n      customerId: string,\n      xToken: string,\n      bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost: BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n        customerId,\n        xToken,\n        bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Adds an unverified email for the customer, then sends a token to the email.    Whenever customer clicks on that token, the unverified email will be set as main email.     The endpoint also can be used as endpoint for resending verification tokens to customers unverified email.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Change Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyChangeEmailCustomersCustomerIdChangeEmailPost} bodyChangeEmailCustomersCustomerIdChangeEmailPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailCustomersCustomerIdChangeEmailPost(\n      customerId: string,\n      xToken: string,\n      bodyChangeEmailCustomersCustomerIdChangeEmailPost: BodyChangeEmailCustomersCustomerIdChangeEmailPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstructionsHasBeenSent> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).changeEmailCustomersCustomerIdChangeEmailPost(\n        customerId,\n        xToken,\n        bodyChangeEmailCustomersCustomerIdChangeEmailPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Check Current Customer Balance\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n      customerId: string,\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n        customerId,\n        xToken,\n        bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Check Current Customer Balance\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n        xToken,\n        bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Billing Info\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerBillingInfoCustomersCustomerIdBillingDataGet(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CustomerBillingDetailSchema> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).customerBillingInfoCustomersCustomerIdBillingDataGet(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Details\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerDetailsCustomersCustomerIdGet(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CustomerDetailOutputSchema> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).customerDetailsCustomersCustomerIdGet(customerId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCustomerCustomersCustomerIdDeactivatePost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).deactivateCustomerCustomersCustomerIdDeactivatePost(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Delete Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCustomerCustomersCustomerIdDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).deleteCustomerCustomersCustomerIdDelete(customerId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Disables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Disable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Enables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Enable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Of Customers\n     * @param {string} xToken\n     * @param {string} [fullname]\n     * @param {string} [email]\n     * @param {string} [customerId]\n     * @param {number} [start] Filter from timestamp\n     * @param {number} [end] Filter to timestamp\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfCustomersCustomersGet(\n      xToken: string,\n      fullname?: string,\n      email?: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CustomerListOutputSchema> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).listOfCustomersCustomersGet(\n        xToken,\n        fullname,\n        email,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Remove unverified email for the customer.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Unverified Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Send Reset Password Token\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstructionsHasBeenSent> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodySuspendCustomerCustomersCustomerIdSuspendPost} bodySuspendCustomerCustomersCustomerIdSuspendPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendCustomerCustomersCustomerIdSuspendPost(\n      customerId: string,\n      xToken: string,\n      bodySuspendCustomerCustomersCustomerIdSuspendPost: BodySuspendCustomerCustomersCustomerIdSuspendPost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).suspendCustomerCustomersCustomerIdSuspendPost(\n        customerId,\n        xToken,\n        bodySuspendCustomerCustomersCustomerIdSuspendPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Unsuspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n        customerId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Update Customer Profile\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {CustomerProfileUpdateInputSchema} [customerProfileUpdateInputSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n      customerId: string,\n      xToken: string,\n      customerProfileUpdateInputSchema?: CustomerProfileUpdateInputSchema,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = CustomersApiAxiosParamCreator(\n        configuration\n      ).updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n        customerId,\n        xToken,\n        customerProfileUpdateInputSchema,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * CustomersApi - factory interface\n * @export\n */\nexport const CustomersApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Activate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activateCustomerCustomersCustomerIdActivatePost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).activateCustomerCustomersCustomerIdActivatePost(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Note For Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAddNoteForCustomerCustomersCustomerIdNotePost} bodyAddNoteForCustomerCustomersCustomerIdNotePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addNoteForCustomerCustomersCustomerIdNotePost(\n      customerId: string,\n      xToken: string,\n      bodyAddNoteForCustomerCustomersCustomerIdNotePost: BodyAddNoteForCustomerCustomersCustomerIdNotePost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).addNoteForCustomerCustomersCustomerIdNotePost(\n        customerId,\n        xToken,\n        bodyAddNoteForCustomerCustomersCustomerIdNotePost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Adjust Customer Credit\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost} bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n      customerId: string,\n      xToken: string,\n      bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost: BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n        customerId,\n        xToken,\n        bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Adds an unverified email for the customer, then sends a token to the email.    Whenever customer clicks on that token, the unverified email will be set as main email.     The endpoint also can be used as endpoint for resending verification tokens to customers unverified email.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Change Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyChangeEmailCustomersCustomerIdChangeEmailPost} bodyChangeEmailCustomersCustomerIdChangeEmailPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeEmailCustomersCustomerIdChangeEmailPost(\n      customerId: string,\n      xToken: string,\n      bodyChangeEmailCustomersCustomerIdChangeEmailPost: BodyChangeEmailCustomersCustomerIdChangeEmailPost,\n      options?: any\n    ): AxiosPromise<InstructionsHasBeenSent> {\n      return CustomersApiFp(\n        configuration\n      ).changeEmailCustomersCustomerIdChangeEmailPost(\n        customerId,\n        xToken,\n        bodyChangeEmailCustomersCustomerIdChangeEmailPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Check Current Customer Balance\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n      customerId: string,\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n        customerId,\n        xToken,\n        bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Check Current Customer Balance\n     * @param {string} xToken\n     * @param {BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n      xToken: string,\n      bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n        xToken,\n        bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Billing Info\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerBillingInfoCustomersCustomerIdBillingDataGet(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CustomerBillingDetailSchema> {\n      return CustomersApiFp(\n        configuration\n      ).customerBillingInfoCustomersCustomerIdBillingDataGet(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Customer Details\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    customerDetailsCustomersCustomerIdGet(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CustomerDetailOutputSchema> {\n      return CustomersApiFp(\n        configuration\n      ).customerDetailsCustomersCustomerIdGet(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Deactivate Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deactivateCustomerCustomersCustomerIdDeactivatePost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).deactivateCustomerCustomersCustomerIdDeactivatePost(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Delete Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCustomerCustomersCustomerIdDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).deleteCustomerCustomersCustomerIdDelete(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Disables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Disable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Enables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Enable Billing Suspension Override\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary List Of Customers\n     * @param {string} xToken\n     * @param {string} [fullname]\n     * @param {string} [email]\n     * @param {string} [customerId]\n     * @param {number} [start] Filter from timestamp\n     * @param {number} [end] Filter to timestamp\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfCustomersCustomersGet(\n      xToken: string,\n      fullname?: string,\n      email?: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): AxiosPromise<CustomerListOutputSchema> {\n      return CustomersApiFp(configuration).listOfCustomersCustomersGet(\n        xToken,\n        fullname,\n        email,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Remove unverified email for the customer.       This endpoint can be used by following group(s):  ``admin``.\n     * @summary Remove Unverified Email\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Send Reset Password Token\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<InstructionsHasBeenSent> {\n      return CustomersApiFp(\n        configuration\n      ).sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {BodySuspendCustomerCustomersCustomerIdSuspendPost} bodySuspendCustomerCustomersCustomerIdSuspendPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendCustomerCustomersCustomerIdSuspendPost(\n      customerId: string,\n      xToken: string,\n      bodySuspendCustomerCustomersCustomerIdSuspendPost: BodySuspendCustomerCustomersCustomerIdSuspendPost,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).suspendCustomerCustomersCustomerIdSuspendPost(\n        customerId,\n        xToken,\n        bodySuspendCustomerCustomersCustomerIdSuspendPost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Unsuspend Customer\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n      customerId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n        customerId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Update Customer Profile\n     * @param {string} customerId\n     * @param {string} xToken\n     * @param {CustomerProfileUpdateInputSchema} [customerProfileUpdateInputSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n      customerId: string,\n      xToken: string,\n      customerProfileUpdateInputSchema?: CustomerProfileUpdateInputSchema,\n      options?: any\n    ): AxiosPromise<object> {\n      return CustomersApiFp(\n        configuration\n      ).updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n        customerId,\n        xToken,\n        customerProfileUpdateInputSchema,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * CustomersApi - interface\n * @export\n * @interface CustomersApi\n */\nexport interface CustomersApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Activate Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  activateCustomerCustomersCustomerIdActivatePost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Note For Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyAddNoteForCustomerCustomersCustomerIdNotePost} bodyAddNoteForCustomerCustomersCustomerIdNotePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  addNoteForCustomerCustomersCustomerIdNotePost(\n    customerId: string,\n    xToken: string,\n    bodyAddNoteForCustomerCustomersCustomerIdNotePost: BodyAddNoteForCustomerCustomersCustomerIdNotePost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Adjust Customer Credit\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost} bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n    customerId: string,\n    xToken: string,\n    bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost: BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Adds an unverified email for the customer, then sends a token to the email.    Whenever customer clicks on that token, the unverified email will be set as main email.     The endpoint also can be used as endpoint for resending verification tokens to customers unverified email.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Change Email\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyChangeEmailCustomersCustomerIdChangeEmailPost} bodyChangeEmailCustomersCustomerIdChangeEmailPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  changeEmailCustomersCustomerIdChangeEmailPost(\n    customerId: string,\n    xToken: string,\n    bodyChangeEmailCustomersCustomerIdChangeEmailPost: BodyChangeEmailCustomersCustomerIdChangeEmailPost,\n    options?: any\n  ): AxiosPromise<InstructionsHasBeenSent>;\n\n  /**\n   *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Check Current Customer Balance\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n    customerId: string,\n    xToken: string,\n    bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Check Current Customer Balance\n   * @param {string} xToken\n   * @param {BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n    xToken: string,\n    bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Customer Billing Info\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  customerBillingInfoCustomersCustomerIdBillingDataGet(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CustomerBillingDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Customer Details\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  customerDetailsCustomersCustomerIdGet(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CustomerDetailOutputSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Deactivate Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  deactivateCustomerCustomersCustomerIdDeactivatePost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Delete Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  deleteCustomerCustomersCustomerIdDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Disables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Disable Billing Suspension Override\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Enables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Enable Billing Suspension Override\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary List Of Customers\n   * @param {string} xToken\n   * @param {string} [fullname]\n   * @param {string} [email]\n   * @param {string} [customerId]\n   * @param {number} [start] Filter from timestamp\n   * @param {number} [end] Filter to timestamp\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  listOfCustomersCustomersGet(\n    xToken: string,\n    fullname?: string,\n    email?: string,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ): AxiosPromise<CustomerListOutputSchema>;\n\n  /**\n   *    Remove unverified email for the customer.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Remove Unverified Email\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Send Reset Password Token\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<InstructionsHasBeenSent>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Suspend Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodySuspendCustomerCustomersCustomerIdSuspendPost} bodySuspendCustomerCustomersCustomerIdSuspendPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  suspendCustomerCustomersCustomerIdSuspendPost(\n    customerId: string,\n    xToken: string,\n    bodySuspendCustomerCustomersCustomerIdSuspendPost: BodySuspendCustomerCustomersCustomerIdSuspendPost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Unsuspend Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Update Customer Profile\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {CustomerProfileUpdateInputSchema} [customerProfileUpdateInputSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApiInterface\n   */\n  updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n    customerId: string,\n    xToken: string,\n    customerProfileUpdateInputSchema?: CustomerProfileUpdateInputSchema,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * CustomersApi - object-oriented interface\n * @export\n * @class CustomersApi\n * @extends {BaseAPI}\n */\nexport class CustomersApi extends BaseAPI implements CustomersApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Activate Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public activateCustomerCustomersCustomerIdActivatePost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).activateCustomerCustomersCustomerIdActivatePost(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Note For Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyAddNoteForCustomerCustomersCustomerIdNotePost} bodyAddNoteForCustomerCustomersCustomerIdNotePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public addNoteForCustomerCustomersCustomerIdNotePost(\n    customerId: string,\n    xToken: string,\n    bodyAddNoteForCustomerCustomersCustomerIdNotePost: BodyAddNoteForCustomerCustomersCustomerIdNotePost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).addNoteForCustomerCustomersCustomerIdNotePost(\n      customerId,\n      xToken,\n      bodyAddNoteForCustomerCustomersCustomerIdNotePost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Adjust Customer Credit\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost} bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n    customerId: string,\n    xToken: string,\n    bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost: BodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).adjustCustomerCreditCustomersCustomerIdAdjustCreditPost(\n      customerId,\n      xToken,\n      bodyAdjustCustomerCreditCustomersCustomerIdAdjustCreditPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Adds an unverified email for the customer, then sends a token to the email.    Whenever customer clicks on that token, the unverified email will be set as main email.     The endpoint also can be used as endpoint for resending verification tokens to customers unverified email.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Change Email\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyChangeEmailCustomersCustomerIdChangeEmailPost} bodyChangeEmailCustomersCustomerIdChangeEmailPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public changeEmailCustomersCustomerIdChangeEmailPost(\n    customerId: string,\n    xToken: string,\n    bodyChangeEmailCustomersCustomerIdChangeEmailPost: BodyChangeEmailCustomersCustomerIdChangeEmailPost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).changeEmailCustomersCustomerIdChangeEmailPost(\n      customerId,\n      xToken,\n      bodyChangeEmailCustomersCustomerIdChangeEmailPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Check Current Customer Balance\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n    customerId: string,\n    xToken: string,\n    bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).checkCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost(\n      customerId,\n      xToken,\n      bodyCheckCurrentCustomerBalanceCustomersCustomerIdCheckBalancePost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Checks if customer has enough balance using a specific plan for 5 days.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Check Current Customer Balance\n   * @param {string} xToken\n   * @param {BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost} bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n    xToken: string,\n    bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost: BodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).checkCurrentCustomerBalanceCustomersMeCheckBalancePost(\n      xToken,\n      bodyCheckCurrentCustomerBalanceCustomersMeCheckBalancePost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Customer Billing Info\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public customerBillingInfoCustomersCustomerIdBillingDataGet(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).customerBillingInfoCustomersCustomerIdBillingDataGet(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Customer Details\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public customerDetailsCustomersCustomerIdGet(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).customerDetailsCustomersCustomerIdGet(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Deactivate Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public deactivateCustomerCustomersCustomerIdDeactivatePost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).deactivateCustomerCustomersCustomerIdDeactivatePost(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Delete Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public deleteCustomerCustomersCustomerIdDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).deleteCustomerCustomersCustomerIdDelete(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Disables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Disable Billing Suspension Override\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).disableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionDelete(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Enables billing suspension override.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Enable Billing Suspension Override\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).enableBillingSuspensionOverrideCustomersCustomerIdOverrideSuspensionPost(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary List Of Customers\n   * @param {string} xToken\n   * @param {string} [fullname]\n   * @param {string} [email]\n   * @param {string} [customerId]\n   * @param {number} [start] Filter from timestamp\n   * @param {number} [end] Filter to timestamp\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public listOfCustomersCustomersGet(\n    xToken: string,\n    fullname?: string,\n    email?: string,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ) {\n    return CustomersApiFp(this.configuration).listOfCustomersCustomersGet(\n      xToken,\n      fullname,\n      email,\n      customerId,\n      start,\n      end,\n      page,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Remove unverified email for the customer.       This endpoint can be used by following group(s):  ``admin``.\n   * @summary Remove Unverified Email\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).removeUnverifiedEmailCustomersCustomerIdUnverifiedEmailDelete(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Send Reset Password Token\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).sendResetPasswordTokenCustomersCustomerIdResetPasswordPost(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Suspend Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {BodySuspendCustomerCustomersCustomerIdSuspendPost} bodySuspendCustomerCustomersCustomerIdSuspendPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public suspendCustomerCustomersCustomerIdSuspendPost(\n    customerId: string,\n    xToken: string,\n    bodySuspendCustomerCustomersCustomerIdSuspendPost: BodySuspendCustomerCustomersCustomerIdSuspendPost,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).suspendCustomerCustomersCustomerIdSuspendPost(\n      customerId,\n      xToken,\n      bodySuspendCustomerCustomersCustomerIdSuspendPost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Unsuspend Customer\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n    customerId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).unsuspendCustomerCustomersCustomerIdUnsuspendPost(\n      customerId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Update Customer Profile\n   * @param {string} customerId\n   * @param {string} xToken\n   * @param {CustomerProfileUpdateInputSchema} [customerProfileUpdateInputSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  public updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n    customerId: string,\n    xToken: string,\n    customerProfileUpdateInputSchema?: CustomerProfileUpdateInputSchema,\n    options?: any\n  ) {\n    return CustomersApiFp(\n      this.configuration\n    ).updateCustomerProfileCustomersCustomerIdUpdateProfilePut(\n      customerId,\n      xToken,\n      customerProfileUpdateInputSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * InstancesApi - axios parameter creator\n * @export\n */\nexport const InstancesApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *    Changes instance password, Returns the new password in body.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Instance Password\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeInstancePasswordInstancesInstanceIdChangePassPost(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling changeInstancePasswordInstancesInstanceIdChangePassPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling changeInstancePasswordInstancesInstanceIdChangePassPost.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}/change-pass`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Creates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Create Instance\n     * @param {string} xToken\n     * @param {InstanceCreateSchema} instanceCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createInstanceInstancesPost(\n      xToken: string,\n      instanceCreateSchema: InstanceCreateSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling createInstanceInstancesPost.\"\n        );\n      }\n      // verify required parameter 'instanceCreateSchema' is not null or undefined\n      if (instanceCreateSchema === null || instanceCreateSchema === undefined) {\n        throw new RequiredError(\n          \"instanceCreateSchema\",\n          \"Required parameter instanceCreateSchema was null or undefined when calling createInstanceInstancesPost.\"\n        );\n      }\n      const localVarPath = `/instances`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof instanceCreateSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            instanceCreateSchema !== undefined ? instanceCreateSchema : {}\n          )\n        : instanceCreateSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Delete Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteInstanceInstancesInstanceIdDelete(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling deleteInstanceInstancesInstanceIdDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling deleteInstanceInstancesInstanceIdDelete.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Instance Detail\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInstanceDetailInstancesInstanceIdGet(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling getInstanceDetailInstancesInstanceIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getInstanceDetailInstancesInstanceIdGet.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Instances\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInstancesInstancesGet(xToken: string, options: any = {}): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listInstancesInstancesGet.\"\n        );\n      }\n      const localVarPath = `/instances`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Patch Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchInstanceInstancesInstanceIdPatch(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling patchInstanceInstancesInstanceIdPatch.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling patchInstanceInstancesInstanceIdPatch.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"PATCH\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof instanceUpdateSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            instanceUpdateSchema !== undefined ? instanceUpdateSchema : {}\n          )\n        : instanceUpdateSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power Off Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOffInstanceInstancesInstanceIdPoweroffPost(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling powerOffInstanceInstancesInstanceIdPoweroffPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling powerOffInstanceInstancesInstanceIdPoweroffPost.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}/poweroff`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power On Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOnInstanceInstancesInstanceIdPoweronPost(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling powerOnInstanceInstancesInstanceIdPoweronPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling powerOnInstanceInstancesInstanceIdPoweronPost.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}/poweron`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Reset Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resetInstanceInstancesInstanceIdResetPost(\n      instanceId: string,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling resetInstanceInstancesInstanceIdResetPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling resetInstanceInstancesInstanceIdResetPost.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}/reset`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceSuspendInputSchema} instanceSuspendInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendInstanceInstancesInstanceIdSuspendPost(\n      instanceId: string,\n      xToken: string,\n      instanceSuspendInputSchema: InstanceSuspendInputSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling suspendInstanceInstancesInstanceIdSuspendPost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling suspendInstanceInstancesInstanceIdSuspendPost.\"\n        );\n      }\n      // verify required parameter 'instanceSuspendInputSchema' is not null or undefined\n      if (\n        instanceSuspendInputSchema === null ||\n        instanceSuspendInputSchema === undefined\n      ) {\n        throw new RequiredError(\n          \"instanceSuspendInputSchema\",\n          \"Required parameter instanceSuspendInputSchema was null or undefined when calling suspendInstanceInstancesInstanceIdSuspendPost.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}/suspend`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof instanceSuspendInputSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            instanceSuspendInputSchema !== undefined\n              ? instanceSuspendInputSchema\n              : {}\n          )\n        : instanceSuspendInputSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Updates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateInstanceInstancesInstanceIdPut(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'instanceId' is not null or undefined\n      if (instanceId === null || instanceId === undefined) {\n        throw new RequiredError(\n          \"instanceId\",\n          \"Required parameter instanceId was null or undefined when calling updateInstanceInstancesInstanceIdPut.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling updateInstanceInstancesInstanceIdPut.\"\n        );\n      }\n      const localVarPath = `/instances/{instanceId}`.replace(\n        `{${\"instanceId\"}}`,\n        encodeURIComponent(String(instanceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"PUT\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof instanceUpdateSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            instanceUpdateSchema !== undefined ? instanceUpdateSchema : {}\n          )\n        : instanceUpdateSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * InstancesApi - functional programming interface\n * @export\n */\nexport const InstancesApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     *    Changes instance password, Returns the new password in body.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Instance Password\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeInstancePasswordInstancesInstanceIdChangePassPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).changeInstancePasswordInstancesInstanceIdChangePassPost(\n        instanceId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Creates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Create Instance\n     * @param {string} xToken\n     * @param {InstanceCreateSchema} instanceCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createInstanceInstancesPost(\n      xToken: string,\n      instanceCreateSchema: InstanceCreateSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceDetailSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).createInstanceInstancesPost(xToken, instanceCreateSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Delete Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteInstanceInstancesInstanceIdDelete(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).deleteInstanceInstancesInstanceIdDelete(instanceId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Instance Detail\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInstanceDetailInstancesInstanceIdGet(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceDetailSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).getInstanceDetailInstancesInstanceIdGet(instanceId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Instances\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInstancesInstancesGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceListSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).listInstancesInstancesGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Patch Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchInstanceInstancesInstanceIdPatch(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceDetailSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).patchInstanceInstancesInstanceIdPatch(\n        instanceId,\n        xToken,\n        instanceUpdateSchema,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power Off Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOffInstanceInstancesInstanceIdPoweroffPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).powerOffInstanceInstancesInstanceIdPoweroffPost(\n        instanceId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power On Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOnInstanceInstancesInstanceIdPoweronPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).powerOnInstanceInstancesInstanceIdPoweronPost(\n        instanceId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Reset Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resetInstanceInstancesInstanceIdResetPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).resetInstanceInstancesInstanceIdResetPost(instanceId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceSuspendInputSchema} instanceSuspendInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendInstanceInstancesInstanceIdSuspendPost(\n      instanceId: string,\n      xToken: string,\n      instanceSuspendInputSchema: InstanceSuspendInputSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceSuspendOutputSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).suspendInstanceInstancesInstanceIdSuspendPost(\n        instanceId,\n        xToken,\n        instanceSuspendInputSchema,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Updates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateInstanceInstancesInstanceIdPut(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InstanceDetailSchema> {\n      const localVarAxiosArgs = InstancesApiAxiosParamCreator(\n        configuration\n      ).updateInstanceInstancesInstanceIdPut(\n        instanceId,\n        xToken,\n        instanceUpdateSchema,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * InstancesApi - factory interface\n * @export\n */\nexport const InstancesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *    Changes instance password, Returns the new password in body.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Change Instance Password\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changeInstancePasswordInstancesInstanceIdChangePassPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return InstancesApiFp(\n        configuration\n      ).changeInstancePasswordInstancesInstanceIdChangePassPost(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Creates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Create Instance\n     * @param {string} xToken\n     * @param {InstanceCreateSchema} instanceCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createInstanceInstancesPost(\n      xToken: string,\n      instanceCreateSchema: InstanceCreateSchema,\n      options?: any\n    ): AxiosPromise<InstanceDetailSchema> {\n      return InstancesApiFp(configuration).createInstanceInstancesPost(\n        xToken,\n        instanceCreateSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Delete Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteInstanceInstancesInstanceIdDelete(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return InstancesApiFp(\n        configuration\n      ).deleteInstanceInstancesInstanceIdDelete(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Instance Detail\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInstanceDetailInstancesInstanceIdGet(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<InstanceDetailSchema> {\n      return InstancesApiFp(\n        configuration\n      ).getInstanceDetailInstancesInstanceIdGet(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Instances\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInstancesInstancesGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<InstanceListSchema> {\n      return InstancesApiFp(configuration).listInstancesInstancesGet(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Patch Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchInstanceInstancesInstanceIdPatch(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options?: any\n    ): AxiosPromise<InstanceDetailSchema> {\n      return InstancesApiFp(\n        configuration\n      ).patchInstanceInstancesInstanceIdPatch(\n        instanceId,\n        xToken,\n        instanceUpdateSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power Off Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOffInstanceInstancesInstanceIdPoweroffPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return InstancesApiFp(\n        configuration\n      ).powerOffInstanceInstancesInstanceIdPoweroffPost(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Power On Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    powerOnInstanceInstancesInstanceIdPoweronPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return InstancesApiFp(\n        configuration\n      ).powerOnInstanceInstancesInstanceIdPoweronPost(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Reset Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resetInstanceInstancesInstanceIdResetPost(\n      instanceId: string,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return InstancesApiFp(\n        configuration\n      ).resetInstanceInstancesInstanceIdResetPost(\n        instanceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Suspend Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceSuspendInputSchema} instanceSuspendInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    suspendInstanceInstancesInstanceIdSuspendPost(\n      instanceId: string,\n      xToken: string,\n      instanceSuspendInputSchema: InstanceSuspendInputSchema,\n      options?: any\n    ): AxiosPromise<InstanceSuspendOutputSchema> {\n      return InstancesApiFp(\n        configuration\n      ).suspendInstanceInstancesInstanceIdSuspendPost(\n        instanceId,\n        xToken,\n        instanceSuspendInputSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Updates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Update Instance\n     * @param {string} instanceId\n     * @param {string} xToken\n     * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateInstanceInstancesInstanceIdPut(\n      instanceId: string,\n      xToken: string,\n      instanceUpdateSchema?: InstanceUpdateSchema,\n      options?: any\n    ): AxiosPromise<InstanceDetailSchema> {\n      return InstancesApiFp(configuration).updateInstanceInstancesInstanceIdPut(\n        instanceId,\n        xToken,\n        instanceUpdateSchema,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * InstancesApi - interface\n * @export\n * @interface InstancesApi\n */\nexport interface InstancesApiInterface {\n  /**\n   *    Changes instance password, Returns the new password in body.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Change Instance Password\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  changeInstancePasswordInstancesInstanceIdChangePassPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Creates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Create Instance\n   * @param {string} xToken\n   * @param {InstanceCreateSchema} instanceCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  createInstanceInstancesPost(\n    xToken: string,\n    instanceCreateSchema: InstanceCreateSchema,\n    options?: any\n  ): AxiosPromise<InstanceDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Delete Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  deleteInstanceInstancesInstanceIdDelete(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Get Instance Detail\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  getInstanceDetailInstancesInstanceIdGet(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<InstanceDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary List Instances\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  listInstancesInstancesGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<InstanceListSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Patch Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  patchInstanceInstancesInstanceIdPatch(\n    instanceId: string,\n    xToken: string,\n    instanceUpdateSchema?: InstanceUpdateSchema,\n    options?: any\n  ): AxiosPromise<InstanceDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Power Off Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  powerOffInstanceInstancesInstanceIdPoweroffPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Power On Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  powerOnInstanceInstancesInstanceIdPoweronPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Reset Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  resetInstanceInstancesInstanceIdResetPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Suspend Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceSuspendInputSchema} instanceSuspendInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  suspendInstanceInstancesInstanceIdSuspendPost(\n    instanceId: string,\n    xToken: string,\n    instanceSuspendInputSchema: InstanceSuspendInputSchema,\n    options?: any\n  ): AxiosPromise<InstanceSuspendOutputSchema>;\n\n  /**\n   *    Updates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Update Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApiInterface\n   */\n  updateInstanceInstancesInstanceIdPut(\n    instanceId: string,\n    xToken: string,\n    instanceUpdateSchema?: InstanceUpdateSchema,\n    options?: any\n  ): AxiosPromise<InstanceDetailSchema>;\n}\n\n/**\n * InstancesApi - object-oriented interface\n * @export\n * @class InstancesApi\n * @extends {BaseAPI}\n */\nexport class InstancesApi extends BaseAPI implements InstancesApiInterface {\n  /**\n   *    Changes instance password, Returns the new password in body.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Change Instance Password\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public changeInstancePasswordInstancesInstanceIdChangePassPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).changeInstancePasswordInstancesInstanceIdChangePassPost(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Creates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Create Instance\n   * @param {string} xToken\n   * @param {InstanceCreateSchema} instanceCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public createInstanceInstancesPost(\n    xToken: string,\n    instanceCreateSchema: InstanceCreateSchema,\n    options?: any\n  ) {\n    return InstancesApiFp(this.configuration).createInstanceInstancesPost(\n      xToken,\n      instanceCreateSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Delete Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public deleteInstanceInstancesInstanceIdDelete(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).deleteInstanceInstancesInstanceIdDelete(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Get Instance Detail\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public getInstanceDetailInstancesInstanceIdGet(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).getInstanceDetailInstancesInstanceIdGet(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary List Instances\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public listInstancesInstancesGet(xToken: string, options?: any) {\n    return InstancesApiFp(this.configuration).listInstancesInstancesGet(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Patch Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public patchInstanceInstancesInstanceIdPatch(\n    instanceId: string,\n    xToken: string,\n    instanceUpdateSchema?: InstanceUpdateSchema,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).patchInstanceInstancesInstanceIdPatch(\n      instanceId,\n      xToken,\n      instanceUpdateSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Power Off Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public powerOffInstanceInstancesInstanceIdPoweroffPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).powerOffInstanceInstancesInstanceIdPoweroffPost(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Power On Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public powerOnInstanceInstancesInstanceIdPoweronPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).powerOnInstanceInstancesInstanceIdPoweronPost(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Reset Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public resetInstanceInstancesInstanceIdResetPost(\n    instanceId: string,\n    xToken: string,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).resetInstanceInstancesInstanceIdResetPost(\n      instanceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Suspend Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceSuspendInputSchema} instanceSuspendInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public suspendInstanceInstancesInstanceIdSuspendPost(\n    instanceId: string,\n    xToken: string,\n    instanceSuspendInputSchema: InstanceSuspendInputSchema,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).suspendInstanceInstancesInstanceIdSuspendPost(\n      instanceId,\n      xToken,\n      instanceSuspendInputSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Updates an instance in Zyrrus.     Admin accounts should pass `customerId` in body.     In case user was a customer his/her id will be extracted from the JWT token.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Update Instance\n   * @param {string} instanceId\n   * @param {string} xToken\n   * @param {InstanceUpdateSchema} [instanceUpdateSchema]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstancesApi\n   */\n  public updateInstanceInstancesInstanceIdPut(\n    instanceId: string,\n    xToken: string,\n    instanceUpdateSchema?: InstanceUpdateSchema,\n    options?: any\n  ) {\n    return InstancesApiFp(\n      this.configuration\n    ).updateInstanceInstancesInstanceIdPut(\n      instanceId,\n      xToken,\n      instanceUpdateSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * InvoicesApi - axios parameter creator\n * @export\n */\nexport const InvoicesApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Onetime Invoice\n     * @param {string} xToken\n     * @param {BodyAddOnetimeInvoiceInvoicesOneTimePost} bodyAddOnetimeInvoiceInvoicesOneTimePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addOnetimeInvoiceInvoicesOneTimePost(\n      xToken: string,\n      bodyAddOnetimeInvoiceInvoicesOneTimePost: BodyAddOnetimeInvoiceInvoicesOneTimePost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling addOnetimeInvoiceInvoicesOneTimePost.\"\n        );\n      }\n      // verify required parameter 'bodyAddOnetimeInvoiceInvoicesOneTimePost' is not null or undefined\n      if (\n        bodyAddOnetimeInvoiceInvoicesOneTimePost === null ||\n        bodyAddOnetimeInvoiceInvoicesOneTimePost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyAddOnetimeInvoiceInvoicesOneTimePost\",\n          \"Required parameter bodyAddOnetimeInvoiceInvoicesOneTimePost was null or undefined when calling addOnetimeInvoiceInvoicesOneTimePost.\"\n        );\n      }\n      const localVarPath = `/invoices/one-time`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyAddOnetimeInvoiceInvoicesOneTimePost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyAddOnetimeInvoiceInvoicesOneTimePost !== undefined\n              ? bodyAddOnetimeInvoiceInvoicesOneTimePost\n              : {}\n          )\n        : bodyAddOnetimeInvoiceInvoicesOneTimePost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Invoice Detail\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInvoiceDetailInvoicesInvoiceIdGet(\n      invoiceId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'invoiceId' is not null or undefined\n      if (invoiceId === null || invoiceId === undefined) {\n        throw new RequiredError(\n          \"invoiceId\",\n          \"Required parameter invoiceId was null or undefined when calling getInvoiceDetailInvoicesInvoiceIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getInvoiceDetailInvoicesInvoiceIdGet.\"\n        );\n      }\n      const localVarPath = `/invoices/{invoiceId}`.replace(\n        `{${\"invoiceId\"}}`,\n        encodeURIComponent(String(invoiceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Invoices\n     * @param {string} xToken\n     * @param {string} [email]\n     * @param {string} [fullname]\n     * @param {InvoiceStatusEnum} [status]\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInvoicesInvoicesGet(\n      xToken: string,\n      email?: string,\n      fullname?: string,\n      status?: InvoiceStatusEnum,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listInvoicesInvoicesGet.\"\n        );\n      }\n      const localVarPath = `/invoices`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (email !== undefined) {\n        localVarQueryParameter[\"email\"] = email;\n      }\n\n      if (fullname !== undefined) {\n        localVarQueryParameter[\"fullname\"] = fullname;\n      }\n\n      if (status !== undefined) {\n        localVarQueryParameter[\"status\"] = status;\n      }\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (start !== undefined) {\n        localVarQueryParameter[\"start\"] = start;\n      }\n\n      if (end !== undefined) {\n        localVarQueryParameter[\"end\"] = end;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Share Invoice\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {BodyShareInvoiceInvoicesInvoiceIdSharePost} [bodyShareInvoiceInvoicesInvoiceIdSharePost]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shareInvoiceInvoicesInvoiceIdSharePost(\n      invoiceId: number,\n      xToken: string,\n      bodyShareInvoiceInvoicesInvoiceIdSharePost?: BodyShareInvoiceInvoicesInvoiceIdSharePost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'invoiceId' is not null or undefined\n      if (invoiceId === null || invoiceId === undefined) {\n        throw new RequiredError(\n          \"invoiceId\",\n          \"Required parameter invoiceId was null or undefined when calling shareInvoiceInvoicesInvoiceIdSharePost.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling shareInvoiceInvoicesInvoiceIdSharePost.\"\n        );\n      }\n      const localVarPath = `/invoices/{invoiceId}/share`.replace(\n        `{${\"invoiceId\"}}`,\n        encodeURIComponent(String(invoiceId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyShareInvoiceInvoicesInvoiceIdSharePost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyShareInvoiceInvoicesInvoiceIdSharePost !== undefined\n              ? bodyShareInvoiceInvoicesInvoiceIdSharePost\n              : {}\n          )\n        : bodyShareInvoiceInvoicesInvoiceIdSharePost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * InvoicesApi - functional programming interface\n * @export\n */\nexport const InvoicesApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Onetime Invoice\n     * @param {string} xToken\n     * @param {BodyAddOnetimeInvoiceInvoicesOneTimePost} bodyAddOnetimeInvoiceInvoicesOneTimePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addOnetimeInvoiceInvoicesOneTimePost(\n      xToken: string,\n      bodyAddOnetimeInvoiceInvoicesOneTimePost: BodyAddOnetimeInvoiceInvoicesOneTimePost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InvoicesApiAxiosParamCreator(\n        configuration\n      ).addOnetimeInvoiceInvoicesOneTimePost(\n        xToken,\n        bodyAddOnetimeInvoiceInvoicesOneTimePost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Invoice Detail\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInvoiceDetailInvoicesInvoiceIdGet(\n      invoiceId: number,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InvoiceDetailSchema> {\n      const localVarAxiosArgs = InvoicesApiAxiosParamCreator(\n        configuration\n      ).getInvoiceDetailInvoicesInvoiceIdGet(invoiceId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Invoices\n     * @param {string} xToken\n     * @param {string} [email]\n     * @param {string} [fullname]\n     * @param {InvoiceStatusEnum} [status]\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInvoicesInvoicesGet(\n      xToken: string,\n      email?: string,\n      fullname?: string,\n      status?: InvoiceStatusEnum,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InvoiceListResponseSchema> {\n      const localVarAxiosArgs = InvoicesApiAxiosParamCreator(\n        configuration\n      ).listInvoicesInvoicesGet(\n        xToken,\n        email,\n        fullname,\n        status,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Share Invoice\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {BodyShareInvoiceInvoicesInvoiceIdSharePost} [bodyShareInvoiceInvoicesInvoiceIdSharePost]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shareInvoiceInvoicesInvoiceIdSharePost(\n      invoiceId: number,\n      xToken: string,\n      bodyShareInvoiceInvoicesInvoiceIdSharePost?: BodyShareInvoiceInvoicesInvoiceIdSharePost,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = InvoicesApiAxiosParamCreator(\n        configuration\n      ).shareInvoiceInvoicesInvoiceIdSharePost(\n        invoiceId,\n        xToken,\n        bodyShareInvoiceInvoicesInvoiceIdSharePost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * InvoicesApi - factory interface\n * @export\n */\nexport const InvoicesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``admin``.\n     * @summary Add Onetime Invoice\n     * @param {string} xToken\n     * @param {BodyAddOnetimeInvoiceInvoicesOneTimePost} bodyAddOnetimeInvoiceInvoicesOneTimePost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addOnetimeInvoiceInvoicesOneTimePost(\n      xToken: string,\n      bodyAddOnetimeInvoiceInvoicesOneTimePost: BodyAddOnetimeInvoiceInvoicesOneTimePost,\n      options?: any\n    ): AxiosPromise<object> {\n      return InvoicesApiFp(configuration).addOnetimeInvoiceInvoicesOneTimePost(\n        xToken,\n        bodyAddOnetimeInvoiceInvoicesOneTimePost,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Invoice Detail\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getInvoiceDetailInvoicesInvoiceIdGet(\n      invoiceId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<InvoiceDetailSchema> {\n      return InvoicesApiFp(configuration).getInvoiceDetailInvoicesInvoiceIdGet(\n        invoiceId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Invoices\n     * @param {string} xToken\n     * @param {string} [email]\n     * @param {string} [fullname]\n     * @param {InvoiceStatusEnum} [status]\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listInvoicesInvoicesGet(\n      xToken: string,\n      email?: string,\n      fullname?: string,\n      status?: InvoiceStatusEnum,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): AxiosPromise<InvoiceListResponseSchema> {\n      return InvoicesApiFp(configuration).listInvoicesInvoicesGet(\n        xToken,\n        email,\n        fullname,\n        status,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Share Invoice\n     * @param {number} invoiceId\n     * @param {string} xToken\n     * @param {BodyShareInvoiceInvoicesInvoiceIdSharePost} [bodyShareInvoiceInvoicesInvoiceIdSharePost]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shareInvoiceInvoicesInvoiceIdSharePost(\n      invoiceId: number,\n      xToken: string,\n      bodyShareInvoiceInvoicesInvoiceIdSharePost?: BodyShareInvoiceInvoicesInvoiceIdSharePost,\n      options?: any\n    ): AxiosPromise<object> {\n      return InvoicesApiFp(\n        configuration\n      ).shareInvoiceInvoicesInvoiceIdSharePost(\n        invoiceId,\n        xToken,\n        bodyShareInvoiceInvoicesInvoiceIdSharePost,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * InvoicesApi - interface\n * @export\n * @interface InvoicesApi\n */\nexport interface InvoicesApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Onetime Invoice\n   * @param {string} xToken\n   * @param {BodyAddOnetimeInvoiceInvoicesOneTimePost} bodyAddOnetimeInvoiceInvoicesOneTimePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApiInterface\n   */\n  addOnetimeInvoiceInvoicesOneTimePost(\n    xToken: string,\n    bodyAddOnetimeInvoiceInvoicesOneTimePost: BodyAddOnetimeInvoiceInvoicesOneTimePost,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Invoice Detail\n   * @param {number} invoiceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApiInterface\n   */\n  getInvoiceDetailInvoicesInvoiceIdGet(\n    invoiceId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<InvoiceDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Invoices\n   * @param {string} xToken\n   * @param {string} [email]\n   * @param {string} [fullname]\n   * @param {InvoiceStatusEnum} [status]\n   * @param {string} [customerId]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApiInterface\n   */\n  listInvoicesInvoicesGet(\n    xToken: string,\n    email?: string,\n    fullname?: string,\n    status?: InvoiceStatusEnum,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ): AxiosPromise<InvoiceListResponseSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Share Invoice\n   * @param {number} invoiceId\n   * @param {string} xToken\n   * @param {BodyShareInvoiceInvoicesInvoiceIdSharePost} [bodyShareInvoiceInvoicesInvoiceIdSharePost]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApiInterface\n   */\n  shareInvoiceInvoicesInvoiceIdSharePost(\n    invoiceId: number,\n    xToken: string,\n    bodyShareInvoiceInvoicesInvoiceIdSharePost?: BodyShareInvoiceInvoicesInvoiceIdSharePost,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * InvoicesApi - object-oriented interface\n * @export\n * @class InvoicesApi\n * @extends {BaseAPI}\n */\nexport class InvoicesApi extends BaseAPI implements InvoicesApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``admin``.\n   * @summary Add Onetime Invoice\n   * @param {string} xToken\n   * @param {BodyAddOnetimeInvoiceInvoicesOneTimePost} bodyAddOnetimeInvoiceInvoicesOneTimePost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApi\n   */\n  public addOnetimeInvoiceInvoicesOneTimePost(\n    xToken: string,\n    bodyAddOnetimeInvoiceInvoicesOneTimePost: BodyAddOnetimeInvoiceInvoicesOneTimePost,\n    options?: any\n  ) {\n    return InvoicesApiFp(\n      this.configuration\n    ).addOnetimeInvoiceInvoicesOneTimePost(\n      xToken,\n      bodyAddOnetimeInvoiceInvoicesOneTimePost,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Invoice Detail\n   * @param {number} invoiceId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApi\n   */\n  public getInvoiceDetailInvoicesInvoiceIdGet(\n    invoiceId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return InvoicesApiFp(\n      this.configuration\n    ).getInvoiceDetailInvoicesInvoiceIdGet(\n      invoiceId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Invoices\n   * @param {string} xToken\n   * @param {string} [email]\n   * @param {string} [fullname]\n   * @param {InvoiceStatusEnum} [status]\n   * @param {string} [customerId]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApi\n   */\n  public listInvoicesInvoicesGet(\n    xToken: string,\n    email?: string,\n    fullname?: string,\n    status?: InvoiceStatusEnum,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ) {\n    return InvoicesApiFp(this.configuration).listInvoicesInvoicesGet(\n      xToken,\n      email,\n      fullname,\n      status,\n      customerId,\n      start,\n      end,\n      page,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Share Invoice\n   * @param {number} invoiceId\n   * @param {string} xToken\n   * @param {BodyShareInvoiceInvoicesInvoiceIdSharePost} [bodyShareInvoiceInvoicesInvoiceIdSharePost]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InvoicesApi\n   */\n  public shareInvoiceInvoicesInvoiceIdSharePost(\n    invoiceId: number,\n    xToken: string,\n    bodyShareInvoiceInvoicesInvoiceIdSharePost?: BodyShareInvoiceInvoicesInvoiceIdSharePost,\n    options?: any\n  ) {\n    return InvoicesApiFp(\n      this.configuration\n    ).shareInvoiceInvoicesInvoiceIdSharePost(\n      invoiceId,\n      xToken,\n      bodyShareInvoiceInvoicesInvoiceIdSharePost,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * OperatingSystemsApi - axios parameter creator\n * @export\n */\nexport const OperatingSystemsApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *    List of all operating systems.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Os\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOsOsGet(xToken: string, options: any = {}): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listOsOsGet.\"\n        );\n      }\n      const localVarPath = `/os`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * OperatingSystemsApi - functional programming interface\n * @export\n */\nexport const OperatingSystemsApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     *    List of all operating systems.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Os\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOsOsGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<OsListSchema> {\n      const localVarAxiosArgs = OperatingSystemsApiAxiosParamCreator(\n        configuration\n      ).listOsOsGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * OperatingSystemsApi - factory interface\n * @export\n */\nexport const OperatingSystemsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *    List of all operating systems.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary List Os\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOsOsGet(xToken: string, options?: any): AxiosPromise<OsListSchema> {\n      return OperatingSystemsApiFp(configuration).listOsOsGet(xToken, options)(\n        axios,\n        basePath\n      );\n    },\n  };\n};\n\n/**\n * OperatingSystemsApi - interface\n * @export\n * @interface OperatingSystemsApi\n */\nexport interface OperatingSystemsApiInterface {\n  /**\n   *    List of all operating systems.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary List Os\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OperatingSystemsApiInterface\n   */\n  listOsOsGet(xToken: string, options?: any): AxiosPromise<OsListSchema>;\n}\n\n/**\n * OperatingSystemsApi - object-oriented interface\n * @export\n * @class OperatingSystemsApi\n * @extends {BaseAPI}\n */\nexport class OperatingSystemsApi\n  extends BaseAPI\n  implements OperatingSystemsApiInterface\n{\n  /**\n   *    List of all operating systems.       This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary List Os\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OperatingSystemsApi\n   */\n  public listOsOsGet(xToken: string, options?: any) {\n    return OperatingSystemsApiFp(this.configuration).listOsOsGet(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * PaymentsApi - axios parameter creator\n * @export\n */\nexport const PaymentsApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Add Payment\n     * @param {string} xToken\n     * @param {CreatePaymentInputSchema} createPaymentInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addPaymentPaymentsPost(\n      xToken: string,\n      createPaymentInputSchema: CreatePaymentInputSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling addPaymentPaymentsPost.\"\n        );\n      }\n      // verify required parameter 'createPaymentInputSchema' is not null or undefined\n      if (\n        createPaymentInputSchema === null ||\n        createPaymentInputSchema === undefined\n      ) {\n        throw new RequiredError(\n          \"createPaymentInputSchema\",\n          \"Required parameter createPaymentInputSchema was null or undefined when calling addPaymentPaymentsPost.\"\n        );\n      }\n      const localVarPath = `/payments`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof createPaymentInputSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            createPaymentInputSchema !== undefined\n              ? createPaymentInputSchema\n              : {}\n          )\n        : createPaymentInputSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Payment Detail\n     * @param {number} paymentId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPaymentDetailPaymentsPaymentIdGet(\n      paymentId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'paymentId' is not null or undefined\n      if (paymentId === null || paymentId === undefined) {\n        throw new RequiredError(\n          \"paymentId\",\n          \"Required parameter paymentId was null or undefined when calling getPaymentDetailPaymentsPaymentIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getPaymentDetailPaymentsPaymentIdGet.\"\n        );\n      }\n      const localVarPath = `/payments/{paymentId}`.replace(\n        `{${\"paymentId\"}}`,\n        encodeURIComponent(String(paymentId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Of Payments\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {string} [fullname]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {string} [email]\n     * @param {PaymentStatusEnum} [status]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfPaymentsPaymentsGet(\n      xToken: string,\n      customerId?: string,\n      fullname?: string,\n      start?: number,\n      end?: number,\n      email?: string,\n      status?: PaymentStatusEnum,\n      page?: number,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listOfPaymentsPaymentsGet.\"\n        );\n      }\n      const localVarPath = `/payments`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (fullname !== undefined) {\n        localVarQueryParameter[\"fullname\"] = fullname;\n      }\n\n      if (start !== undefined) {\n        localVarQueryParameter[\"start\"] = start;\n      }\n\n      if (end !== undefined) {\n        localVarQueryParameter[\"end\"] = end;\n      }\n\n      if (email !== undefined) {\n        localVarQueryParameter[\"email\"] = email;\n      }\n\n      if (status !== undefined) {\n        localVarQueryParameter[\"status\"] = status;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Use Coupon\n     * @param {string} xToken\n     * @param {BodyUseCouponPaymentsCouponPost} bodyUseCouponPaymentsCouponPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    useCouponPaymentsCouponPost(\n      xToken: string,\n      bodyUseCouponPaymentsCouponPost: BodyUseCouponPaymentsCouponPost,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling useCouponPaymentsCouponPost.\"\n        );\n      }\n      // verify required parameter 'bodyUseCouponPaymentsCouponPost' is not null or undefined\n      if (\n        bodyUseCouponPaymentsCouponPost === null ||\n        bodyUseCouponPaymentsCouponPost === undefined\n      ) {\n        throw new RequiredError(\n          \"bodyUseCouponPaymentsCouponPost\",\n          \"Required parameter bodyUseCouponPaymentsCouponPost was null or undefined when calling useCouponPaymentsCouponPost.\"\n        );\n      }\n      const localVarPath = `/payments/coupon`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof bodyUseCouponPaymentsCouponPost !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            bodyUseCouponPaymentsCouponPost !== undefined\n              ? bodyUseCouponPaymentsCouponPost\n              : {}\n          )\n        : bodyUseCouponPaymentsCouponPost || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PaymentsApi - functional programming interface\n * @export\n */\nexport const PaymentsApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Add Payment\n     * @param {string} xToken\n     * @param {CreatePaymentInputSchema} createPaymentInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addPaymentPaymentsPost(\n      xToken: string,\n      createPaymentInputSchema: CreatePaymentInputSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CreatePaymentResponseSchema> {\n      const localVarAxiosArgs = PaymentsApiAxiosParamCreator(\n        configuration\n      ).addPaymentPaymentsPost(xToken, createPaymentInputSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Payment Detail\n     * @param {number} paymentId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPaymentDetailPaymentsPaymentIdGet(\n      paymentId: number,\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<PaymentDetailSchema> {\n      const localVarAxiosArgs = PaymentsApiAxiosParamCreator(\n        configuration\n      ).getPaymentDetailPaymentsPaymentIdGet(paymentId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Of Payments\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {string} [fullname]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {string} [email]\n     * @param {PaymentStatusEnum} [status]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfPaymentsPaymentsGet(\n      xToken: string,\n      customerId?: string,\n      fullname?: string,\n      start?: number,\n      end?: number,\n      email?: string,\n      status?: PaymentStatusEnum,\n      page?: number,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<PaymentListResponseSchema> {\n      const localVarAxiosArgs = PaymentsApiAxiosParamCreator(\n        configuration\n      ).listOfPaymentsPaymentsGet(\n        xToken,\n        customerId,\n        fullname,\n        start,\n        end,\n        email,\n        status,\n        page,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Use Coupon\n     * @param {string} xToken\n     * @param {BodyUseCouponPaymentsCouponPost} bodyUseCouponPaymentsCouponPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    useCouponPaymentsCouponPost(\n      xToken: string,\n      bodyUseCouponPaymentsCouponPost: BodyUseCouponPaymentsCouponPost,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<UseCouponAsPaymentResponseSchema> {\n      const localVarAxiosArgs = PaymentsApiAxiosParamCreator(\n        configuration\n      ).useCouponPaymentsCouponPost(\n        xToken,\n        bodyUseCouponPaymentsCouponPost,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * PaymentsApi - factory interface\n * @export\n */\nexport const PaymentsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Add Payment\n     * @param {string} xToken\n     * @param {CreatePaymentInputSchema} createPaymentInputSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addPaymentPaymentsPost(\n      xToken: string,\n      createPaymentInputSchema: CreatePaymentInputSchema,\n      options?: any\n    ): AxiosPromise<CreatePaymentResponseSchema> {\n      return PaymentsApiFp(configuration).addPaymentPaymentsPost(\n        xToken,\n        createPaymentInputSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Payment Detail\n     * @param {number} paymentId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPaymentDetailPaymentsPaymentIdGet(\n      paymentId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<PaymentDetailSchema> {\n      return PaymentsApiFp(configuration).getPaymentDetailPaymentsPaymentIdGet(\n        paymentId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Of Payments\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {string} [fullname]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {string} [email]\n     * @param {PaymentStatusEnum} [status]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOfPaymentsPaymentsGet(\n      xToken: string,\n      customerId?: string,\n      fullname?: string,\n      start?: number,\n      end?: number,\n      email?: string,\n      status?: PaymentStatusEnum,\n      page?: number,\n      options?: any\n    ): AxiosPromise<PaymentListResponseSchema> {\n      return PaymentsApiFp(configuration).listOfPaymentsPaymentsGet(\n        xToken,\n        customerId,\n        fullname,\n        start,\n        end,\n        email,\n        status,\n        page,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Use Coupon\n     * @param {string} xToken\n     * @param {BodyUseCouponPaymentsCouponPost} bodyUseCouponPaymentsCouponPost\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    useCouponPaymentsCouponPost(\n      xToken: string,\n      bodyUseCouponPaymentsCouponPost: BodyUseCouponPaymentsCouponPost,\n      options?: any\n    ): AxiosPromise<UseCouponAsPaymentResponseSchema> {\n      return PaymentsApiFp(configuration).useCouponPaymentsCouponPost(\n        xToken,\n        bodyUseCouponPaymentsCouponPost,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * PaymentsApi - interface\n * @export\n * @interface PaymentsApi\n */\nexport interface PaymentsApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Add Payment\n   * @param {string} xToken\n   * @param {CreatePaymentInputSchema} createPaymentInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApiInterface\n   */\n  addPaymentPaymentsPost(\n    xToken: string,\n    createPaymentInputSchema: CreatePaymentInputSchema,\n    options?: any\n  ): AxiosPromise<CreatePaymentResponseSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Payment Detail\n   * @param {number} paymentId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApiInterface\n   */\n  getPaymentDetailPaymentsPaymentIdGet(\n    paymentId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<PaymentDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Of Payments\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {string} [fullname]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [email]\n   * @param {PaymentStatusEnum} [status]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApiInterface\n   */\n  listOfPaymentsPaymentsGet(\n    xToken: string,\n    customerId?: string,\n    fullname?: string,\n    start?: number,\n    end?: number,\n    email?: string,\n    status?: PaymentStatusEnum,\n    page?: number,\n    options?: any\n  ): AxiosPromise<PaymentListResponseSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Use Coupon\n   * @param {string} xToken\n   * @param {BodyUseCouponPaymentsCouponPost} bodyUseCouponPaymentsCouponPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApiInterface\n   */\n  useCouponPaymentsCouponPost(\n    xToken: string,\n    bodyUseCouponPaymentsCouponPost: BodyUseCouponPaymentsCouponPost,\n    options?: any\n  ): AxiosPromise<UseCouponAsPaymentResponseSchema>;\n}\n\n/**\n * PaymentsApi - object-oriented interface\n * @export\n * @class PaymentsApi\n * @extends {BaseAPI}\n */\nexport class PaymentsApi extends BaseAPI implements PaymentsApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Add Payment\n   * @param {string} xToken\n   * @param {CreatePaymentInputSchema} createPaymentInputSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  public addPaymentPaymentsPost(\n    xToken: string,\n    createPaymentInputSchema: CreatePaymentInputSchema,\n    options?: any\n  ) {\n    return PaymentsApiFp(this.configuration).addPaymentPaymentsPost(\n      xToken,\n      createPaymentInputSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Payment Detail\n   * @param {number} paymentId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  public getPaymentDetailPaymentsPaymentIdGet(\n    paymentId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return PaymentsApiFp(\n      this.configuration\n    ).getPaymentDetailPaymentsPaymentIdGet(\n      paymentId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Of Payments\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {string} [fullname]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [email]\n   * @param {PaymentStatusEnum} [status]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  public listOfPaymentsPaymentsGet(\n    xToken: string,\n    customerId?: string,\n    fullname?: string,\n    start?: number,\n    end?: number,\n    email?: string,\n    status?: PaymentStatusEnum,\n    page?: number,\n    options?: any\n  ) {\n    return PaymentsApiFp(this.configuration).listOfPaymentsPaymentsGet(\n      xToken,\n      customerId,\n      fullname,\n      start,\n      end,\n      email,\n      status,\n      page,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Use Coupon\n   * @param {string} xToken\n   * @param {BodyUseCouponPaymentsCouponPost} bodyUseCouponPaymentsCouponPost\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  public useCouponPaymentsCouponPost(\n    xToken: string,\n    bodyUseCouponPaymentsCouponPost: BodyUseCouponPaymentsCouponPost,\n    options?: any\n  ) {\n    return PaymentsApiFp(this.configuration).useCouponPaymentsCouponPost(\n      xToken,\n      bodyUseCouponPaymentsCouponPost,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * PlansApi - axios parameter creator\n * @export\n */\nexport const PlansApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Get Plan\n     * @param {string} planId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPlanPlansPlanIdGet(planId: string, options: any = {}): RequestArgs {\n      // verify required parameter 'planId' is not null or undefined\n      if (planId === null || planId === undefined) {\n        throw new RequiredError(\n          \"planId\",\n          \"Required parameter planId was null or undefined when calling getPlanPlansPlanIdGet.\"\n        );\n      }\n      const localVarPath = `/plans/{plan_id}`.replace(\n        `{${\"plan_id\"}}`,\n        encodeURIComponent(String(planId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary List Plans\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPlansPlansGet(options: any = {}): RequestArgs {\n      const localVarPath = `/plans`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PlansApi - functional programming interface\n * @export\n */\nexport const PlansApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get Plan\n     * @param {string} planId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPlanPlansPlanIdGet(\n      planId: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanSchema> {\n      const localVarAxiosArgs = PlansApiAxiosParamCreator(\n        configuration\n      ).getPlanPlansPlanIdGet(planId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary List Plans\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPlansPlansGet(\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<PlanListSchema> {\n      const localVarAxiosArgs =\n        PlansApiAxiosParamCreator(configuration).listPlansPlansGet(options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * PlansApi - factory interface\n * @export\n */\nexport const PlansApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Get Plan\n     * @param {string} planId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPlanPlansPlanIdGet(\n      planId: string,\n      options?: any\n    ): AxiosPromise<PlanSchema> {\n      return PlansApiFp(configuration).getPlanPlansPlanIdGet(planId, options)(\n        axios,\n        basePath\n      );\n    },\n    /**\n     *\n     * @summary List Plans\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPlansPlansGet(options?: any): AxiosPromise<PlanListSchema> {\n      return PlansApiFp(configuration).listPlansPlansGet(options)(\n        axios,\n        basePath\n      );\n    },\n  };\n};\n\n/**\n * PlansApi - interface\n * @export\n * @interface PlansApi\n */\nexport interface PlansApiInterface {\n  /**\n   *\n   * @summary Get Plan\n   * @param {string} planId\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlansApiInterface\n   */\n  getPlanPlansPlanIdGet(\n    planId: string,\n    options?: any\n  ): AxiosPromise<PlanSchema>;\n\n  /**\n   *\n   * @summary List Plans\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlansApiInterface\n   */\n  listPlansPlansGet(options?: any): AxiosPromise<PlanListSchema>;\n}\n\n/**\n * PlansApi - object-oriented interface\n * @export\n * @class PlansApi\n * @extends {BaseAPI}\n */\nexport class PlansApi extends BaseAPI implements PlansApiInterface {\n  /**\n   *\n   * @summary Get Plan\n   * @param {string} planId\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlansApi\n   */\n  public getPlanPlansPlanIdGet(planId: string, options?: any) {\n    return PlansApiFp(this.configuration).getPlanPlansPlanIdGet(\n      planId,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary List Plans\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlansApi\n   */\n  public listPlansPlansGet(options?: any) {\n    return PlansApiFp(this.configuration).listPlansPlansGet(options)(\n      this.axios,\n      this.basePath\n    );\n  }\n}\n\n/**\n * PrivateAuthApi - axios parameter creator\n * @export\n */\nexport const PrivateAuthApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Get Full Session\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getFullSessionTicketingAuthGetSessionGet(\n      sessionString: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'sessionString' is not null or undefined\n      if (sessionString === null || sessionString === undefined) {\n        throw new RequiredError(\n          \"sessionString\",\n          \"Required parameter sessionString was null or undefined when calling getFullSessionTicketingAuthGetSessionGet.\"\n        );\n      }\n      const localVarPath = `/ticketing-auth/get-session`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (sessionString !== undefined) {\n        localVarQueryParameter[\"session_string\"] = sessionString;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Login Into Ticketing\n     * @param {string} username\n     * @param {string} password\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginIntoTicketingTicketingAuthLoginGet(\n      username: string,\n      password: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'username' is not null or undefined\n      if (username === null || username === undefined) {\n        throw new RequiredError(\n          \"username\",\n          \"Required parameter username was null or undefined when calling loginIntoTicketingTicketingAuthLoginGet.\"\n        );\n      }\n      // verify required parameter 'password' is not null or undefined\n      if (password === null || password === undefined) {\n        throw new RequiredError(\n          \"password\",\n          \"Required parameter password was null or undefined when calling loginIntoTicketingTicketingAuthLoginGet.\"\n        );\n      }\n      const localVarPath = `/ticketing-auth/login`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (username !== undefined) {\n        localVarQueryParameter[\"username\"] = username;\n      }\n\n      if (password !== undefined) {\n        localVarQueryParameter[\"password\"] = password;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Logout From Ticketing\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutFromTicketingTicketingAuthLogoutGet(\n      sessionString: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'sessionString' is not null or undefined\n      if (sessionString === null || sessionString === undefined) {\n        throw new RequiredError(\n          \"sessionString\",\n          \"Required parameter sessionString was null or undefined when calling logoutFromTicketingTicketingAuthLogoutGet.\"\n        );\n      }\n      const localVarPath = `/ticketing-auth/logout`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (sessionString !== undefined) {\n        localVarQueryParameter[\"session_string\"] = sessionString;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PrivateAuthApi - functional programming interface\n * @export\n */\nexport const PrivateAuthApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Get Full Session\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getFullSessionTicketingAuthGetSessionGet(\n      sessionString: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = PrivateAuthApiAxiosParamCreator(\n        configuration\n      ).getFullSessionTicketingAuthGetSessionGet(sessionString, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Login Into Ticketing\n     * @param {string} username\n     * @param {string} password\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginIntoTicketingTicketingAuthLoginGet(\n      username: string,\n      password: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<InitSessionOutputSchema> {\n      const localVarAxiosArgs = PrivateAuthApiAxiosParamCreator(\n        configuration\n      ).loginIntoTicketingTicketingAuthLoginGet(username, password, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Logout From Ticketing\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutFromTicketingTicketingAuthLogoutGet(\n      sessionString: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = PrivateAuthApiAxiosParamCreator(\n        configuration\n      ).logoutFromTicketingTicketingAuthLogoutGet(sessionString, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * PrivateAuthApi - factory interface\n * @export\n */\nexport const PrivateAuthApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Get Full Session\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getFullSessionTicketingAuthGetSessionGet(\n      sessionString: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return PrivateAuthApiFp(\n        configuration\n      ).getFullSessionTicketingAuthGetSessionGet(sessionString, options)(\n        axios,\n        basePath\n      );\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Login Into Ticketing\n     * @param {string} username\n     * @param {string} password\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginIntoTicketingTicketingAuthLoginGet(\n      username: string,\n      password: string,\n      options?: any\n    ): AxiosPromise<InitSessionOutputSchema> {\n      return PrivateAuthApiFp(\n        configuration\n      ).loginIntoTicketingTicketingAuthLoginGet(\n        username,\n        password,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * **This endpoint is not meant to be used by frontend and it will be removed later.**\n     * @summary Logout From Ticketing\n     * @param {string} sessionString\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutFromTicketingTicketingAuthLogoutGet(\n      sessionString: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return PrivateAuthApiFp(\n        configuration\n      ).logoutFromTicketingTicketingAuthLogoutGet(sessionString, options)(\n        axios,\n        basePath\n      );\n    },\n  };\n};\n\n/**\n * PrivateAuthApi - interface\n * @export\n * @interface PrivateAuthApi\n */\nexport interface PrivateAuthApiInterface {\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Get Full Session\n   * @param {string} sessionString\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApiInterface\n   */\n  getFullSessionTicketingAuthGetSessionGet(\n    sessionString: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Login Into Ticketing\n   * @param {string} username\n   * @param {string} password\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApiInterface\n   */\n  loginIntoTicketingTicketingAuthLoginGet(\n    username: string,\n    password: string,\n    options?: any\n  ): AxiosPromise<InitSessionOutputSchema>;\n\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Logout From Ticketing\n   * @param {string} sessionString\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApiInterface\n   */\n  logoutFromTicketingTicketingAuthLogoutGet(\n    sessionString: string,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * PrivateAuthApi - object-oriented interface\n * @export\n * @class PrivateAuthApi\n * @extends {BaseAPI}\n */\nexport class PrivateAuthApi extends BaseAPI implements PrivateAuthApiInterface {\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Get Full Session\n   * @param {string} sessionString\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApi\n   */\n  public getFullSessionTicketingAuthGetSessionGet(\n    sessionString: string,\n    options?: any\n  ) {\n    return PrivateAuthApiFp(\n      this.configuration\n    ).getFullSessionTicketingAuthGetSessionGet(sessionString, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Login Into Ticketing\n   * @param {string} username\n   * @param {string} password\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApi\n   */\n  public loginIntoTicketingTicketingAuthLoginGet(\n    username: string,\n    password: string,\n    options?: any\n  ) {\n    return PrivateAuthApiFp(\n      this.configuration\n    ).loginIntoTicketingTicketingAuthLoginGet(\n      username,\n      password,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * **This endpoint is not meant to be used by frontend and it will be removed later.**\n   * @summary Logout From Ticketing\n   * @param {string} sessionString\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PrivateAuthApi\n   */\n  public logoutFromTicketingTicketingAuthLogoutGet(\n    sessionString: string,\n    options?: any\n  ) {\n    return PrivateAuthApiFp(\n      this.configuration\n    ).logoutFromTicketingTicketingAuthLogoutGet(sessionString, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n}\n\n/**\n * ProfileApi - axios parameter creator\n * @export\n */\nexport const ProfileApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Current User Billing Data\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    currentUserBillingDataProfileBillingInfoGet(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling currentUserBillingDataProfileBillingInfoGet.\"\n        );\n      }\n      const localVarPath = `/profile/billing-info`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoProfileUserInfoGet(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getCurrentUserInfoProfileUserInfoGet.\"\n        );\n      }\n      const localVarPath = `/profile/user-info`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ProfileApi - functional programming interface\n * @export\n */\nexport const ProfileApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Current User Billing Data\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    currentUserBillingDataProfileBillingInfoGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CustomerBillingDetailSchema> {\n      const localVarAxiosArgs = ProfileApiAxiosParamCreator(\n        configuration\n      ).currentUserBillingDataProfileBillingInfoGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoProfileUserInfoGet(\n      xToken: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<CurrentUserInfoSchema> {\n      const localVarAxiosArgs = ProfileApiAxiosParamCreator(\n        configuration\n      ).getCurrentUserInfoProfileUserInfoGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * ProfileApi - factory interface\n * @export\n */\nexport const ProfileApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Current User Billing Data\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    currentUserBillingDataProfileBillingInfoGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CustomerBillingDetailSchema> {\n      return ProfileApiFp(\n        configuration\n      ).currentUserBillingDataProfileBillingInfoGet(xToken, options)(\n        axios,\n        basePath\n      );\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``admin``,``customer``.\n     * @summary Get Current User Info\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCurrentUserInfoProfileUserInfoGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<CurrentUserInfoSchema> {\n      return ProfileApiFp(configuration).getCurrentUserInfoProfileUserInfoGet(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * ProfileApi - interface\n * @export\n * @interface ProfileApi\n */\nexport interface ProfileApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Current User Billing Data\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProfileApiInterface\n   */\n  currentUserBillingDataProfileBillingInfoGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CustomerBillingDetailSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Get Current User Info\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProfileApiInterface\n   */\n  getCurrentUserInfoProfileUserInfoGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<CurrentUserInfoSchema>;\n}\n\n/**\n * ProfileApi - object-oriented interface\n * @export\n * @class ProfileApi\n * @extends {BaseAPI}\n */\nexport class ProfileApi extends BaseAPI implements ProfileApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Current User Billing Data\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProfileApi\n   */\n  public currentUserBillingDataProfileBillingInfoGet(\n    xToken: string,\n    options?: any\n  ) {\n    return ProfileApiFp(\n      this.configuration\n    ).currentUserBillingDataProfileBillingInfoGet(xToken, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``admin``,``customer``.\n   * @summary Get Current User Info\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProfileApi\n   */\n  public getCurrentUserInfoProfileUserInfoGet(xToken: string, options?: any) {\n    return ProfileApiFp(\n      this.configuration\n    ).getCurrentUserInfoProfileUserInfoGet(xToken, options)(\n      this.axios,\n      this.basePath\n    );\n  }\n}\n\n/**\n * SSHKeysApi - axios parameter creator\n * @export\n */\nexport const SSHKeysApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * Creates a new SSH key for current or specified user.     - Admin group should provide desired customer_id to create SSH key for the specified user.    - For customer group, user id will be picked from the entered JWT token. And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Create New Ssh Key\n     * @param {string} xToken\n     * @param {SSHKeyWriteSchema} sSHKeyWriteSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createNewSshKeySshKeysPost(\n      xToken: string,\n      sSHKeyWriteSchema: SSHKeyWriteSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling createNewSshKeySshKeysPost.\"\n        );\n      }\n      // verify required parameter 'sSHKeyWriteSchema' is not null or undefined\n      if (sSHKeyWriteSchema === null || sSHKeyWriteSchema === undefined) {\n        throw new RequiredError(\n          \"sSHKeyWriteSchema\",\n          \"Required parameter sSHKeyWriteSchema was null or undefined when calling createNewSshKeySshKeysPost.\"\n        );\n      }\n      const localVarPath = `/ssh-keys`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof sSHKeyWriteSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            sSHKeyWriteSchema !== undefined ? sSHKeyWriteSchema : {}\n          )\n        : sSHKeyWriteSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes SSH key.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token. And the entered one will be ignored.   This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Delete Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSshKeySshKeysIdDelete(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          \"id\",\n          \"Required parameter id was null or undefined when calling deleteSshKeySshKeysIdDelete.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling deleteSshKeySshKeysIdDelete.\"\n        );\n      }\n      const localVarPath = `/ssh-keys/{id}`.replace(\n        `{${\"id\"}}`,\n        encodeURIComponent(String(id))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"DELETE\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Retrieve a specific ssh key owned specified or current user.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getSshKeySshKeysIdGet(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          \"id\",\n          \"Required parameter id was null or undefined when calling getSshKeySshKeysIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getSshKeySshKeysIdGet.\"\n        );\n      }\n      const localVarPath = `/ssh-keys/{id}`.replace(\n        `{${\"id\"}}`,\n        encodeURIComponent(String(id))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * List of ssh keys for a user.     - Admins group should provide customer id to get SSH keys for that customer.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Ssh Keys\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listSshKeysSshKeysGet(\n      xToken: string,\n      customerId?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listSshKeysSshKeysGet.\"\n        );\n      }\n      const localVarPath = `/ssh-keys`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * SSHKeysApi - functional programming interface\n * @export\n */\nexport const SSHKeysApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new SSH key for current or specified user.     - Admin group should provide desired customer_id to create SSH key for the specified user.    - For customer group, user id will be picked from the entered JWT token. And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Create New Ssh Key\n     * @param {string} xToken\n     * @param {SSHKeyWriteSchema} sSHKeyWriteSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createNewSshKeySshKeysPost(\n      xToken: string,\n      sSHKeyWriteSchema: SSHKeyWriteSchema,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SSHKeysApiAxiosParamCreator(\n        configuration\n      ).createNewSshKeySshKeysPost(xToken, sSHKeyWriteSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Deletes SSH key.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token. And the entered one will be ignored.   This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Delete Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSshKeySshKeysIdDelete(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SSHKeysApiAxiosParamCreator(\n        configuration\n      ).deleteSshKeySshKeysIdDelete(id, xToken, customerId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Retrieve a specific ssh key owned specified or current user.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getSshKeySshKeysIdGet(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<SSHKeyReadSchema> {\n      const localVarAxiosArgs = SSHKeysApiAxiosParamCreator(\n        configuration\n      ).getSshKeySshKeysIdGet(id, xToken, customerId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * List of ssh keys for a user.     - Admins group should provide customer id to get SSH keys for that customer.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Ssh Keys\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listSshKeysSshKeysGet(\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<Array<SSHKeyReadSchema>> {\n      const localVarAxiosArgs = SSHKeysApiAxiosParamCreator(\n        configuration\n      ).listSshKeysSshKeysGet(xToken, customerId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * SSHKeysApi - factory interface\n * @export\n */\nexport const SSHKeysApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * Creates a new SSH key for current or specified user.     - Admin group should provide desired customer_id to create SSH key for the specified user.    - For customer group, user id will be picked from the entered JWT token. And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Create New Ssh Key\n     * @param {string} xToken\n     * @param {SSHKeyWriteSchema} sSHKeyWriteSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createNewSshKeySshKeysPost(\n      xToken: string,\n      sSHKeyWriteSchema: SSHKeyWriteSchema,\n      options?: any\n    ): AxiosPromise<object> {\n      return SSHKeysApiFp(configuration).createNewSshKeySshKeysPost(\n        xToken,\n        sSHKeyWriteSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * Deletes SSH key.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token. And the entered one will be ignored.   This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Delete Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSshKeySshKeysIdDelete(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return SSHKeysApiFp(configuration).deleteSshKeySshKeysIdDelete(\n        id,\n        xToken,\n        customerId,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * Retrieve a specific ssh key owned specified or current user.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary Get Ssh Key\n     * @param {number} id\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getSshKeySshKeysIdGet(\n      id: number,\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): AxiosPromise<SSHKeyReadSchema> {\n      return SSHKeysApiFp(configuration).getSshKeySshKeysIdGet(\n        id,\n        xToken,\n        customerId,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * List of ssh keys for a user.     - Admins group should provide customer id to get SSH keys for that customer.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Ssh Keys\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listSshKeysSshKeysGet(\n      xToken: string,\n      customerId?: string,\n      options?: any\n    ): AxiosPromise<Array<SSHKeyReadSchema>> {\n      return SSHKeysApiFp(configuration).listSshKeysSshKeysGet(\n        xToken,\n        customerId,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * SSHKeysApi - interface\n * @export\n * @interface SSHKeysApi\n */\nexport interface SSHKeysApiInterface {\n  /**\n   * Creates a new SSH key for current or specified user.     - Admin group should provide desired customer_id to create SSH key for the specified user.    - For customer group, user id will be picked from the entered JWT token. And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Create New Ssh Key\n   * @param {string} xToken\n   * @param {SSHKeyWriteSchema} sSHKeyWriteSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApiInterface\n   */\n  createNewSshKeySshKeysPost(\n    xToken: string,\n    sSHKeyWriteSchema: SSHKeyWriteSchema,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * Deletes SSH key.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token. And the entered one will be ignored.   This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Delete Ssh Key\n   * @param {number} id\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApiInterface\n   */\n  deleteSshKeySshKeysIdDelete(\n    id: number,\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * Retrieve a specific ssh key owned specified or current user.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Ssh Key\n   * @param {number} id\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApiInterface\n   */\n  getSshKeySshKeysIdGet(\n    id: number,\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ): AxiosPromise<SSHKeyReadSchema>;\n\n  /**\n   * List of ssh keys for a user.     - Admins group should provide customer id to get SSH keys for that customer.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Ssh Keys\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApiInterface\n   */\n  listSshKeysSshKeysGet(\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ): AxiosPromise<Array<SSHKeyReadSchema>>;\n}\n\n/**\n * SSHKeysApi - object-oriented interface\n * @export\n * @class SSHKeysApi\n * @extends {BaseAPI}\n */\nexport class SSHKeysApi extends BaseAPI implements SSHKeysApiInterface {\n  /**\n   * Creates a new SSH key for current or specified user.     - Admin group should provide desired customer_id to create SSH key for the specified user.    - For customer group, user id will be picked from the entered JWT token. And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Create New Ssh Key\n   * @param {string} xToken\n   * @param {SSHKeyWriteSchema} sSHKeyWriteSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApi\n   */\n  public createNewSshKeySshKeysPost(\n    xToken: string,\n    sSHKeyWriteSchema: SSHKeyWriteSchema,\n    options?: any\n  ) {\n    return SSHKeysApiFp(this.configuration).createNewSshKeySshKeysPost(\n      xToken,\n      sSHKeyWriteSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * Deletes SSH key.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token. And the entered one will be ignored.   This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Delete Ssh Key\n   * @param {number} id\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApi\n   */\n  public deleteSshKeySshKeysIdDelete(\n    id: number,\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ) {\n    return SSHKeysApiFp(this.configuration).deleteSshKeySshKeysIdDelete(\n      id,\n      xToken,\n      customerId,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * Retrieve a specific ssh key owned specified or current user.     - Admins group should provide customer id along with SSH key id.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary Get Ssh Key\n   * @param {number} id\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApi\n   */\n  public getSshKeySshKeysIdGet(\n    id: number,\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ) {\n    return SSHKeysApiFp(this.configuration).getSshKeySshKeysIdGet(\n      id,\n      xToken,\n      customerId,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * List of ssh keys for a user.     - Admins group should provide customer id to get SSH keys for that customer.    - Customer group do not need to provide the customer id, As by default their id will be    fetched from entered JWT token.  And the entered one will be ignored.       This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Ssh Keys\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SSHKeysApi\n   */\n  public listSshKeysSshKeysGet(\n    xToken: string,\n    customerId?: string,\n    options?: any\n  ) {\n    return SSHKeysApiFp(this.configuration).listSshKeysSshKeysGet(\n      xToken,\n      customerId,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * SupportApi - axios parameter creator\n * @export\n */\nexport const SupportApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Close Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    closeTicketTicketingTicketsTicketIdCloseGet(\n      ticketId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'ticketId' is not null or undefined\n      if (ticketId === null || ticketId === undefined) {\n        throw new RequiredError(\n          \"ticketId\",\n          \"Required parameter ticketId was null or undefined when calling closeTicketTicketingTicketsTicketIdCloseGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling closeTicketTicketingTicketsTicketIdCloseGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets/{ticket_id}/close`.replace(\n        `{${\"ticket_id\"}}`,\n        encodeURIComponent(String(ticketId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    ## Creates a followup for the ticket with the provided id in the body\\'s ``items_id``.    ``Content`` can be HTML.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Followup\n     * @param {string} xToken\n     * @param {FollowUpCreateSchema} followUpCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFollowupTicketingFollowupsPost(\n      xToken: string,\n      followUpCreateSchema: FollowUpCreateSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling createFollowupTicketingFollowupsPost.\"\n        );\n      }\n      // verify required parameter 'followUpCreateSchema' is not null or undefined\n      if (followUpCreateSchema === null || followUpCreateSchema === undefined) {\n        throw new RequiredError(\n          \"followUpCreateSchema\",\n          \"Required parameter followUpCreateSchema was null or undefined when calling createFollowupTicketingFollowupsPost.\"\n        );\n      }\n      const localVarPath = `/ticketing/followups`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof followUpCreateSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            followUpCreateSchema !== undefined ? followUpCreateSchema : {}\n          )\n        : followUpCreateSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Ticket\n     * @param {string} xToken\n     * @param {TicketCreateSchema} ticketCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTicketTicketingTicketsPost(\n      xToken: string,\n      ticketCreateSchema: TicketCreateSchema,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling createTicketTicketingTicketsPost.\"\n        );\n      }\n      // verify required parameter 'ticketCreateSchema' is not null or undefined\n      if (ticketCreateSchema === null || ticketCreateSchema === undefined) {\n        throw new RequiredError(\n          \"ticketCreateSchema\",\n          \"Required parameter ticketCreateSchema was null or undefined when calling createTicketTicketingTicketsPost.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      const needsSerialization =\n        typeof ticketCreateSchema !== \"string\" ||\n        localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(\n            ticketCreateSchema !== undefined ? ticketCreateSchema : {}\n          )\n        : ticketCreateSchema || \"\";\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTicketingTicketsTicketIdGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'ticketId' is not null or undefined\n      if (ticketId === null || ticketId === undefined) {\n        throw new RequiredError(\n          \"ticketId\",\n          \"Required parameter ticketId was null or undefined when calling getTicketTicketingTicketsTicketIdGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getTicketTicketingTicketsTicketIdGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets/{ticket_id}`.replace(\n        `{${\"ticket_id\"}}`,\n        encodeURIComponent(String(ticketId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (withDocuments !== undefined) {\n        localVarQueryParameter[\"with_documents\"] = withDocuments;\n      }\n\n      if (expandNames !== undefined) {\n        localVarQueryParameter[\"expand_names\"] = expandNames;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket Time Line\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {SortTypeEnum} [timelineSortType]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      timelineSortType?: SortTypeEnum,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'ticketId' is not null or undefined\n      if (ticketId === null || ticketId === undefined) {\n        throw new RequiredError(\n          \"ticketId\",\n          \"Required parameter ticketId was null or undefined when calling getTicketTimeLineTicketingTicketsTicketIdTimelineGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling getTicketTimeLineTicketingTicketsTicketIdTimelineGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets/{ticket_id}/timeline`.replace(\n        `{${\"ticket_id\"}}`,\n        encodeURIComponent(String(ticketId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (withDocuments !== undefined) {\n        localVarQueryParameter[\"with_documents\"] = withDocuments;\n      }\n\n      if (expandNames !== undefined) {\n        localVarQueryParameter[\"expand_names\"] = expandNames;\n      }\n\n      if (timelineSortType !== undefined) {\n        localVarQueryParameter[\"timeline_sort_type\"] = timelineSortType;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Categories\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCategoriesTicketingCategoryGet(\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listCategoriesTicketingCategoryGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/category`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    ``range``: (default: 0-50): a string with a couple of number for     start and end of pagination separated by a \\'-\\'. Ex: 150-200. Optional.     <br>     <br>     <h4>Check response headers for: </h4><br>     - ``Content-Range`` offset – limit / count<br><br>     - ``Accept-Range`` itemtype max        This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Tickets\n     * @param {string} xToken\n     * @param {string} [itemRange]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTicketsTicketingTicketsGet(\n      xToken: string,\n      itemRange?: string,\n      expandNames?: boolean,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listTicketsTicketingTicketsGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (itemRange !== undefined) {\n        localVarQueryParameter[\"item_range\"] = itemRange;\n      }\n\n      if (expandNames !== undefined) {\n        localVarQueryParameter[\"expand_names\"] = expandNames;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Reopen Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    reopenTicketTicketingTicketsTicketIdReopenGet(\n      ticketId: number,\n      xToken: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'ticketId' is not null or undefined\n      if (ticketId === null || ticketId === undefined) {\n        throw new RequiredError(\n          \"ticketId\",\n          \"Required parameter ticketId was null or undefined when calling reopenTicketTicketingTicketsTicketIdReopenGet.\"\n        );\n      }\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling reopenTicketTicketingTicketsTicketIdReopenGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets/{ticket_id}/reopen`.replace(\n        `{${\"ticket_id\"}}`,\n        encodeURIComponent(String(ticketId))\n      );\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *    Search for tickets by name & category_id.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Search Tickets\n     * @param {string} xToken\n     * @param {string} [phrase] Retrieves ticket which their name or description contains this phrase.\n     * @param {number} [categoryId] Filter tickets based on category id\n     * @param {string} [searchRange] A range for search\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTicketsTicketingTicketsSearchGet(\n      xToken: string,\n      phrase?: string,\n      categoryId?: number,\n      searchRange?: string,\n      expandNames?: boolean,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling searchTicketsTicketingTicketsSearchGet.\"\n        );\n      }\n      const localVarPath = `/ticketing/tickets/search`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (phrase !== undefined) {\n        localVarQueryParameter[\"phrase\"] = phrase;\n      }\n\n      if (categoryId !== undefined) {\n        localVarQueryParameter[\"category_id\"] = categoryId;\n      }\n\n      if (searchRange !== undefined) {\n        localVarQueryParameter[\"search_range\"] = searchRange;\n      }\n\n      if (expandNames !== undefined) {\n        localVarQueryParameter[\"expand_names\"] = expandNames;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Upload File\n     * @param {string} xToken\n     * @param {any} file\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    uploadFileTicketingAttachmentsUploadPost(\n      xToken: string,\n      file: any,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling uploadFileTicketingAttachmentsUploadPost.\"\n        );\n      }\n      // verify required parameter 'file' is not null or undefined\n      if (file === null || file === undefined) {\n        throw new RequiredError(\n          \"file\",\n          \"Required parameter file was null or undefined when calling uploadFileTicketingAttachmentsUploadPost.\"\n        );\n      }\n      const localVarPath = `/ticketing/attachments/upload`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"POST\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n      const localVarFormParams = new FormData();\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      if (file !== undefined) {\n        localVarFormParams.append(\"file\", file as any);\n      }\n\n      localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = localVarFormParams;\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * SupportApi - functional programming interface\n * @export\n */\nexport const SupportApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Close Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    closeTicketTicketingTicketsTicketIdCloseGet(\n      ticketId: number,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).closeTicketTicketingTicketsTicketIdCloseGet(ticketId, xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    ## Creates a followup for the ticket with the provided id in the body\\'s ``items_id``.    ``Content`` can be HTML.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Followup\n     * @param {string} xToken\n     * @param {FollowUpCreateSchema} followUpCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFollowupTicketingFollowupsPost(\n      xToken: string,\n      followUpCreateSchema: FollowUpCreateSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<AddItemReturnSchema> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).createFollowupTicketingFollowupsPost(\n        xToken,\n        followUpCreateSchema,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Ticket\n     * @param {string} xToken\n     * @param {TicketCreateSchema} ticketCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTicketTicketingTicketsPost(\n      xToken: string,\n      ticketCreateSchema: TicketCreateSchema,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<AddItemReturnSchema> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).createTicketTicketingTicketsPost(xToken, ticketCreateSchema, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTicketingTicketsTicketIdGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).getTicketTicketingTicketsTicketIdGet(\n        ticketId,\n        xToken,\n        withDocuments,\n        expandNames,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket Time Line\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {SortTypeEnum} [timelineSortType]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      timelineSortType?: SortTypeEnum,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n        ticketId,\n        xToken,\n        withDocuments,\n        expandNames,\n        timelineSortType,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Categories\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCategoriesTicketingCategoryGet(\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).listCategoriesTicketingCategoryGet(xToken, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    ``range``: (default: 0-50): a string with a couple of number for     start and end of pagination separated by a \\'-\\'. Ex: 150-200. Optional.     <br>     <br>     <h4>Check response headers for: </h4><br>     - ``Content-Range`` offset – limit / count<br><br>     - ``Accept-Range`` itemtype max        This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Tickets\n     * @param {string} xToken\n     * @param {string} [itemRange]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTicketsTicketingTicketsGet(\n      xToken: string,\n      itemRange?: string,\n      expandNames?: boolean,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).listTicketsTicketingTicketsGet(xToken, itemRange, expandNames, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Reopen Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    reopenTicketTicketingTicketsTicketIdReopenGet(\n      ticketId: number,\n      xToken: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).reopenTicketTicketingTicketsTicketIdReopenGet(\n        ticketId,\n        xToken,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *    Search for tickets by name & category_id.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Search Tickets\n     * @param {string} xToken\n     * @param {string} [phrase] Retrieves ticket which their name or description contains this phrase.\n     * @param {number} [categoryId] Filter tickets based on category id\n     * @param {string} [searchRange] A range for search\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTicketsTicketingTicketsSearchGet(\n      xToken: string,\n      phrase?: string,\n      categoryId?: number,\n      searchRange?: string,\n      expandNames?: boolean,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).searchTicketsTicketingTicketsSearchGet(\n        xToken,\n        phrase,\n        categoryId,\n        searchRange,\n        expandNames,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Upload File\n     * @param {string} xToken\n     * @param {any} file\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    uploadFileTicketingAttachmentsUploadPost(\n      xToken: string,\n      file: any,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n      const localVarAxiosArgs = SupportApiAxiosParamCreator(\n        configuration\n      ).uploadFileTicketingAttachmentsUploadPost(xToken, file, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * SupportApi - factory interface\n * @export\n */\nexport const SupportApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Close Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    closeTicketTicketingTicketsTicketIdCloseGet(\n      ticketId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(\n        configuration\n      ).closeTicketTicketingTicketsTicketIdCloseGet(\n        ticketId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    ## Creates a followup for the ticket with the provided id in the body\\'s ``items_id``.    ``Content`` can be HTML.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Followup\n     * @param {string} xToken\n     * @param {FollowUpCreateSchema} followUpCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFollowupTicketingFollowupsPost(\n      xToken: string,\n      followUpCreateSchema: FollowUpCreateSchema,\n      options?: any\n    ): AxiosPromise<AddItemReturnSchema> {\n      return SupportApiFp(configuration).createFollowupTicketingFollowupsPost(\n        xToken,\n        followUpCreateSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Create Ticket\n     * @param {string} xToken\n     * @param {TicketCreateSchema} ticketCreateSchema\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTicketTicketingTicketsPost(\n      xToken: string,\n      ticketCreateSchema: TicketCreateSchema,\n      options?: any\n    ): AxiosPromise<AddItemReturnSchema> {\n      return SupportApiFp(configuration).createTicketTicketingTicketsPost(\n        xToken,\n        ticketCreateSchema,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTicketingTicketsTicketIdGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(configuration).getTicketTicketingTicketsTicketIdGet(\n        ticketId,\n        xToken,\n        withDocuments,\n        expandNames,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Get Ticket Time Line\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {boolean} [withDocuments]\n     * @param {boolean} [expandNames]\n     * @param {SortTypeEnum} [timelineSortType]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n      ticketId: number,\n      xToken: string,\n      withDocuments?: boolean,\n      expandNames?: boolean,\n      timelineSortType?: SortTypeEnum,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(\n        configuration\n      ).getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n        ticketId,\n        xToken,\n        withDocuments,\n        expandNames,\n        timelineSortType,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Categories\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCategoriesTicketingCategoryGet(\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(configuration).listCategoriesTicketingCategoryGet(\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    ``range``: (default: 0-50): a string with a couple of number for     start and end of pagination separated by a \\'-\\'. Ex: 150-200. Optional.     <br>     <br>     <h4>Check response headers for: </h4><br>     - ``Content-Range`` offset – limit / count<br><br>     - ``Accept-Range`` itemtype max        This endpoint can be used by following group(s):  ``customer``.\n     * @summary List Tickets\n     * @param {string} xToken\n     * @param {string} [itemRange]\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTicketsTicketingTicketsGet(\n      xToken: string,\n      itemRange?: string,\n      expandNames?: boolean,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(configuration).listTicketsTicketingTicketsGet(\n        xToken,\n        itemRange,\n        expandNames,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Reopen Ticket\n     * @param {number} ticketId\n     * @param {string} xToken\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    reopenTicketTicketingTicketsTicketIdReopenGet(\n      ticketId: number,\n      xToken: string,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(\n        configuration\n      ).reopenTicketTicketingTicketsTicketIdReopenGet(\n        ticketId,\n        xToken,\n        options\n      )(axios, basePath);\n    },\n    /**\n     *    Search for tickets by name & category_id.       This endpoint can be used by following group(s):  ``customer``.\n     * @summary Search Tickets\n     * @param {string} xToken\n     * @param {string} [phrase] Retrieves ticket which their name or description contains this phrase.\n     * @param {number} [categoryId] Filter tickets based on category id\n     * @param {string} [searchRange] A range for search\n     * @param {boolean} [expandNames]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTicketsTicketingTicketsSearchGet(\n      xToken: string,\n      phrase?: string,\n      categoryId?: number,\n      searchRange?: string,\n      expandNames?: boolean,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(configuration).searchTicketsTicketingTicketsSearchGet(\n        xToken,\n        phrase,\n        categoryId,\n        searchRange,\n        expandNames,\n        options\n      )(axios, basePath);\n    },\n    /**\n     * This endpoint can be used by following group(s):  ``customer``.\n     * @summary Upload File\n     * @param {string} xToken\n     * @param {any} file\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    uploadFileTicketingAttachmentsUploadPost(\n      xToken: string,\n      file: any,\n      options?: any\n    ): AxiosPromise<object> {\n      return SupportApiFp(\n        configuration\n      ).uploadFileTicketingAttachmentsUploadPost(\n        xToken,\n        file,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * SupportApi - interface\n * @export\n * @interface SupportApi\n */\nexport interface SupportApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Close Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  closeTicketTicketingTicketsTicketIdCloseGet(\n    ticketId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    ## Creates a followup for the ticket with the provided id in the body\\'s ``items_id``.    ``Content`` can be HTML.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Create Followup\n   * @param {string} xToken\n   * @param {FollowUpCreateSchema} followUpCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  createFollowupTicketingFollowupsPost(\n    xToken: string,\n    followUpCreateSchema: FollowUpCreateSchema,\n    options?: any\n  ): AxiosPromise<AddItemReturnSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Create Ticket\n   * @param {string} xToken\n   * @param {TicketCreateSchema} ticketCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  createTicketTicketingTicketsPost(\n    xToken: string,\n    ticketCreateSchema: TicketCreateSchema,\n    options?: any\n  ): AxiosPromise<AddItemReturnSchema>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Get Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {boolean} [withDocuments]\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  getTicketTicketingTicketsTicketIdGet(\n    ticketId: number,\n    xToken: string,\n    withDocuments?: boolean,\n    expandNames?: boolean,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Get Ticket Time Line\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {boolean} [withDocuments]\n   * @param {boolean} [expandNames]\n   * @param {SortTypeEnum} [timelineSortType]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n    ticketId: number,\n    xToken: string,\n    withDocuments?: boolean,\n    expandNames?: boolean,\n    timelineSortType?: SortTypeEnum,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary List Categories\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  listCategoriesTicketingCategoryGet(\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    ``range``: (default: 0-50): a string with a couple of number for     start and end of pagination separated by a \\'-\\'. Ex: 150-200. Optional.     <br>     <br>     <h4>Check response headers for: </h4><br>     - ``Content-Range`` offset – limit / count<br><br>     - ``Accept-Range`` itemtype max        This endpoint can be used by following group(s):  ``customer``.\n   * @summary List Tickets\n   * @param {string} xToken\n   * @param {string} [itemRange]\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  listTicketsTicketingTicketsGet(\n    xToken: string,\n    itemRange?: string,\n    expandNames?: boolean,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Reopen Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  reopenTicketTicketingTicketsTicketIdReopenGet(\n    ticketId: number,\n    xToken: string,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   *    Search for tickets by name & category_id.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Search Tickets\n   * @param {string} xToken\n   * @param {string} [phrase] Retrieves ticket which their name or description contains this phrase.\n   * @param {number} [categoryId] Filter tickets based on category id\n   * @param {string} [searchRange] A range for search\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  searchTicketsTicketingTicketsSearchGet(\n    xToken: string,\n    phrase?: string,\n    categoryId?: number,\n    searchRange?: string,\n    expandNames?: boolean,\n    options?: any\n  ): AxiosPromise<object>;\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Upload File\n   * @param {string} xToken\n   * @param {any} file\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApiInterface\n   */\n  uploadFileTicketingAttachmentsUploadPost(\n    xToken: string,\n    file: any,\n    options?: any\n  ): AxiosPromise<object>;\n}\n\n/**\n * SupportApi - object-oriented interface\n * @export\n * @class SupportApi\n * @extends {BaseAPI}\n */\nexport class SupportApi extends BaseAPI implements SupportApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Close Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public closeTicketTicketingTicketsTicketIdCloseGet(\n    ticketId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).closeTicketTicketingTicketsTicketIdCloseGet(\n      ticketId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    ## Creates a followup for the ticket with the provided id in the body\\'s ``items_id``.    ``Content`` can be HTML.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Create Followup\n   * @param {string} xToken\n   * @param {FollowUpCreateSchema} followUpCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public createFollowupTicketingFollowupsPost(\n    xToken: string,\n    followUpCreateSchema: FollowUpCreateSchema,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).createFollowupTicketingFollowupsPost(\n      xToken,\n      followUpCreateSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Create Ticket\n   * @param {string} xToken\n   * @param {TicketCreateSchema} ticketCreateSchema\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public createTicketTicketingTicketsPost(\n    xToken: string,\n    ticketCreateSchema: TicketCreateSchema,\n    options?: any\n  ) {\n    return SupportApiFp(this.configuration).createTicketTicketingTicketsPost(\n      xToken,\n      ticketCreateSchema,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Get Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {boolean} [withDocuments]\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public getTicketTicketingTicketsTicketIdGet(\n    ticketId: number,\n    xToken: string,\n    withDocuments?: boolean,\n    expandNames?: boolean,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).getTicketTicketingTicketsTicketIdGet(\n      ticketId,\n      xToken,\n      withDocuments,\n      expandNames,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Get Ticket Time Line\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {boolean} [withDocuments]\n   * @param {boolean} [expandNames]\n   * @param {SortTypeEnum} [timelineSortType]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n    ticketId: number,\n    xToken: string,\n    withDocuments?: boolean,\n    expandNames?: boolean,\n    timelineSortType?: SortTypeEnum,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).getTicketTimeLineTicketingTicketsTicketIdTimelineGet(\n      ticketId,\n      xToken,\n      withDocuments,\n      expandNames,\n      timelineSortType,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary List Categories\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public listCategoriesTicketingCategoryGet(xToken: string, options?: any) {\n    return SupportApiFp(this.configuration).listCategoriesTicketingCategoryGet(\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    ``range``: (default: 0-50): a string with a couple of number for     start and end of pagination separated by a \\'-\\'. Ex: 150-200. Optional.     <br>     <br>     <h4>Check response headers for: </h4><br>     - ``Content-Range`` offset – limit / count<br><br>     - ``Accept-Range`` itemtype max        This endpoint can be used by following group(s):  ``customer``.\n   * @summary List Tickets\n   * @param {string} xToken\n   * @param {string} [itemRange]\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public listTicketsTicketingTicketsGet(\n    xToken: string,\n    itemRange?: string,\n    expandNames?: boolean,\n    options?: any\n  ) {\n    return SupportApiFp(this.configuration).listTicketsTicketingTicketsGet(\n      xToken,\n      itemRange,\n      expandNames,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Reopen Ticket\n   * @param {number} ticketId\n   * @param {string} xToken\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public reopenTicketTicketingTicketsTicketIdReopenGet(\n    ticketId: number,\n    xToken: string,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).reopenTicketTicketingTicketsTicketIdReopenGet(\n      ticketId,\n      xToken,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   *    Search for tickets by name & category_id.       This endpoint can be used by following group(s):  ``customer``.\n   * @summary Search Tickets\n   * @param {string} xToken\n   * @param {string} [phrase] Retrieves ticket which their name or description contains this phrase.\n   * @param {number} [categoryId] Filter tickets based on category id\n   * @param {string} [searchRange] A range for search\n   * @param {boolean} [expandNames]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public searchTicketsTicketingTicketsSearchGet(\n    xToken: string,\n    phrase?: string,\n    categoryId?: number,\n    searchRange?: string,\n    expandNames?: boolean,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).searchTicketsTicketingTicketsSearchGet(\n      xToken,\n      phrase,\n      categoryId,\n      searchRange,\n      expandNames,\n      options\n    )(this.axios, this.basePath);\n  }\n\n  /**\n   * This endpoint can be used by following group(s):  ``customer``.\n   * @summary Upload File\n   * @param {string} xToken\n   * @param {any} file\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupportApi\n   */\n  public uploadFileTicketingAttachmentsUploadPost(\n    xToken: string,\n    file: any,\n    options?: any\n  ) {\n    return SupportApiFp(\n      this.configuration\n    ).uploadFileTicketingAttachmentsUploadPost(\n      xToken,\n      file,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n\n/**\n * TransactionsApi - axios parameter creator\n * @export\n */\nexport const TransactionsApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Transactions\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTransactionsTransactionsGet(\n      xToken: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'xToken' is not null or undefined\n      if (xToken === null || xToken === undefined) {\n        throw new RequiredError(\n          \"xToken\",\n          \"Required parameter xToken was null or undefined when calling listTransactionsTransactionsGet.\"\n        );\n      }\n      const localVarPath = `/transactions`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (customerId !== undefined) {\n        localVarQueryParameter[\"customerId\"] = customerId;\n      }\n\n      if (start !== undefined) {\n        localVarQueryParameter[\"start\"] = start;\n      }\n\n      if (end !== undefined) {\n        localVarQueryParameter[\"end\"] = end;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (xToken !== undefined && xToken !== null) {\n        localVarHeaderParameter[\"X-Token\"] = String(xToken);\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * TransactionsApi - functional programming interface\n * @export\n */\nexport const TransactionsApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Transactions\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTransactionsTransactionsGet(\n      xToken: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<TransactionListResponseSchema> {\n      const localVarAxiosArgs = TransactionsApiAxiosParamCreator(\n        configuration\n      ).listTransactionsTransactionsGet(\n        xToken,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      );\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * TransactionsApi - factory interface\n * @export\n */\nexport const TransactionsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * This endpoint can be used by following group(s):  ``customer``,``admin``.\n     * @summary List Transactions\n     * @param {string} xToken\n     * @param {string} [customerId]\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {number} [page]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTransactionsTransactionsGet(\n      xToken: string,\n      customerId?: string,\n      start?: number,\n      end?: number,\n      page?: number,\n      options?: any\n    ): AxiosPromise<TransactionListResponseSchema> {\n      return TransactionsApiFp(configuration).listTransactionsTransactionsGet(\n        xToken,\n        customerId,\n        start,\n        end,\n        page,\n        options\n      )(axios, basePath);\n    },\n  };\n};\n\n/**\n * TransactionsApi - interface\n * @export\n * @interface TransactionsApi\n */\nexport interface TransactionsApiInterface {\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Transactions\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApiInterface\n   */\n  listTransactionsTransactionsGet(\n    xToken: string,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ): AxiosPromise<TransactionListResponseSchema>;\n}\n\n/**\n * TransactionsApi - object-oriented interface\n * @export\n * @class TransactionsApi\n * @extends {BaseAPI}\n */\nexport class TransactionsApi\n  extends BaseAPI\n  implements TransactionsApiInterface\n{\n  /**\n   * This endpoint can be used by following group(s):  ``customer``,``admin``.\n   * @summary List Transactions\n   * @param {string} xToken\n   * @param {string} [customerId]\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {number} [page]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n  public listTransactionsTransactionsGet(\n    xToken: string,\n    customerId?: string,\n    start?: number,\n    end?: number,\n    page?: number,\n    options?: any\n  ) {\n    return TransactionsApiFp(\n      this.configuration\n    ).listTransactionsTransactionsGet(\n      xToken,\n      customerId,\n      start,\n      end,\n      page,\n      options\n    )(this.axios, this.basePath);\n  }\n}\n","// tslint:disable\n/**\n * AbrNOC Gateway\n * API gateway for AbrNOC panels.\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    basePath?: string;\n    baseOptions?: any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n}\n","import { Configuration, PlansApi } from \"@/api\";\n\nexport const conf = new Configuration({\n  basePath: process.env.VUE_APP_API,\n});\n\nconst plans = new PlansApi(conf);\n\nexport { plans };\n","import { plans } from \"@/plugins/api\";\nimport { ActionTree } from \"vuex\";\nimport { PlansMutations } from \"./mutations\";\nimport { PlansState } from \"./types\";\n\nexport enum PlansActions {\n  GET_PLANS = \"fetchPlans\",\n}\n\nexport const actions: ActionTree<PlansState, any> = {\n  async [PlansActions.GET_PLANS]({ commit }) {\n    commit(PlansMutations.SET_PLANS_LOADING, true);\n    await plans\n      .listPlansPlansGet()\n      .then((res) => {\n        commit(PlansMutations.SET_PLANS, res.data.plans);\n      })\n      .finally(() => {\n        commit(PlansMutations.SET_PLANS_LOADING, false);\n      });\n  },\n};\n","import { Module } from \"vuex\";\nimport { PlansState } from \"./types\";\nimport { mutations } from \"./mutations\";\nimport { actions } from \"./actions\";\n\nconst state: PlansState = {\n  all: [],\n  loading: false,\n};\n\nexport const plans: Module<PlansState, any> = {\n  state,\n  mutations,\n  actions,\n};\n","import { MutationTree } from \"vuex\";\nimport { ToastsState } from \"./types\";\n\nexport enum ToastsMutations {\n  SET_TOAST = \"setToast\",\n}\n\nexport const mutations: MutationTree<ToastsState> = {\n  [ToastsMutations.SET_TOAST](state, payload) {\n    state.color = payload.color;\n    state.show = payload.show;\n    state.text = payload.text;\n    state.timeout = payload.timeout;\n  },\n};\n","import { ActionTree } from \"vuex\";\nimport { ToastsState } from \"./types\";\n\nexport enum ToastsActions {\n  SHOW_TOAST = \"showToast\",\n}\n\nexport const actions: ActionTree<ToastsState, any> = {\n  [ToastsActions.SHOW_TOAST](payload) {\n    console.log(payload);\n  },\n};\n","import { Module } from \"vuex\";\nimport { ToastsState } from \"./types\";\nimport { mutations } from \"./mutations\";\nimport { actions } from \"./actions\";\n\nconst state: ToastsState = {\n  color: \"warning\",\n  show: false,\n  text: \"\",\n  timeout: 4000,\n};\n\nexport const toast: Module<ToastsState, any> = {\n  state,\n  mutations,\n  actions,\n};\n","import { MutationTree } from \"vuex\";\nimport { AppState } from \"./types\";\n\nexport enum MutationApp {\n  SET_CURRENT_REGION = \"setCurrentRegion\",\n  SET_CURRENT_PLAN = \"setCurrentPlan\",\n  SET_CURRENT_OS = \"setCurrentOS\",\n  SET_HOST_NAME = \"setHostName\",\n  SET_QUANTITY = \"setQuantity\",\n  SET_IPV4 = \"setIpv4\",\n  SET_SSH_KEY = \"setSSHKey\",\n}\n\nexport const mutations: MutationTree<AppState> = {\n  [MutationApp.SET_CURRENT_REGION](state, payload) {\n    state.instances.currentRegion = payload;\n  },\n  [MutationApp.SET_CURRENT_PLAN](state, payload) {\n    state.instances.currentPlan = payload;\n  },\n  [MutationApp.SET_CURRENT_OS](state, payload) {\n    state.instances.currentOS = payload;\n  },\n  [MutationApp.SET_HOST_NAME](state, payload) {\n    state.instances.hostName = payload;\n  },\n  [MutationApp.SET_QUANTITY](state, payload) {\n    state.instances.quantity = payload;\n  },\n  [MutationApp.SET_IPV4](state, payload) {\n    state.instances.ipv4 = payload;\n  },\n  [MutationApp.SET_SSH_KEY](state, payload) {\n    state.instances.sshList = payload;\n  },\n};\n","import { Module } from \"vuex\";\nimport { AppState } from \"./types\";\nimport { mutations } from \"./mutations\";\n\nconst state: AppState = {\n  instances: {\n    currentRegion: null,\n    currentPlan: null,\n    currentOS: null,\n    sshList: null,\n    hostName: \"\",\n    ipv4: null,\n    quantity: 1,\n  },\n};\n\nexport const app: Module<AppState, any> = {\n  state,\n  mutations,\n};\n","import Vue from \"vue\";\nimport Vuex, { StoreOptions } from \"vuex\";\nimport { plans } from \"./plans\";\nimport { toast } from \"./toast\";\nimport { app } from \"./app\";\n\nVue.use(Vuex);\n\nconst store: StoreOptions<any> = {\n  modules: {\n    app,\n    plans,\n    toast,\n  },\n};\n\nexport default new Vuex.Store(store);\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { computed, defineComponent, watch } from \"@vue/composition-api\";\nimport store from \"./store\";\n\nexport default defineComponent({\n  name: \"App\",\n  setup() {\n    const state = store.state;\n    const toast = computed(() => state.toast);\n    return {\n      toast\n    }\n  }\n})\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=72207b62&\"\nimport script from \"./App.vue?vue&type=script&lang=ts&\"\nexport * from \"./App.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VSnackbar } from 'vuetify/lib/components/VSnackbar';\ninstallComponents(component, {VSnackbar})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',[_c('v-navigation-drawer',{staticStyle:{\"height\":\"calc(100vh - 60px)\",\"margin-top\":\"60px\",\"position\":\"fixed\"},attrs:{\"width\":\"220\",\"permanent\":\"\",\"absolute\":\"\"}},[_c('v-list',{staticClass:\"pb-0 px-5 pt-10\",attrs:{\"nav\":\"\",\"dense\":\"\"}},[_c('v-list-item-group',{attrs:{\"active-class\":\"item-active\"},model:{value:(_vm.selectedItem),callback:function ($$v) {_vm.selectedItem=$$v},expression:\"selectedItem\"}},[_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"dashboard\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{staticClass:\"primary--text-custom\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-view-dashboard-outline\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Dashboard\")])],1),_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"instances\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-plus-box-outline\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Instances\")])],1),_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"snapshots\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-content-copy\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Snapshots\")])],1),_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"sshkeys\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-key-outline\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"SSH Keys\")])],1),_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",staticStyle:{\"opacity\":\"0.7\"},attrs:{\"value\":\"volume\",\"disabled\":\"\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-dns-outline\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Volume\")])],1),_c('v-divider',{staticClass:\"my-1\"}),_c('v-list-group',{staticClass:\"my-1\",attrs:{\"dense\":\"\"},scopedSlots:_vm._u([{key:\"prependIcon\",fn:function(){return [_c('v-icon',{staticStyle:{\"margin-left\":\"8px\"},attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-currency-usd\")])]},proxy:true},{key:\"activator\",fn:function(){return [_c('v-list-item-title',{staticClass:\"ml-n1 mr-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Billing \")])]},proxy:true}])},[_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"option-1\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-star\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Option 1 \")])],1),_c('v-list-item',{staticClass:\"list-item-spacing mb-1\",attrs:{\"value\":\"option-2\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-star\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Option 2 \")])],1)],1),_c('v-list-item',{staticClass:\"list-item-spacing my-1\",attrs:{\"value\":\"networking\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-wifi\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Networking\")])],1),_c('v-list-item',{staticClass:\"list-item-spacing my-1\",attrs:{\"value\":\"report\",\"link\":\"\"}},[_c('v-list-item-icon',{staticStyle:{\"margin-left\":\"9px\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-file-chart-outline\")])],1),_c('v-list-item-title',{staticClass:\"ml-n4 text-body-2 primary--text-custom\"},[_vm._v(\"Report\")])],1)],1)],1),_c('v-list',{staticClass:\"text-primary pt-10 px-5 mt-16\",attrs:{\"nav\":\"\"}},[_c('v-list-item-group',[_c('v-list-item',{staticClass:\"custom-outline-border list-item-spacing mb-1 px-4 py-1\",attrs:{\"dense\":\"\"}},[_c('v-list-item-icon',{staticClass:\"mr-4\"},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-headphones\")])],1),_c('v-list-item-content',[_c('v-list-item-title',{staticClass:\"body-2 font-weight-medium primary--text\"},[_vm._v(\"Support \")])],1)],1),_c('v-list-item',{staticClass:\"custom-outline-border list-item-spacing mb-1 px-4 py-1\",attrs:{\"dense\":\"\"}},[_c('v-list-item-icon',{staticClass:\"mr-4\"},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-help-circle-outline\")])],1),_c('v-list-item-content',[_c('v-list-item-title',{staticClass:\"body-2 font-weight-medium primary--text\"},[_vm._v(\"Help\")])],1)],1)],1)],1)],1),_c('v-app-bar',{staticClass:\"pr-8 rounded-0\",staticStyle:{\"border-bottom\":\"1px solid rgba(0,0,0,0.21) !important\"},attrs:{\"app\":\"\",\"height\":\"60\",\"elevation\":0,\"color\":\"white\"}},[_c('div',{staticClass:\"logo-box\"},[_c('svg',{attrs:{\"width\":\"131\",\"height\":\"38\",\"viewBox\":\"0 0 131 38\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('path',{attrs:{\"d\":\"M67.1563 25.5886C69.7834 25.5886 71.8869 24.2508 72.934 21.7809L70.7369 20.8827C70.0264 22.6603 68.8578 23.3339 67.1563 23.3339C64.3236 23.3339 63.1177 21.3225 63.1177 18.6935C63.1177 16.2424 64.3236 14.2309 67.1189 14.2309C68.8391 14.2309 70.2041 14.9044 70.6996 16.6446L72.9152 15.7652C71.8495 13.2953 69.7552 11.9668 67.1376 11.9668C62.7903 11.9668 60.7617 15.1664 60.7617 18.7871C60.7617 22.4171 62.8091 25.5886 67.1563 25.5886ZM76.4491 25.5886C76.9913 25.5886 77.6738 25.495 78.1507 25.4016V23.4836C77.9075 23.521 77.6551 23.5397 77.5242 23.5397C77.0661 23.5397 76.7763 23.3526 76.7763 22.9129V12.182H74.4953V23.5397C74.4953 25.1864 75.374 25.5886 76.4491 25.5886ZM83.8253 25.5886C86.7143 25.5886 88.612 23.3526 88.612 20.7049C88.612 18.0667 86.7143 15.8588 83.8253 15.8588C80.9366 15.8588 79.0387 18.0667 79.0387 20.7049C79.0387 23.3526 80.9366 25.5886 83.8253 25.5886ZM83.8253 23.6239C82.1052 23.6239 81.4134 22.2393 81.4134 20.7049C81.4134 19.1707 82.1052 17.8328 83.8253 17.8328C85.5549 17.8328 86.2374 19.1707 86.2374 20.7049C86.2374 22.2393 85.5549 23.6239 83.8253 23.6239ZM93.5483 25.5886C94.4738 25.5886 95.5583 25.2332 96.3061 24.3069V25.4016H98.5686V16.0552H96.3061V21.1635C96.3061 22.7913 95.4835 23.4836 94.2026 23.4836C93.034 23.4836 92.4171 22.6041 92.4171 21.3785V16.0552H90.1639V21.6687C90.1639 23.624 91.0988 25.5886 93.5483 25.5886ZM104.533 25.5886C105.562 25.5886 106.599 25.2332 107.244 24.3444L107.347 25.4016H109.469V12.182H107.151V16.9908C106.506 16.1862 105.468 15.8588 104.496 15.8588C101.906 15.8588 100.485 18.1415 100.485 20.7237C100.485 23.3339 101.906 25.5886 104.533 25.5886ZM105.085 23.521C103.514 23.521 102.804 22.2955 102.804 20.7237C102.804 19.1707 103.514 17.9264 105.085 17.9264C106.655 17.9264 107.347 19.1519 107.347 20.7237C107.347 22.3141 106.655 23.521 105.085 23.521Z\",\"fill\":\"#0D2D51\"}}),_c('path',{attrs:{\"d\":\"M119.588 16.0566H111.623V17.9652H116.634L111.352 23.8874V25.403H119.588V23.485H114.521L119.588 17.6845V16.0566ZM122.178 29.4259H124.664L130.003 16.0566H127.497L125.104 22.5495L122.748 16.0566H120.242L123.898 25.1504L122.178 29.4259Z\",\"fill\":\"#506781\"}}),_c('path',{attrs:{\"d\":\"M46.8755 11.2667C49.8466 11.2667 52.255 8.85653 52.255 5.88338C52.255 2.91022 49.8466 0.5 46.8755 0.5C43.9045 0.5 41.4961 2.91022 41.4961 5.88338C41.4961 8.85653 43.9045 11.2667 46.8755 11.2667Z\",\"fill\":\"#FFD80C\"}}),_c('path',{attrs:{\"d\":\"M52.2095 27.088C52.2073 24.2726 51.0906 21.573 49.1038 19.5798C47.117 17.5866 44.422 16.4624 41.6086 16.4531C40.4704 16.4903 42.2674 19.9141 42.2674 21.7751C42.2674 21.8016 42.5123 21.824 42.5123 21.8527C43.2718 21.9885 43.9927 22.288 44.6249 22.7307C45.257 23.1733 45.7854 23.7484 46.173 24.4159C46.5608 25.0834 46.7988 25.8274 46.8701 26.5963C46.9416 27.365 46.845 28.1402 46.587 28.8677C46.329 29.5955 45.9157 30.2581 45.3759 30.8099C44.8362 31.3616 44.183 31.7891 43.4614 32.0627C42.74 32.3364 41.9676 32.4496 41.1981 32.3943C40.4284 32.3392 39.68 32.1169 39.0049 31.7432C38.0184 31.7595 36.7886 31.3113 35.7658 32.2155C34.743 33.1197 34.3431 33.9131 34.9133 35.3592C36.7967 36.876 39.1378 37.7099 41.5552 37.7252H41.5815C42.9775 37.7257 44.3599 37.4508 45.6496 36.9163C46.9393 36.3819 48.1111 35.5984 49.0982 34.6105C50.0852 33.6227 50.868 32.4498 51.4019 31.159C51.9356 29.8683 52.2102 28.4849 52.2095 27.088Z\",\"fill\":\"#19C748\"}}),_c('path',{attrs:{\"d\":\"M26.5735 5.81641C22.6238 5.81579 18.8147 7.28242 15.884 9.93211C12.9533 12.5818 11.1099 16.2258 10.7109 20.1581H16.0687C16.3767 18.1471 17.2549 16.2666 18.5986 14.7399C19.9425 13.2133 21.6958 12.1043 23.6505 11.5448C25.6051 10.9852 27.6792 10.9985 29.6265 11.583C31.5739 12.1675 33.3128 13.2988 34.637 14.8425C35.9612 16.3863 36.8152 18.2778 37.0974 20.2927C37.3798 22.3075 37.0787 24.361 36.2299 26.2098C35.381 28.0585 34.0201 29.6248 32.3086 30.7228C30.597 31.8208 28.6065 32.4044 26.5735 32.4045H17.3621V37.722H26.5735C30.8014 37.722 34.8561 36.0412 37.8457 33.0494C40.8352 30.0578 42.5147 26.0001 42.5147 21.7692C42.5147 17.5382 40.8352 13.4806 37.8457 10.4889C34.8561 7.49714 30.8014 5.81641 26.5735 5.81641Z\",\"fill\":\"#FB0F01\"}}),_c('path',{attrs:{\"d\":\"M17.0033 37.7229H10.6265C8.52466 37.7228 6.4701 37.099 4.72258 35.9303C2.97506 34.7617 1.61306 33.1007 0.808806 31.1575C0.00455265 29.2143 -0.205837 27.076 0.204242 25.0131C0.61432 22.9501 1.62645 21.0553 3.11265 19.568C4.59884 18.0808 6.49237 17.0679 8.55377 16.6576C10.6152 16.2471 12.7519 16.4576 14.6937 17.2625C16.6356 18.0674 18.2954 19.4304 19.4632 21.1792C20.631 22.928 21.2543 24.984 21.2545 27.0873V33.4687C21.2516 34.5961 20.8028 35.6765 20.0062 36.4737C19.2096 37.271 18.1298 37.72 17.0033 37.7229ZM10.6265 21.7699C9.21719 21.7699 7.86566 22.3301 6.86916 23.3272C5.87267 24.3245 5.31284 25.677 5.31284 27.0873C5.31284 28.4975 5.87267 29.8501 6.86916 30.8473C7.86566 31.8445 9.21719 32.4047 10.6265 32.4047H15.9401V27.0873C15.936 25.6782 15.3748 24.3281 14.3792 23.3318C13.3836 22.3354 12.0345 21.7739 10.6265 21.7699Z\",\"fill\":\"#2C5EFF\"}})])]),_c('v-breadcrumbs',{staticClass:\"px-0 text--primary\"},[_c('v-breadcrumbs-item',{staticClass:\"text-subtitle-1\",attrs:{\"disabled\":\"\"}},[_vm._v(\"Instances\")]),_c('span',{staticClass:\"text--grey mx-3\"},[_vm._v(\"/\")]),_c('v-breadcrumbs-item',{staticClass:\"font-weight-regular\"},[_vm._v(\"New Instance\")])],1),_c('v-spacer'),_c('v-tooltip',{attrs:{\"bottom\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('v-btn',_vm._g(_vm._b({staticClass:\"mr-3\",attrs:{\"icon\":\"\",\"dense\":\"\"}},'v-btn',attrs,false),on),[_c('v-badge',{attrs:{\"offset-x\":\"9\",\"offset-y\":\"7\",\"dot\":\"\",\"bordered\":\"\",\"color\":\"pink\"}},[_c('v-icon',{attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-bell-outline\")])],1)],1)]}}])},[_c('span',[_vm._v(\"Notifications\")])]),_c('v-btn',{staticClass:\"px-2 py-3 pr-7\",attrs:{\"color\":\"grey\",\"outlined\":\"\",\"dense\":\"\"}},[_c('v-icon',{staticClass:\"mr-1\",attrs:{\"color\":\"grey\"}},[_vm._v(\"mdi-plus\")]),_c('span',{staticClass:\"font-weight-medium mr-4\",staticStyle:{\"color\":\"#2F3857\"}},[_vm._v(\" $125.50 \")])],1),_c('v-divider',{staticClass:\"my-auto mx-4\",staticStyle:{\"height\":\"20px\"},attrs:{\"vertical\":\"\",\"inset\":true}}),_c('v-avatar',{attrs:{\"color\":\"grey lighten-1\",\"size\":\"36\"}},[_c('v-icon',{attrs:{\"color\":\"white\"}},[_vm._v(\"mdi-account\")])],1)],1),_c('v-main',[_c('router-view')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <v-app>\n        <v-navigation-drawer width=\"220\" permanent style=\"height: calc(100vh - 60px);margin-top: 60px;position:fixed;\"\n            absolute>\n            <v-list class=\"pb-0 px-5 pt-10\" nav dense>\n                <v-list-item-group active-class=\"item-active\" v-model=\"selectedItem\">\n                    <v-list-item value=\"dashboard\" link class=\"list-item-spacing mb-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense class=\"primary--text-custom\">mdi-view-dashboard-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Dashboard</v-list-item-title>\n                    </v-list-item>\n                    <v-list-item value=\"instances\" link class=\"list-item-spacing mb-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-plus-box-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Instances</v-list-item-title>\n                    </v-list-item>\n                    <v-list-item value=\"snapshots\" link class=\"list-item-spacing mb-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-content-copy</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Snapshots</v-list-item-title>\n                    </v-list-item>\n                    <v-list-item value=\"sshkeys\" link class=\"list-item-spacing mb-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-key-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">SSH Keys</v-list-item-title>\n                    </v-list-item>\n                    <v-list-item value=\"volume\" disabled style=\"opacity:0.7;\" link class=\"list-item-spacing mb-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-dns-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Volume</v-list-item-title>\n                    </v-list-item>\n                    <v-divider class=\"my-1\"></v-divider>\n                    <v-list-group dense class=\"my-1\">\n                        <template v-slot:prependIcon>\n                            <v-icon dense style=\"margin-left:8px;\">mdi-currency-usd</v-icon>\n                        </template>\n                        <template v-slot:activator>\n                            <v-list-item-title class=\"ml-n1 mr-n4 text-body-2 primary--text-custom\">Billing\n                            </v-list-item-title>\n                        </template>\n                        <v-list-item value=\"option-1\" link class=\"list-item-spacing mb-1\">\n                            <v-list-item-icon style=\"margin-left:9px;\">\n                                <v-icon dense>mdi-star</v-icon>\n                            </v-list-item-icon>\n                            <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Option 1\n                            </v-list-item-title>\n                        </v-list-item>\n                        <v-list-item value=\"option-2\" link class=\"list-item-spacing mb-1\">\n                            <v-list-item-icon style=\"margin-left:9px;\">\n                                <v-icon dense>mdi-star</v-icon>\n                            </v-list-item-icon>\n                            <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Option 2\n                            </v-list-item-title>\n                        </v-list-item>\n                    </v-list-group>\n                    <v-list-item value=\"networking\" link class=\"list-item-spacing my-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-wifi</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Networking</v-list-item-title>\n                    </v-list-item>\n                    <v-list-item value=\"report\" link class=\"list-item-spacing my-1\">\n                        <v-list-item-icon style=\"margin-left:9px;\">\n                            <v-icon dense>mdi-file-chart-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-title class=\"ml-n4 text-body-2 primary--text-custom\">Report</v-list-item-title>\n                    </v-list-item>\n                </v-list-item-group>\n            </v-list>\n            <v-list nav class=\"text-primary pt-10 px-5 mt-16\">\n                <v-list-item-group>\n                    <v-list-item class=\"custom-outline-border list-item-spacing mb-1 px-4 py-1\" dense>\n                        <v-list-item-icon class=\"mr-4\">\n                            <v-icon dense>mdi-headphones</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-content>\n                            <v-list-item-title class=\"body-2 font-weight-medium primary--text\">Support\n                            </v-list-item-title>\n                        </v-list-item-content>\n                    </v-list-item>\n                    <v-list-item class=\"custom-outline-border list-item-spacing mb-1 px-4 py-1\" dense>\n                        <v-list-item-icon class=\"mr-4\">\n                            <v-icon dense>mdi-help-circle-outline</v-icon>\n                        </v-list-item-icon>\n                        <v-list-item-content>\n                            <v-list-item-title class=\"body-2 font-weight-medium primary--text\">Help</v-list-item-title>\n                        </v-list-item-content>\n                    </v-list-item>\n                </v-list-item-group>\n            </v-list>\n        </v-navigation-drawer>\n        <v-app-bar app height=\"60\" :elevation=\"0\" class=\"pr-8 rounded-0\"\n            style=\"border-bottom: 1px solid rgba(0,0,0,0.21) !important;\" color=\"white\">\n            <div class=\"logo-box\">\n                <svg width=\"131\" height=\"38\" viewBox=\"0 0 131 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M67.1563 25.5886C69.7834 25.5886 71.8869 24.2508 72.934 21.7809L70.7369 20.8827C70.0264 22.6603 68.8578 23.3339 67.1563 23.3339C64.3236 23.3339 63.1177 21.3225 63.1177 18.6935C63.1177 16.2424 64.3236 14.2309 67.1189 14.2309C68.8391 14.2309 70.2041 14.9044 70.6996 16.6446L72.9152 15.7652C71.8495 13.2953 69.7552 11.9668 67.1376 11.9668C62.7903 11.9668 60.7617 15.1664 60.7617 18.7871C60.7617 22.4171 62.8091 25.5886 67.1563 25.5886ZM76.4491 25.5886C76.9913 25.5886 77.6738 25.495 78.1507 25.4016V23.4836C77.9075 23.521 77.6551 23.5397 77.5242 23.5397C77.0661 23.5397 76.7763 23.3526 76.7763 22.9129V12.182H74.4953V23.5397C74.4953 25.1864 75.374 25.5886 76.4491 25.5886ZM83.8253 25.5886C86.7143 25.5886 88.612 23.3526 88.612 20.7049C88.612 18.0667 86.7143 15.8588 83.8253 15.8588C80.9366 15.8588 79.0387 18.0667 79.0387 20.7049C79.0387 23.3526 80.9366 25.5886 83.8253 25.5886ZM83.8253 23.6239C82.1052 23.6239 81.4134 22.2393 81.4134 20.7049C81.4134 19.1707 82.1052 17.8328 83.8253 17.8328C85.5549 17.8328 86.2374 19.1707 86.2374 20.7049C86.2374 22.2393 85.5549 23.6239 83.8253 23.6239ZM93.5483 25.5886C94.4738 25.5886 95.5583 25.2332 96.3061 24.3069V25.4016H98.5686V16.0552H96.3061V21.1635C96.3061 22.7913 95.4835 23.4836 94.2026 23.4836C93.034 23.4836 92.4171 22.6041 92.4171 21.3785V16.0552H90.1639V21.6687C90.1639 23.624 91.0988 25.5886 93.5483 25.5886ZM104.533 25.5886C105.562 25.5886 106.599 25.2332 107.244 24.3444L107.347 25.4016H109.469V12.182H107.151V16.9908C106.506 16.1862 105.468 15.8588 104.496 15.8588C101.906 15.8588 100.485 18.1415 100.485 20.7237C100.485 23.3339 101.906 25.5886 104.533 25.5886ZM105.085 23.521C103.514 23.521 102.804 22.2955 102.804 20.7237C102.804 19.1707 103.514 17.9264 105.085 17.9264C106.655 17.9264 107.347 19.1519 107.347 20.7237C107.347 22.3141 106.655 23.521 105.085 23.521Z\"\n                        fill=\"#0D2D51\" />\n                    <path\n                        d=\"M119.588 16.0566H111.623V17.9652H116.634L111.352 23.8874V25.403H119.588V23.485H114.521L119.588 17.6845V16.0566ZM122.178 29.4259H124.664L130.003 16.0566H127.497L125.104 22.5495L122.748 16.0566H120.242L123.898 25.1504L122.178 29.4259Z\"\n                        fill=\"#506781\" />\n                    <path\n                        d=\"M46.8755 11.2667C49.8466 11.2667 52.255 8.85653 52.255 5.88338C52.255 2.91022 49.8466 0.5 46.8755 0.5C43.9045 0.5 41.4961 2.91022 41.4961 5.88338C41.4961 8.85653 43.9045 11.2667 46.8755 11.2667Z\"\n                        fill=\"#FFD80C\" />\n                    <path\n                        d=\"M52.2095 27.088C52.2073 24.2726 51.0906 21.573 49.1038 19.5798C47.117 17.5866 44.422 16.4624 41.6086 16.4531C40.4704 16.4903 42.2674 19.9141 42.2674 21.7751C42.2674 21.8016 42.5123 21.824 42.5123 21.8527C43.2718 21.9885 43.9927 22.288 44.6249 22.7307C45.257 23.1733 45.7854 23.7484 46.173 24.4159C46.5608 25.0834 46.7988 25.8274 46.8701 26.5963C46.9416 27.365 46.845 28.1402 46.587 28.8677C46.329 29.5955 45.9157 30.2581 45.3759 30.8099C44.8362 31.3616 44.183 31.7891 43.4614 32.0627C42.74 32.3364 41.9676 32.4496 41.1981 32.3943C40.4284 32.3392 39.68 32.1169 39.0049 31.7432C38.0184 31.7595 36.7886 31.3113 35.7658 32.2155C34.743 33.1197 34.3431 33.9131 34.9133 35.3592C36.7967 36.876 39.1378 37.7099 41.5552 37.7252H41.5815C42.9775 37.7257 44.3599 37.4508 45.6496 36.9163C46.9393 36.3819 48.1111 35.5984 49.0982 34.6105C50.0852 33.6227 50.868 32.4498 51.4019 31.159C51.9356 29.8683 52.2102 28.4849 52.2095 27.088Z\"\n                        fill=\"#19C748\" />\n                    <path\n                        d=\"M26.5735 5.81641C22.6238 5.81579 18.8147 7.28242 15.884 9.93211C12.9533 12.5818 11.1099 16.2258 10.7109 20.1581H16.0687C16.3767 18.1471 17.2549 16.2666 18.5986 14.7399C19.9425 13.2133 21.6958 12.1043 23.6505 11.5448C25.6051 10.9852 27.6792 10.9985 29.6265 11.583C31.5739 12.1675 33.3128 13.2988 34.637 14.8425C35.9612 16.3863 36.8152 18.2778 37.0974 20.2927C37.3798 22.3075 37.0787 24.361 36.2299 26.2098C35.381 28.0585 34.0201 29.6248 32.3086 30.7228C30.597 31.8208 28.6065 32.4044 26.5735 32.4045H17.3621V37.722H26.5735C30.8014 37.722 34.8561 36.0412 37.8457 33.0494C40.8352 30.0578 42.5147 26.0001 42.5147 21.7692C42.5147 17.5382 40.8352 13.4806 37.8457 10.4889C34.8561 7.49714 30.8014 5.81641 26.5735 5.81641Z\"\n                        fill=\"#FB0F01\" />\n                    <path\n                        d=\"M17.0033 37.7229H10.6265C8.52466 37.7228 6.4701 37.099 4.72258 35.9303C2.97506 34.7617 1.61306 33.1007 0.808806 31.1575C0.00455265 29.2143 -0.205837 27.076 0.204242 25.0131C0.61432 22.9501 1.62645 21.0553 3.11265 19.568C4.59884 18.0808 6.49237 17.0679 8.55377 16.6576C10.6152 16.2471 12.7519 16.4576 14.6937 17.2625C16.6356 18.0674 18.2954 19.4304 19.4632 21.1792C20.631 22.928 21.2543 24.984 21.2545 27.0873V33.4687C21.2516 34.5961 20.8028 35.6765 20.0062 36.4737C19.2096 37.271 18.1298 37.72 17.0033 37.7229ZM10.6265 21.7699C9.21719 21.7699 7.86566 22.3301 6.86916 23.3272C5.87267 24.3245 5.31284 25.677 5.31284 27.0873C5.31284 28.4975 5.87267 29.8501 6.86916 30.8473C7.86566 31.8445 9.21719 32.4047 10.6265 32.4047H15.9401V27.0873C15.936 25.6782 15.3748 24.3281 14.3792 23.3318C13.3836 22.3354 12.0345 21.7739 10.6265 21.7699Z\"\n                        fill=\"#2C5EFF\" />\n                </svg>\n            </div>\n            <v-breadcrumbs class=\"px-0 text--primary\">\n                <v-breadcrumbs-item disabled class=\"text-subtitle-1\">Instances</v-breadcrumbs-item>\n                <span class=\"text--grey mx-3\">/</span>\n                <v-breadcrumbs-item class=\"font-weight-regular\">New Instance</v-breadcrumbs-item>\n            </v-breadcrumbs>\n            <v-spacer></v-spacer>\n            <v-tooltip bottom>\n                <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn icon dense class=\"mr-3\" v-bind=\"attrs\" v-on=\"on\">\n                        <v-badge offset-x=\"9\" offset-y=\"7\" dot bordered color=\"pink\">\n                            <v-icon dense>mdi-bell-outline</v-icon>\n                        </v-badge>\n                    </v-btn>\n                </template>\n                <span>Notifications</span>\n            </v-tooltip>\n            <v-btn class=\"px-2 py-3 pr-7\" color=\"grey\" outlined dense>\n                <v-icon color=\"grey\" class=\"mr-1\">mdi-plus</v-icon>\n                <span style=\"color:#2F3857;\" class=\"font-weight-medium mr-4\">\n                    $125.50\n                </span>\n            </v-btn>\n            <v-divider vertical :inset=\"true\" class=\"my-auto mx-4\" style=\"height:20px;\"></v-divider>\n            <v-avatar color=\"grey lighten-1\" size=\"36\">\n                <v-icon color=\"white\">mdi-account</v-icon>\n            </v-avatar>\n        </v-app-bar>\n        <v-main>\n            <router-view></router-view>\n        </v-main>\n    </v-app>\n</template>\n\n<script>\nimport { defineComponent } from \"@vue/composition-api\";\n\nexport default defineComponent({\n    name: \"DashboardLayout\",\n    setup() {\n        return {\n            selectedItem: [],\n        }\n    }\n})\n</script>\n\n<style lang=\"scss\">\n.item-active {\n    color: white !important;\n    background-color: #2C5EFF;\n}\n\n.custom-outline-border {\n    border: 1px solid #e0e0e0;\n}\n\n.list-item-spacing {\n    padding: 10px 18.5px;\n    padding-left: 0;\n}\n\nheader .v-toolbar__content {\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n}\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Dashboard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Dashboard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Dashboard.vue?vue&type=template&id=27580972&\"\nimport script from \"./Dashboard.vue?vue&type=script&lang=js&\"\nexport * from \"./Dashboard.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Dashboard.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\nimport { VAppBar } from 'vuetify/lib/components/VAppBar';\nimport { VAvatar } from 'vuetify/lib/components/VAvatar';\nimport { VBadge } from 'vuetify/lib/components/VBadge';\nimport { VBreadcrumbs } from 'vuetify/lib/components/VBreadcrumbs';\nimport { VBreadcrumbsItem } from 'vuetify/lib/components/VBreadcrumbs';\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VDivider } from 'vuetify/lib/components/VDivider';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VList } from 'vuetify/lib/components/VList';\nimport { VListGroup } from 'vuetify/lib/components/VList';\nimport { VListItem } from 'vuetify/lib/components/VList';\nimport { VListItemContent } from 'vuetify/lib/components/VList';\nimport { VListItemGroup } from 'vuetify/lib/components/VList';\nimport { VListItemIcon } from 'vuetify/lib/components/VList';\nimport { VListItemTitle } from 'vuetify/lib/components/VList';\nimport { VMain } from 'vuetify/lib/components/VMain';\nimport { VNavigationDrawer } from 'vuetify/lib/components/VNavigationDrawer';\nimport { VSpacer } from 'vuetify/lib/components/VGrid';\nimport { VTooltip } from 'vuetify/lib/components/VTooltip';\ninstallComponents(component, {VApp,VAppBar,VAvatar,VBadge,VBreadcrumbs,VBreadcrumbsItem,VBtn,VDivider,VIcon,VList,VListGroup,VListItem,VListItemContent,VListItemGroup,VListItemIcon,VListItemTitle,VMain,VNavigationDrawer,VSpacer,VTooltip})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',{staticClass:\"pa-0\",attrs:{\"fluid\":\"\"}},[_c('v-row',[_c('v-col',{staticClass:\"pr-2\",attrs:{\"cols\":\"8\"}},[_c('v-card',{staticClass:\"py-8\",attrs:{\"elevation\":\"0\"}},[_c('SelectRegion'),_c('SelectPlan'),_c('OperatingSystems'),_c('SSHKeysList'),_c('HostNameInput')],1)],1),_c('v-col',{staticClass:\"pl-2\",staticStyle:{\"position\":\"relative\"},attrs:{\"cols\":\"4\"}},[_c('v-card',{staticClass:\"px-5 py-8\",staticStyle:{\"position\":\"sticky\",\"top\":\"70px\"},attrs:{\"elevation\":\"0\"}},[_c('InstanceQuantityCounter'),_c('EnableIPv4'),_c('v-divider'),_c('div',{staticClass:\"price-container my-6\"},[_c('h6',{staticClass:\"primary--text text-h6\"},[_vm._v(\"Total\")]),_c('h6',{staticClass:\"text-h6\"},[_c('span',{staticClass:\"text-h5 primary--text font-weight-medium\"},[_vm._v(\"$ 57.95\")]),_c('span',{staticClass:\"grey--text lighten-1 text-body-1\"},[_vm._v(\" /month\")])])]),_c('v-btn',{staticClass:\"py-5\",class:!_vm.deployBtnDisable && 'bg-success',attrs:{\"disabled\":_vm.deployBtnDisable,\"color\":_vm.deployBtnDisable ? 'normal' : 'success',\"large\":\"\",\"elevation\":\"0\",\"block\":\"\"},on:{\"click\":_vm.showUserData}},[_c('span',{class:!_vm.deployBtnDisable ? 'text-white' : ''},[_vm._v(\"DEPLOY NOW\")])])],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"px-8 pb-14\"},[_c('h6',{staticClass:\"text-h6 primary--text mb-4\"},[_vm._v(\"Region\")]),_c('v-row',_vm._l((_vm.regions),function(region){return _c('v-col',{key:region.id,staticClass:\"px-2\",attrs:{\"md\":\"4\"}},[_c('v-card',{staticClass:\"d-flex align-center py-4 px-3 disable-grey-overlay\",class:region.checked ? 'border-color-active' : 'border-color-disable',attrs:{\"elevation\":region.checked ? 2 : 0},on:{\"click\":function($event){return _vm.selectRegion(region.id)}}},[_c('img',{class:region.checked ? '' : 'greyscale-mode',attrs:{\"src\":region.img,\"width\":\"40\"}}),_c('span',{staticClass:\"ml-3 body-1 font-weight-medium\",class:region.checked ? 'primary--text' : 'grey--text'},[_vm._v(\" \"+_vm._s(region.name)+\" \")])])],1)}),1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectRegion.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectRegion.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./SelectRegion.vue?vue&type=template&id=911f2238&scoped=true&\"\nimport script from \"./SelectRegion.vue?vue&type=script&lang=ts&\"\nexport * from \"./SelectRegion.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./SelectRegion.vue?vue&type=style&index=0&id=911f2238&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"911f2238\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VCard,VCol,VRow})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h6',{staticClass:\"text-h6 primary--text px-8 mb-4\"},[_vm._v(\"Plan\")]),_c('v-data-table',{staticClass:\"elevation-0 mb-14\",attrs:{\"headers\":_vm.headers,\"disable-sort\":\"\",\"loading\":_vm.loadingPlans,\"items\":_vm.allPlans,\"hide-default-footer\":\"\"},scopedSlots:_vm._u([{key:\"body\",fn:function(ref){\nvar items = ref.items;\nreturn [_c('tbody',_vm._l((items),function(item){return _c('tr',{key:item.id},[_c('td',{staticClass:\"px-4 py-2\"},[_c('v-radio-group',{directives:[{name:\"ripple\",rawName:\"v-ripple\",value:(false),expression:\"false\"}],staticClass:\"my-2\",attrs:{\"hide-details\":\"\"},model:{value:(_vm.radioGroup),callback:function ($$v) {_vm.radioGroup=$$v},expression:\"radioGroup\"}},[_c('v-radio',{staticClass:\"justify-center\",attrs:{\"value\":item,\"color\":\"#2C5EFF\"}})],1)],1),_c('td',{staticClass:\"primary--text font-weight-regular subtitle-2 px-4 py-2\"},[_vm._v(\" \"+_vm._s(item.specification.cpu)+\" CPU \")]),_c('td',{staticClass:\"primary--text font-weight-regular subtitle-2 px-4 py-2\"},[_vm._v(\" \"+_vm._s(item.specification.ram)+\" GB \")]),_c('td',{staticClass:\"primary--text font-weight-regular subtitle-2 px-4 py-2\"},[_vm._v(\" \"+_vm._s(item.specification.storage)+\" GB \")]),_c('td',{staticClass:\"primary--text font-weight-regular subtitle-2 px-4 py-2\"},[_vm._v(\" Up to 1 Gbps \")]),_c('td',{staticClass:\"primary--text font-weight-regular subtitle-2 px-4 py-8 d-flex flex-row justify-space-between align-center\"},[_c('span',[_vm._v(\"$ \"+_vm._s(item.monthlyPrice))]),_c('v-tooltip',{attrs:{\"bottom\":\"\",\"color\":\"primary\",\"nudge-top\":10},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('v-icon',_vm._g(_vm._b({attrs:{\"color\":item.disable ? 'grey' : 'primary',\"dark\":\"\"}},'v-icon',attrs,false),on),[_vm._v(\" mdi-information-outline \")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(item.hourlyPrice)+\"/hour\")])])],1)])}),0)]}}])})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectPlan.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectPlan.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./SelectPlan.vue?vue&type=template&id=37a454a3&\"\nimport script from \"./SelectPlan.vue?vue&type=script&lang=ts&\"\nexport * from \"./SelectPlan.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VDataTable } from 'vuetify/lib/components/VDataTable';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VRadio } from 'vuetify/lib/components/VRadioGroup';\nimport { VRadioGroup } from 'vuetify/lib/components/VRadioGroup';\nimport { VTooltip } from 'vuetify/lib/components/VTooltip';\ninstallComponents(component, {VDataTable,VIcon,VRadio,VRadioGroup,VTooltip})\n\n\n/* vuetify-loader */\nimport installDirectives from \"!../../../node_modules/vuetify-loader/lib/runtime/installDirectives.js\"\nimport Ripple from 'vuetify/lib/directives/ripple'\ninstallDirectives(component, {Ripple})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"px-8\"},[_c('h6',{staticClass:\"text-h6 primary--text mb-4\"},[_vm._v(\"Hostname\")]),_c('v-row',[_c('v-col',{attrs:{\"cols\":\"6\"}},[_c('v-text-field',{attrs:{\"label\":\"Host Name\",\"outlined\":\"\",\"dense\":\"\",\"hide-details\":\"\"},model:{value:(_vm.hostName),callback:function ($$v) {_vm.hostName=$$v},expression:\"hostName\"}})],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HostNameInput.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HostNameInput.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./HostNameInput.vue?vue&type=template&id=f6d128f8&\"\nimport script from \"./HostNameInput.vue?vue&type=script&lang=ts&\"\nexport * from \"./HostNameInput.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VTextField } from 'vuetify/lib/components/VTextField';\ninstallComponents(component, {VCol,VRow,VTextField})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-checkbox',{staticClass:\"my-6 checkbox-label-opacity\",attrs:{\"color\":\"primary\",\"hide-details\":\"\"},scopedSlots:_vm._u([{key:\"label\",fn:function(){return [_c('span',{staticClass:\"text-primary text-body-1\"},[_vm._v(\"Enable Ip4\")])]},proxy:true}]),model:{value:(_vm.enableIP4),callback:function ($$v) {_vm.enableIP4=$$v},expression:\"enableIP4\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EnableIPv4.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EnableIPv4.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./EnableIPv4.vue?vue&type=template&id=0fcc46d8&\"\nimport script from \"./EnableIPv4.vue?vue&type=script&lang=ts&\"\nexport * from \"./EnableIPv4.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCheckbox } from 'vuetify/lib/components/VCheckbox';\ninstallComponents(component, {VCheckbox})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"text-body-2 primary--text mb-1\"},[_vm._v(\"Instance quantity:\")]),_c('div',{staticClass:\"ip-counter-container\"},[_c('div',{staticClass:\"btn btn-reduce text-subtitle-1 text-grey-darken-1\",attrs:{\"elevation\":\"0\"},on:{\"click\":_vm.decrease}},[_c('v-icon',[_vm._v(\"mdi-minus\")])],1),_c('div',{staticClass:\"rounded-0 counter text-body-2 text-primary\",attrs:{\"type\":\"number\"}},[_vm._v(\" \"+_vm._s(_vm.count)+\" \")]),_c('div',{staticClass:\"btn btn-add text-subtitle-1 text-grey-darken-1\",attrs:{\"elevation\":\"0\"},on:{\"click\":_vm.increase}},[_c('v-icon',[_vm._v(\"mdi-plus\")])],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InstanceQuantityCounter.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InstanceQuantityCounter.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./InstanceQuantityCounter.vue?vue&type=template&id=0f4d8fa3&\"\nimport script from \"./InstanceQuantityCounter.vue?vue&type=script&lang=ts&\"\nexport * from \"./InstanceQuantityCounter.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./InstanceQuantityCounter.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VIcon } from 'vuetify/lib/components/VIcon';\ninstallComponents(component, {VIcon})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"px-8\"},[_c('h6',{staticClass:\"text-h6 primary--text mb-4\"},[_vm._v(\"Operating System\")]),_c('v-row',{staticClass:\"mb-14\"},_vm._l((_vm.operatingSystems),function(os){return _c('v-col',{key:os.id,staticStyle:{\"padding\":\"10px\"},attrs:{\"cols\":\"4\"}},[_c('v-card',{staticClass:\"border mt-1 d-flex flex-column justify-center\",class:_vm.currentOS.osId == os.id ? 'border-active' : '',staticStyle:{\"padding\":\"16px\"},attrs:{\"elevation\":_vm.currentOS.osId == os.id ? 2 : 0}},[_c('div',{staticClass:\"d-flex align-center mb-4\"},[_c('img',{staticClass:\"mr-5\",attrs:{\"src\":os.img,\"width\":\"40\"}}),_c('span',{staticClass:\"primary--text text-body-1 font-weight-medium\"},[_vm._v(_vm._s(os.name))])]),_c('v-select',{staticClass:\"text-caption-2\",attrs:{\"items\":os.versions,\"hide-details\":\"\",\"label\":\"Select Version\",\"outlined\":\"\",\"dense\":\"\",\"return-object\":\"\"},model:{value:(_vm.currentOS),callback:function ($$v) {_vm.currentOS=$$v},expression:\"currentOS\"}})],1)],1)}),1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./OperatingSystems.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./OperatingSystems.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./OperatingSystems.vue?vue&type=template&id=1aac97fb&scoped=true&\"\nimport script from \"./OperatingSystems.vue?vue&type=script&lang=ts&\"\nexport * from \"./OperatingSystems.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./OperatingSystems.vue?vue&type=style&index=0&id=1aac97fb&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1aac97fb\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VSelect } from 'vuetify/lib/components/VSelect';\ninstallComponents(component, {VCard,VCol,VRow,VSelect})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"px-8\"},[_vm._m(0),_c('v-row',{staticClass:\"mb-14\"},[_c('v-col',{staticStyle:{\"cursor\":\"pointer\"},attrs:{\"cols\":\"4\"},on:{\"click\":function($event){return _vm.addNewSSHKey()}}},[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn [_c('v-card',{staticClass:\"bg-white custom-add-ssh pa-5 text-primary custom-border-ssh\",attrs:{\"elevation\":hover ? 2 : 0}},[_c('v-icon',{staticClass:\"mr-2\",staticStyle:{\"font-size\":\"1.6rem\"},attrs:{\"color\":\"primary\"}},[_vm._v(\"mdi-plus-circle-outline\")]),_c('span',{staticClass:\"text-body-1 font-weight-medium\"},[_vm._v(\"Add New\")])],1)]}}])})],1),_vm._l((_vm.list),function(item){return _c('v-col',{key:item.id,attrs:{\"cols\":\"4\"}},[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn [_c('v-card',{staticClass:\"custom-check-ssh pa-5 text-primary custom-border-ssh\",attrs:{\"elevation\":hover ? 3 : 0}},[_c('div',{staticStyle:{\"display\":\"flex\",\"align-items\":\"center\",\"justify-content\":\"space-between\",\"column-gap\":\"10px\"}},[_c('v-checkbox',{staticClass:\"ma-0 pa-0\",attrs:{\"label\":item.name,\"hide-details\":\"\",\"color\":\"primary\"},model:{value:(item.checked),callback:function ($$v) {_vm.$set(item, \"checked\", $$v)},expression:\"item.checked\"}}),_c('v-tooltip',{attrs:{\"bottom\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('v-icon',_vm._g(_vm._b({attrs:{\"color\":\"primary\"}},'v-icon',attrs,false),on),[_vm._v(\" mdi-information-outline \")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(item.name))])])],1)])]}}],null,true)})],1)})],2)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h6',{staticClass:\"text-h6 primary--text mb-4\"},[_vm._v(\" SSH Key \"),_c('span',{staticClass:\"text-subtitle-1 text-grey\"},[_vm._v(\"(optional)\")])])}]\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SSHKeysList.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SSHKeysList.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./SSHKeysList.vue?vue&type=template&id=4a0785e9&\"\nimport script from \"./SSHKeysList.vue?vue&type=script&lang=ts&\"\nexport * from \"./SSHKeysList.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./SSHKeysList.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCheckbox } from 'vuetify/lib/components/VCheckbox';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VHover } from 'vuetify/lib/components/VHover';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VTooltip } from 'vuetify/lib/components/VTooltip';\ninstallComponents(component, {VCard,VCheckbox,VCol,VHover,VIcon,VRow,VTooltip})\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InstancesNew.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41[0].rules[0].use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InstancesNew.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./InstancesNew.vue?vue&type=template&id=42ae2d1f&\"\nimport script from \"./InstancesNew.vue?vue&type=script&lang=ts&\"\nexport * from \"./InstancesNew.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./InstancesNew.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VDivider } from 'vuetify/lib/components/VDivider';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VCard,VCol,VContainer,VDivider,VRow})\n","import Vue from \"vue\";\nimport VueRouter, { RouteConfig } from \"vue-router\";\nimport DashboardLayout from \"@/layouts/Dashboard.vue\";\nimport InstancesNew from \"@/views/InstancesNew.vue\";\n\nVue.use(VueRouter);\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: \"/\",\n    component: DashboardLayout,\n    children: [\n      {\n        path: \"\",\n        component: InstancesNew,\n      },\n    ],\n  },\n];\n\nconst router = new VueRouter({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes,\n});\n\nexport default router;\n","import Vue from \"vue\";\nimport Vuetify from \"vuetify/lib/framework\";\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n  theme: {\n    themes: {\n      light: {\n        background: \"#f1f9fe\",\n        primary: \"#2f3857\",\n        secondary: \"#b0bec5\",\n        accent: \"#8c9eff\",\n        success: \"#00CD82\",\n        error: \"#b71c1c\",\n      },\n    },\n  },\n});\n","import axios from \"axios\";\n\naxios.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  (error) => console.log(error)\n);\n\nexport default axios;\n","import Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport store from \"./store\";\nimport vuetify from \"./plugins/vuetify\";\nimport CompositionApi from \"@vue/composition-api\";\nimport \"@/assets/scss/main.scss\";\nimport \"@/plugins/api\";\nimport axios from \"@/plugins/axios\";\nimport VueAxios from \"vue-axios\";\n\nVue.use(CompositionApi);\nVue.use(VueAxios, axios);\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router,\n  store,\n  vuetify,\n  render: (h) => h(App),\n}).$mount(\"#app\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = function(module) {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: function() {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/instance/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcloudzy_v2\"] = self[\"webpackChunkcloudzy_v2\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1901); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["PlansMutations","render","_vm","this","_h","$createElement","_c","_self","staticClass","class","toast","color","attrs","timeout","model","value","callback","$$v","$set","expression","_e","_v","_s","text","staticRenderFns","mutations","SET_PLANS","state","payload","all","SET_PLANS_LOADING","loading","BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","axios","globalAxios","RequiredError","Error","field","msg","super","CouponTypeEnum","CustomerStatusEnum","InvoiceStatusEnum","PaymentStatusEnum","SortTypeEnum","TicketUrgencyEnum","ToggleInstanceSuspensionEnum","TransactionTypeEnum","UserStatusEnum","PlansApiAxiosParamCreator","getPlanPlansPlanIdGet","planId","options","undefined","localVarPath","encodeURIComponent","String","localVarUrlObj","globalImportUrl","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","search","headers","url","listPlansPlansGet","PlansApiFp","localVarAxiosArgs","axiosRequestArgs","request","PlansApi","Configuration","param","apiKey","username","password","accessToken","conf","process","plans","PlansActions","actions","async","GET_PLANS","commit","then","res","data","finally","ToastsMutations","SET_TOAST","show","ToastsActions","SHOW_TOAST","console","log","MutationApp","SET_CURRENT_REGION","instances","currentRegion","SET_CURRENT_PLAN","currentPlan","SET_CURRENT_OS","currentOS","SET_HOST_NAME","hostName","SET_QUANTITY","quantity","SET_IPV4","ipv4","SET_SSH_KEY","sshList","app","Vue","Vuex","store","modules","defineComponent","name","setup","computed","component","VSnackbar","staticStyle","selectedItem","scopedSlots","_u","key","fn","proxy","ref","on","_g","_b","VApp","deployBtnDisable","showUserData","_l","region","id","checked","$event","selectRegion","img","regions","filter","require","watch","val","map","VCard","loadingPlans","allPlans","items","item","directives","rawName","radioGroup","specification","cpu","ram","storage","monthlyPrice","disable","hourlyPrice","onBeforeMount","align","VDataTable","Ripple","VCol","enableIP4","VCheckbox","decrease","count","increase","VIcon","os","osId","versions","operatingSystems","_m","addNewSSHKey","hover","list","push","i","components","SelectRegion","SelectPlan","HostNameInput","EnableIPv4","InstanceQuantityCounter","OperatingSystems","SSHKeysList","userData","plan","document","title","VBtn","VueRouter","routes","path","DashboardLayout","children","InstancesNew","router","mode","base","Vuetify","theme","themes","light","background","primary","secondary","accent","success","error","CompositionApi","VueAxios","vuetify","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdO","deferred","O","result","chunkIds","priority","notFulfilled","Infinity","length","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","hmd","create","set","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}